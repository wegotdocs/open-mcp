{
  "required": [
    "compositeDelimiter",
    "elementDelimiter",
    "segmentTerminator",
    "subCompositeDelimiter"
  ],
  "type": "object",
  "properties": {
    "acceptackoption": {
      "type": "string",
      "xml": {
        "attribute": true
      },
      "enum": [
        "AL",
        "NE",
        "ER",
        "SU",
        "NOT_DEFINED"
      ]
    },
    "appackoption": {
      "type": "string",
      "xml": {
        "attribute": true
      },
      "enum": [
        "AL",
        "NE",
        "ER",
        "SU",
        "NOT_DEFINED"
      ]
    },
    "batchoption": {
      "type": "string",
      "xml": {
        "attribute": true
      },
      "enum": [
        "none",
        "batch"
      ]
    },
    "compositeDelimiter": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `compositeDelimiter` to the tool, first call the tool `expandSchema` with \"/properties/PartnerInfo/properties/HL7PartnerInfo/properties/HL7Options/properties/compositeDelimiter\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "elementDelimiter": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `elementDelimiter` to the tool, first call the tool `expandSchema` with \"/properties/PartnerInfo/properties/HL7PartnerInfo/properties/HL7Options/properties/elementDelimiter\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "filteracknowledgements": {
      "type": "boolean",
      "xml": {
        "attribute": true
      }
    },
    "outboundInterchangeValidation": {
      "type": "boolean",
      "xml": {
        "attribute": true
      }
    },
    "outboundValidationOption": {
      "type": "string",
      "xml": {
        "attribute": true
      },
      "enum": [
        "filterError",
        "failAll"
      ]
    },
    "rejectDuplicates": {
      "type": "boolean",
      "xml": {
        "attribute": true
      }
    },
    "segmentTerminator": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `segmentTerminator` to the tool, first call the tool `expandSchema` with \"/properties/PartnerInfo/properties/HL7PartnerInfo/properties/HL7Options/properties/segmentTerminator\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "subCompositeDelimiter": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `subCompositeDelimiter` to the tool, first call the tool `expandSchema` with \"/properties/PartnerInfo/properties/HL7PartnerInfo/properties/HL7Options/properties/subCompositeDelimiter\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    }
  }
}