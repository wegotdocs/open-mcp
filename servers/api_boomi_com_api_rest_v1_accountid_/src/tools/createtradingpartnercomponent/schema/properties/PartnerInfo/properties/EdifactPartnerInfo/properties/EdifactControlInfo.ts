import { z } from "zod"

export const inputParamsSchema = {
  "UNBControlInfo": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `UNBControlInfo` to the tool, first call the tool `expandSchema` with \"/properties/PartnerInfo/properties/EdifactPartnerInfo/properties/EdifactControlInfo/properties/UNBControlInfo\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "UNGControlInfo": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `UNGControlInfo` to the tool, first call the tool `expandSchema` with \"/properties/PartnerInfo/properties/EdifactPartnerInfo/properties/EdifactControlInfo/properties/UNGControlInfo\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "UNHControlInfo": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `UNHControlInfo` to the tool, first call the tool `expandSchema` with \"/properties/PartnerInfo/properties/EdifactPartnerInfo/properties/EdifactControlInfo/properties/UNHControlInfo\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>")
}