import { z } from "zod"

export const inputParamsSchema = {
  "id": z.string().describe("Represents the unique, system-generated ID of the extended user-defined function."),
  "Inputs": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `Inputs` to the tool, first call the tool `expandSchema` with \"/properties/Inputs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Lists the function's input and outputs according to their user-given names and keys. You must list inputs and outputs sequentially in order according to their key values. When creating or updating functions, it requires all input and output values in the request regardless if they are to be mapped or populated with a default value. \n\n The maximum number of inputs or outputs is 100.</property-description>"),
  "Mappings": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `Mappings` to the tool, first call the tool `expandSchema` with \"/properties/Mappings\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Defines the mapping of inputs and outputs for the user-defined function and each function step. It uses the following attributes:\n\n 1. fromFunction - represents the function ID from which you are mapping.\n 2. fromKey - represents the function's output key from which you are mapping.\n 3. toFunction - represents the function ID to which you are mapping.\n 4. toKey - represents the function's input key to which you are mapping.</property-description>"),
  "Outputs": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `Outputs` to the tool, first call the tool `expandSchema` with \"/properties/Outputs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Lists the function's input and outputs according to their user-given names and keys. You must list inputs and outputs sequentially in order according to their key values. See the following row for more information. When creating or updating functions, it requires all input and output values in the request regardless if they are to be mapped or populated with a default value. \n\n The maximum number of inputs or outputs is 100.</property-description>"),
  "Steps": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `Steps` to the tool, first call the tool `expandSchema` with \"/properties/Steps\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Defines the individual function steps and the order in which they need to occur within the greater user-defined function. The following attributes are used: 1.`position` - represents the step's number order in the greater function. 2.`cacheType` - indicates the caching behavior of the individual function step. The allowed `cacheType` values are:1.`None` \\(default, if omitted in the request\\)— It does not use Map function caching. 2. `ByDocument` — Caches the map function’s input and output values for each processed document. 3. `ByMap` — Caches the map function’s input and output values for each processed map. -   `id` - represents the function step's ID in the format of \"FUNCEXT--xxxxxxxxxx\". 4. `type` - represents the type of function \\(for example, \"MathCeil\" or \"CustomScripting\"\\).<br /> Within the `Steps` element, you also need to define the following `input` and `output` variables for each function step:<br />1. `default` - Optional. Specifies the input value that the function uses if not provided by the user.<br />2. `name` - the user-defined name of the associated input or output. \n\n >**Note:** The user interface automatically uses the used function type as the step name, but you can use this API object to change function step names. 3. `key` - the number ID assigned to a function step. This key is used to map function steps together in the `Mappings` attribute.</property-description>"),
  "createdBy": z.string().describe("The user ID of the user who created the user-defined function.").optional(),
  "createdDate": z.string().datetime({ offset: true }).describe("Timestamp of the creation of the user-defined function.").optional(),
  "deleted": z.boolean().describe("This variable indicates the deleted status of the user defined function component. If the value is true, it indicates the deletion of the referenced user-defined function. A false value indicates that the referenced user-defined function is not deleted and is available for use.").optional(),
  "description": z.string().describe("Optional. Additional details about the user-defined function component.").optional(),
  "environmentMapExtensionId": z.string().describe("The ID of an environment map extension. **Important:** This and other Environment Map Extension API objects require the client to know the ID of the environment map extension. In the user-defined function interface, click **Copy EME ID** to easily copy this ID for use in your API requests, or query the [Environment Map Extensions Summary object](/api/platformapi#tag/EnvironmentMapExtensionsSummary).").optional(),
  "b_id": z.string().describe("Required. Represents the unique, system-generated ID of the extended user-defined function.").optional(),
  "modifiedBy": z.string().describe("The user ID of the user who last updated the user-defined function.").optional(),
  "modifiedDate": z.string().datetime({ offset: true }).describe("Timestamp of when the user-defined function was last updated.").optional(),
  "name": z.string().describe("Required. Represents the name of the user-defined function component.").optional()
}