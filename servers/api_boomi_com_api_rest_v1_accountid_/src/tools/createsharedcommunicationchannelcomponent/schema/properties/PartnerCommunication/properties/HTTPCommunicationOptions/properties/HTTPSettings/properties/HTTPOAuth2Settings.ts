import { z } from "zod"

export const inputParamsSchema = {
  "accessTokenEndpoint": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `accessTokenEndpoint` to the tool, first call the tool `expandSchema` with \"/properties/PartnerCommunication/properties/HTTPCommunicationOptions/properties/HTTPSettings/properties/HTTPOAuth2Settings/properties/accessTokenEndpoint\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "accessTokenParameters": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `accessTokenParameters` to the tool, first call the tool `expandSchema` with \"/properties/PartnerCommunication/properties/HTTPCommunicationOptions/properties/HTTPSettings/properties/HTTPOAuth2Settings/properties/accessTokenParameters\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "authorizationParameters": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `authorizationParameters` to the tool, first call the tool `expandSchema` with \"/properties/PartnerCommunication/properties/HTTPCommunicationOptions/properties/HTTPSettings/properties/HTTPOAuth2Settings/properties/authorizationParameters\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "authorizationTokenEndpoint": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `authorizationTokenEndpoint` to the tool, first call the tool `expandSchema` with \"/properties/PartnerCommunication/properties/HTTPCommunicationOptions/properties/HTTPSettings/properties/HTTPOAuth2Settings/properties/authorizationTokenEndpoint\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "credentials": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `credentials` to the tool, first call the tool `expandSchema` with \"/properties/PartnerCommunication/properties/HTTPCommunicationOptions/properties/HTTPSettings/properties/HTTPOAuth2Settings/properties/credentials\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "grantType": z.enum(["code","client_credentials","password"]).optional(),
  "scope": z.string()
}