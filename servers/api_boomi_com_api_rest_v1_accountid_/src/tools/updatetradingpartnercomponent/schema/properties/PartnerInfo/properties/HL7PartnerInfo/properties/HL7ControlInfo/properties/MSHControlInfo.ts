import { z } from "zod"

export const inputParamsSchema = {
  "Application": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `Application` to the tool, first call the tool `expandSchema` with \"/properties/PartnerInfo/properties/HL7PartnerInfo/properties/HL7ControlInfo/properties/MSHControlInfo/properties/Application\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "Facility": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `Facility` to the tool, first call the tool `expandSchema` with \"/properties/PartnerInfo/properties/HL7PartnerInfo/properties/HL7ControlInfo/properties/MSHControlInfo/properties/Facility\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "NetworkAddress": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `NetworkAddress` to the tool, first call the tool `expandSchema` with \"/properties/PartnerInfo/properties/HL7PartnerInfo/properties/HL7ControlInfo/properties/MSHControlInfo/properties/NetworkAddress\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "ProcessingId": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `ProcessingId` to the tool, first call the tool `expandSchema` with \"/properties/PartnerInfo/properties/HL7PartnerInfo/properties/HL7ControlInfo/properties/MSHControlInfo/properties/ProcessingId\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>")
}