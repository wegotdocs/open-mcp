import { z } from "zod"

export const inputParamsSchema = {
  "ID": z.string().describe("ID is the identifier of the object.").readonly().optional(),
  "analyzeOutput": z.boolean().describe("If enabled, run the analysis pipelines on the provider output. No policy will be\napplied, but the response will be analyzed and classified.").optional(),
  "category": z.enum(["User","App"]).describe("The category of the provider."),
  "createTime": z.string().datetime({ offset: true }).describe("Creation date of the object.").readonly().optional(),
  "description": z.string().describe("The description of the provider.").optional(),
  "errorTransformer": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `errorTransformer` to the tool, first call the tool `expandSchema` with \"/properties/errorTransformer\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Used to transform errors before sending them back to the client.</property-description>").optional(),
  "experimental": z.boolean().describe("If true, consider this provider as experimental. It will require to use a custom\nPAC Config to make it usable from the proxy.pac.").optional(),
  "extractors": z.array(z.object({ "def": z.object({ "ID": z.string().describe("ID is the identifier of the object.").readonly().optional(), "SSEManagement": z.enum(["Collect","Stream"]).describe("This property defines how you want the extractor to work with\nserver-side events. With Collect all the events buffer until the server\ncloses the connection and sends the entire data to the lua code\nwhile Stream will collect line by line and will send events line by line."), "analyzers": z.array(z.string()).describe("The analyzers parameter allows for customizing which analyzers should be used,\noverriding the default selection. Each analyzer entry can optionally include a\nprefix to modify its behavior:\n\n  - No prefix: Runs only the specified analyzers and any dependencies required\nfor deeper analyzis (slower but more acurate).\n  - '+' (enable): Activates an analyzer that is disabled by default.\n  - '-' (disable): Disables an analyzer that is enabled by default.\n  - '@' (direct execution): Runs the analyzer immediately, bypassing the deeper\nanalyzis (faster but less acurate).\n\nAn analyzers entry can be specified using:\n  - The analyzer name (e.g., 'Toxicity detector')\n  - The analyzer ID (e.g., 'en-text-toxicity-detector')\n  - The analyzer group (e.g., 'Detectors')\n  - A detector name (e.g., 'toxic')\n  - A detector label (e.g., 'insult')\n  - A detector group (e.g., 'Malcontents')\n\nIf left empty, all default analyzers will be executed.").optional(), "anonymization": z.enum(["FixedSize","VariableSize"]).describe("How to anonymize the data. If deanonymize is true, then VariablSize is required."), "behavior": z.enum(["Popup","Throw","Ignore"]).describe("Defines how to handle error in the case of a webpage. If set to Popup, the error\nwill be shown in a popup. If throw, a javascript error will be returned."), "block": z.enum(["Allow","Before","After"]).describe("Block the request to the provider if not Allow. If Before, the data will be\nblocked before running any extraction or analyzis. If After block the request\nafter analysizis."), "cancelBehavior": z.enum(["Block","SendRedacted"]).describe("The behavior to take when cancel is chosen from the popup."), "createTime": z.string().datetime({ offset: true }).describe("Creation date of the object.").readonly().optional(), "deanonymize": z.boolean().describe("If true, deanonymize the redacted data. This has no effects on streaming output.").optional(), "description": z.string().describe("The description of the provider.").optional(), "honorPriorDecision": z.boolean().describe("If true, it will wait on a prior popup and honor its decision. It only has\neffect if there is an existing popup being shown.").optional(), "ignore": z.boolean().describe("If true, the analysis will run, but nothing will be logged.").optional(), "importHash": z.string().describe("The hash of the structure used to compare with new import version.").optional(), "importLabel": z.string().describe("The user-defined import label that allows the system to group resources from the\nsame import operation.").optional(), "method": z.enum(["Post","Put","Patch","Get","Delete","Options","Head"]).describe("The method to match."), "name": z.string().describe("The internal reference name of the object."), "namespace": z.string().describe("The namespace of the object.").readonly().optional(), "path": z.string().describe("A regular expression to match a URL path to log."), "propagate": z.boolean().describe("Propagates the object to all child namespaces. This is always true."), "script": z.string().describe("If not empty, use this lua code to run the extraction.").optional(), "type": z.enum(["Input","Output"]).describe("The type of extractor."), "updateTime": z.string().datetime({ offset: true }).describe("Last update date of the object.").readonly().optional() }).describe("An extractor allows to create a reusable extractor for providers.").optional(), "hosts": z.array(z.string()).describe("Optional hosts to match. This is useful in case the provider has multiple hosts\nto discriminate which logger to use.").optional(), "ref": z.string().describe("References a preexisting extractor definition.").optional() }).describe("This object allows to either define an extractor for the provider, or to\nreference an existing extractor from database.")).describe("List of extractors for the provider.").optional(),
  "friendlyName": z.string().describe("Friendly Name of the provider."),
  "hosts": z.array(z.object({ "disableFingerprintingResistance": z.boolean().describe("Disable Apex routines to try to mimic client's tls handshake signature. You\nprobably want this on.").optional(), "name": z.string().describe("The hostname."), "prefix": z.string().describe("URL prefix for additional matching.").optional(), "proxyLabel": z.string().describe("The proxy label to use to exit to this host.").optional() }).describe("This is node definition.")).describe("Hosts supported by the providers.").optional(),
  "icon": z.string().describe("The icon of the provider, base64 encoded.").optional(),
  "importHash": z.string().describe("The hash of the structure used to compare with new import version.").optional(),
  "importLabel": z.string().describe("The user-defined import label that allows the system to group resources from the\nsame import operation.").optional(),
  "injectors": z.array(z.object({ "delayXHRPatching": z.boolean().describe("Since JS world is the mess we all know, there are some cases when we must delay\nthe monkey patching of the XHR request.").optional(), "hosts": z.array(z.string()).describe("Optional hosts to match. This is useful in case the provider has multiple hosts\nto discriminate which logger to use.").optional(), "method": z.enum(["Post","Put","Patch","Get","Delete","Options","Head"]).describe("The method to match."), "path": z.string().describe("A regular expression to match a URL path to log.") }).describe("TODO.")).describe("Defines injection point for javascript snippet.").optional(),
  "mappers": z.array(z.object({ "expiration": z.string().describe("Set how long the data should be cached."), "hosts": z.array(z.string()).describe("Optional hosts to match. This is useful in case the provider has multiple hosts\nto discriminate which logger to use.").optional(), "method": z.enum(["Post","Put","Patch","Get","Delete","Options","Head"]).describe("The method to match."), "name": z.string().describe("The name of the extractor. It will be used to identify which extractor was used\nduring an extraction.").optional(), "path": z.string().describe("A regular expression to match a URL path to log."), "script": z.string().describe("If not empty, use this lua code to run the extraction.").optional() }).describe("TODO.")).describe("List of user mappers.").optional(),
  "name": z.string().describe("Name of the provider."),
  "namespace": z.string().describe("The namespace of the object.").readonly().optional(),
  "propagate": z.boolean().describe("Propagates the object to all child namespaces. This is always true.").optional(),
  "riskScore": z.number().describe("The latest risk score of the provider.").optional(),
  "status": z.enum(["Stable","Unstable"]).describe("The support status of the provider."),
  "tokenSwap": z.boolean().describe("If true, consider the incoming calls to use an acuvity token and swap them using\nregistered providertokens.").optional(),
  "trustedCA": z.string().describe("If set, additionally trust the Certificate Authorities from the PEM data. This\nis useful when working on a custom provider using a self signed CA chain.").optional(),
  "updateTime": z.string().datetime({ offset: true }).describe("Last update date of the object.").readonly().optional(),
  "upstreamUnsecure": z.boolean().describe("If enabled, force the ustream scheme to be HTTP instead of https. Mostly use for\ndev purposes.").optional()
}