import { z } from "zod"

export const inputParamsSchema = {
  "ID": z.string().describe("ID is the identifier of the object.").readonly().optional(),
  "components": z.array(z.object({ "CAInjectionEnabled": z.boolean().describe("EXPERIMENTAL. If egress mode is inline, the Apex will act as a transparent\nproxy. The certificates that will be served by the proxy are generated by the\nApex itself which are issued by a dynamic TLS CA. If you enable this feature,\nthe matching app component instances will get the CA certificate dynamically\ninjected into the system trust store.").optional(), "description": z.string().describe("The description of the component.").optional(), "egressMode": z.enum(["Disabled","Mirror","Inline"]).describe("The egress datapath mode to use for network traffic going out to providers for\nthis application component. By default this is set to disabled. However, this\ncan be changed to mirror traffic where the Apex is only providing visibility\nwith no possibility of any access or content policies to take effect. Or this\ncan be set to inline in which case all traffic to providers will be redirected\nto the Apex which acts as a transparent proxy in this case. In this mode access\nand content policies will take effect."), "ingressProviderConfigs": z.array(z.object({ "dialTLS": z.enum(["Preserve","Auto","Enabled","Disabled"]).describe("This option controls the dialing behaviour of the apex to the origin server.\nShould be explicitly set to enabled if the origin expects TLS connections. And\nvice versa it should be set to disabled if the origin expects connections in\nplaintext. By default this setting is set to preserve which means that the apex\nis going to dial using whatever mode it terminated its own connection with: if\nthe apex received a TLS connection, it will dial TLS, if it received a plaintext\nconnection, then it will dial plaintext. The apex receiving behaviour can be\ncontrolled with the listenTLS option. As a last resort this setting can be set\nto auto which means that the apex is going to probe the origin server to\ndetermine if it needs to dial using TLS or not. Note that this is potentially\nsending a TLS Client Hello to a plaintext HTTP server which is not expecting\nthat. Therefore, this option is not recommended if it can be avoided. This\nsetting is ignored in mirror mode."), "listenPort": z.number().int().describe("The listening port. For appcomponent configurations this is the listening port\nthat traffic will be intercepted on or mirrored from."), "listenTLS": z.enum(["Auto","Enabled","Disabled"]).describe("This option controls the receiving behaviour of connection to the apex before\nthey are going to be proxied to the origin server. To control the dialing\nbehaviour of the apex towards the origin server use the dialTLS option. Should\nbe explicitly set to enabled if the listener expects TLS connections. And vice\nversa it should be set to disabled if the listener expects connections in\nplaintext. By default this setting is set to auto which means that the listener\nwill automatically determine if incoming connections are TLS or not: TLS\nconnections will be accepted, as well as  plain TCP connections will be\naccepted, both on the configured listenPort. This setting is ignored in mirror\nmode."), "listenTLSCert": z.string().describe("Optional PEM encoded X509v3 certificate to use for the listener for this\nprovider. This setting will be ignored if listenMode is not TLS or Auto or mode\nis not Inline. However, this setting is required if listenTLSKey is set.").optional(), "listenTLSKey": z.string().describe("Optional PEM encoded key pair to use for the listener for this provider. This\nsetting will be ignored if listenMode is not TLS or Auto or mode is not Inline.\nHowever, this setting is required if listenTLSCert is set.").optional(), "mode": z.enum(["Disabled","Mirror","Inline"]).describe("The ingress datapath mode to use for network traffic arriving for this ingress\nprovider for this application component. By default this is set to disabled.\nHowever, this can be changed to mirror traffic where the Apex is only providing\nvisibility with no possibility of any access or content policies to take effect.\nOr this can be set to inline in which case all traffic to providers will be\nredirected to the Apex which acts as a transparent proxy in this case. In this\nmode access and content policies will take effect.") }).describe("Represents the configuration if an apex is to act as an ingress for a provider.")).describe("The ingress provider configurations to serve for this application. If this app\ncomponent serves multiple ingress providers, you must define an ingress provider\nconfig for every single one of them. If you need access to the same ingress\nprovider over different port configurations (for example one serving https while\nanother port serves plain http), then you must define two ingress provider\nconfigurations and reuse the same provider name within the configuration.").optional(), "name": z.string().describe("The component name."), "providerName": z.string().describe("If given, this is the provider name that this component represents. This\n**MUST** match the name of a provider.").optional(), "selector": z.array(z.array(z.string())).describe("A tag expression that identify an application component based on downstream\nlabels.").optional(), "token": z.string().describe("The token for the current component. Only populated by the backend when the\ncaller's\nclaim match the parents app.subject.").readonly().optional() }).describe("Represents a particular component of the application.")).describe("List of components for the application.").optional(),
  "createTime": z.string().datetime({ offset: true }).describe("Creation date of the object.").readonly().optional(),
  "description": z.string().describe("The description of the App.").optional(),
  "importHash": z.string().describe("The hash of the structure used to compare with new import version.").optional(),
  "importLabel": z.string().describe("The user-defined import label that allows the system to group resources from the\nsame import operation.").optional(),
  "name": z.string().describe("The name of the App."),
  "namespace": z.string().describe("The namespace of the object.").readonly().optional(),
  "selector": z.array(z.array(z.string())).describe("A tag expression that identify an application based on downstream labels.").optional(),
  "subject": z.array(z.array(z.string())).describe("Only bearers with claims matching the subject will be allowed to access the\nappcomponent tokens.").optional(),
  "updateTime": z.string().datetime({ offset: true }).describe("Last update date of the object.").readonly().optional()
}