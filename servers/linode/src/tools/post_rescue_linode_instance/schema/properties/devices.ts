import { z } from "zod"

export const inputParams = {
  "sda": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `sda` to the tool, first call the tool `expandSchema` with \"/properties/devices/properties/sda\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be `null`. Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.</property-description>").optional(),
  "sdb": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `sdb` to the tool, first call the tool `expandSchema` with \"/properties/devices/properties/sdb\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be `null`. Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.</property-description>").optional(),
  "sdc": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `sdc` to the tool, first call the tool `expandSchema` with \"/properties/devices/properties/sdc\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be `null`. Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.</property-description>").optional(),
  "sdd": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `sdd` to the tool, first call the tool `expandSchema` with \"/properties/devices/properties/sdd\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be `null`. Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.</property-description>").optional(),
  "sde": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `sde` to the tool, first call the tool `expandSchema` with \"/properties/devices/properties/sde\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be `null`. Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.</property-description>").optional(),
  "sdf": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `sdf` to the tool, first call the tool `expandSchema` with \"/properties/devices/properties/sdf\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be `null`. Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.</property-description>").optional(),
  "sdg": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `sdg` to the tool, first call the tool `expandSchema` with \"/properties/devices/properties/sdg\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Device can be either a Disk or Volume identified by `disk_id` or `volume_id`. Only one type per slot allowed. Can be `null`. Devices mapped from _sde_ through _sdh_ are unavailable in `fullvirt` virt_mode.</property-description>").optional()
}