import { z } from "zod"

export const inputParams = {
  "active_promotions": z.array(z.object({ "credit_monthly_cap": z.string().describe("The amount available to spend per month.").optional(), "credit_remaining": z.string().describe("The total amount of credit left for this promotion.").optional(), "description": z.string().describe("A detailed description of this promotion.").optional(), "expire_dt": z.string().describe("When this promotion's credits expire.").optional(), "image_url": z.string().describe("The location of an image for this promotion.").optional(), "service_type": z.enum(["all","backup","blockstorage","db_mysql","ip_v4","linode","linode_disk","linode_memory","longview","managed","nodebalancer","objectstorage","placement_group","transfer_tx"]).describe("The service to which this promotion applies.").optional(), "summary": z.string().describe("Short details of this promotion.").optional(), "this_month_credit_remaining": z.string().describe("The amount of credit left for this month for this promotion.").optional() }).strict().describe("__Read-only__ Promotions generally offer a set amount of credit that can be used toward your Linode services, and the promotion expires after a specified date. As well, a monthly cap on the promotional offer is set.\n\nSimply put, a promotion offers a certain amount of credit  month, until either the expiration date is passed, or until the total promotional credit is used, whichever comes first.").readonly()).readonly().optional(),
  "active_since": z.string().datetime({ offset: true }).describe("__Read-only__ The date and time the account was activated.").readonly().optional(),
  "address_1": z.string().max(64).describe("The first line of this account's billing address.").optional(),
  "address_2": z.string().max(64).describe("The second line of this account's billing address.").optional(),
  "balance": z.number().describe("__Read-only__ This account's balance, in US dollars.").readonly().optional(),
  "balance_uninvoiced": z.number().describe("__Read-only__ This account's current estimated invoice in US dollars. This is not your final invoice balance. Transfer charges are not included in the estimate.").readonly().optional(),
  "billing_source": z.enum(["akamai","linode"]).describe("__Read-only__ The source of service charges for this account. Accounts that are associated with Akamai-specific customers return a value of `akamai`. All other accounts return a value of `linode`.").readonly().optional(),
  "capabilities": z.array(z.string()).describe("__Read-only__ The Akamai Cloud Computing services your account supports.").readonly().optional(),
  "city": z.string().max(24).describe("The city for this account's `address`.").optional(),
  "company": z.string().max(128).describe("The company name assigned to this account. This value can't include the characters, `<` `>` `(` `)` `\"` `=`.").optional(),
  "country": z.string().describe("The two-letter ISO 3166 country code for this account's `address`.").optional(),
  "credit_card": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `credit_card` to the tool, first call the tool `expandSchema` with \"/properties/credit_card\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>__Read-only__ The credit card information assigned to this account.</property-description>").optional(),
  "email": z.string().max(128).describe("The email address of the person assigned to this account.").optional(),
  "euuid": z.string().uuid().describe("__Read-only__ An external unique identifier for this account.").readonly().optional(),
  "first_name": z.string().max(50).describe("The first name of the person assigned to this account. This value can't include the characters, `<` `>` `(` `)` `\"` `=`.").optional(),
  "last_name": z.string().max(50).describe("The last name of the person assigned to this account. This value can't include the characters, `<` `>` `(` `)` `\"` `=`.").optional(),
  "phone": z.string().max(32).describe("The phone number assigned to this account.").optional(),
  "state": z.string().max(24).describe("The state or province for the `address` set for your account, if applicable.\n\n- If the `address` is in the United States (US) or Canada (CA), this is the two-letter ISO 3166 code for the state or province.\n\n- If it's a US military `address`, this is the abbreviation for that territory. This includes `AA` for Armed Forces Americas (excluding Canada), `AE` for Armed Forces Africa, Europe, Middle East, and Canada, or `AP` for Armed Forces Pacific.\n\n- If outside the US or CA, this is the province associated with the account's `address`.").optional(),
  "tax_id": z.string().max(25).describe("The tax identification number (TIN) assigned to this account, used for tax calculations. A TIN is set by the national authorities in your `country`, based on your `address_1`, and it may be named differently between countries. Set to an empty string (`\"\"`) if a TIN doesn't apply or for countries that don't collect tax.\n\n> ðŸ“˜\n>\n> This value is externally validated. If the validation is successful, a `tax_id_valid` [event](https://techdocs.akamai.com/linode-api/reference/get-events) is triggered. If unsuccessful, a `tax_id_invalid` event is triggered and an error response is issued for an operation that included it.").optional(),
  "zip": z.string().describe("The zip code for this account's `address`.\n\n- It can only contain ASCII letters, numbers, and dashes (`-`).\n\n- It can't contain more than nine letter or number characters.").optional()
}