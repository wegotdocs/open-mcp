import { z } from "zod"

export const inputParams = {
  "backups_enabled": z.boolean().describe("If this field is set to `true`, the created Linode will automatically be enrolled in the Linode Backup service. This will incur an additional charge. Pricing is included in the response from [List types](https://techdocs.akamai.com/linode-api/reference/get-linode-types).\n\n- Can only be included when cloning to a new Linode.").optional(),
  "configs": z.array(z.number().int()).describe("An array of configuration profile IDs.\n\n- If the `configs` parameter __is not provided__, then __all configuration profiles and their associated disks will be cloned__ from the source Linode. Any disks specified by the `disks` parameter will also be cloned.\n- __If an empty array is provided__ for the `configs` parameter, then __no configuration profiles (nor their associated disks) will be cloned__ from the source Linode. Any disks specified by the `disks` parameter will still be cloned.\n- __If a non-empty array is provided__ for the `configs` parameter, then __the configuration profiles specified in the array (and their associated disks) will be cloned__ from the source Linode. Any disks specified by the `disks` parameter will also be cloned.").optional(),
  "disks": z.array(z.number().int()).describe("An array of disk IDs.\n\n- If the `disks` parameter __is not provided__, then __no extra disks will be cloned__ from the source Linode. All disks associated with the configuration profiles specified by the `configs` parameter will still be cloned.\n- __If an empty array is provided__ for the `disks` parameter, then __no extra disks will be cloned__ from the source Linode. All disks associated with the configuration profiles specified by the `configs` parameter will still be cloned.\n- __If a non-empty array is provided__ for the `disks` parameter, then __the disks specified in the array will be cloned__ from the source Linode, in addition to any disks associated with the configuration profiles specified by the `configs` parameter.").optional(),
  "label": z.string().min(3).max(64).describe("The label to assign this Linode when cloning to a new Linode.\n\n- Can only be provided when cloning to a new Linode.\n- Defaults to `linode`.").optional(),
  "linode_id": z.number().int().describe("If an existing Linode is the target for the clone, the ID of that Linode. The existing Linode must have enough resources to accept the clone.").optional(),
  "metadata": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `metadata` to the tool, first call the tool `expandSchema` with \"/properties/metadata\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>__Write-only__ An object containing user-defined data relevant to the creation of Linodes.</property-description>").optional(),
  "placement_group": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `placement_group` to the tool, first call the tool `expandSchema` with \"/properties/placement_group\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Include this to assign this Linode to an existing [placement group](https://www.linode.com/docs/products/compute/compute-instances/guides/placement-groups/). Consider these points when cloning:\n\n- If the Linode you're cloning exists in a placement group, the API won't automatically add the cloned instance to the same placement group. You need to specify a placement group to add the clone to.\n- The target placement group needs to be in the same `region` set for this Linode.\n- The placement group needs to have capacity. Run the [Get a region](https://techdocs.akamai.com/linode-api/reference/get-region) operation and store the `maximum_linodes_per_pg` value to know the Linode limit per placement group. You can then run the [Get a placement group](https://techdocs.akamai.com/linode-api/reference/get-placement-group) operation to review the Linodes in that group.</property-description>").optional(),
  "private_ip": z.boolean().describe("If `true`, the created Linode will have private networking enabled and assigned a private IPv4 address.\n\n- Can only be provided when cloning to a new Linode.").optional(),
  "region": z.string().describe("This is the Region where the Linode will be deployed. To view all available Regions you can deploy to, run [List regions](https://techdocs.akamai.com/linode-api/reference/get-regions).\n\n- Region can only be provided and is required when cloning to a new Linode.").optional(),
  "type": z.string().describe("A Linode's Type determines what resources are available to it, including disk space, memory, and virtual cpus. The amounts available to a specific Linode are returned as `specs` on the Linode object.\n\nTo view all available Linode Types you can deploy with, run [List types](https://techdocs.akamai.com/linode-api/reference/get-linode-types).\n\n- Type can only be provided and is required when cloning to a new Linode.").optional()
}