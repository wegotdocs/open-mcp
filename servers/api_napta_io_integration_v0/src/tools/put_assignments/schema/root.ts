import { z } from "zod"

export const inputParamsSchema = {
  "id": z.string(),
  "simulated": z.boolean().describe("Whether the Assignment is simulated or not").optional(),
  "status": z.union([z.string(), z.null()]).describe("Name of the status associated to the Assignment").optional(),
  "custom_dropdown_fields": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `custom_dropdown_fields` to the tool, first call the tool `expandSchema` with \"/properties/custom_dropdown_fields\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Custom dropdown fields of the Assignment, (see [Custom Dropdown Fields](#tag/Custom-Fields/Custom-Dropdown-Fields))</property-description>").optional(),
  "custom_text_fields": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `custom_text_fields` to the tool, first call the tool `expandSchema` with \"/properties/custom_text_fields\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Custom text fields of the Assignment, (see [Custom Text Fields](#tag/Custom-Fields/Custom-Text-Fields))</property-description>").optional(),
  "user": z.string(),
  "project": z.string(),
  "periods": z.array(z.object({ "start_date": z.string().date().describe("Start date of the period"), "end_date": z.string().date().describe("End date of the period"), "starts_at_midday": z.boolean().describe("Whether the period starts at midday"), "ends_at_midday": z.boolean().describe("Whether the period ends at midday"), "status": z.union([z.string().min(1), z.null()]).describe("Name of the status associated to the period (created if not existing)"), "custom_dropdown_fields": z.object({ "confidentiality_level": z.union([z.string().min(1), z.null()]).describe("Corresponding to custom field named 'Confidentiality level'").optional(), "gear_allowance": z.array(z.string().min(1)).describe("Corresponding to custom field named 'Gear allowance'").optional() }).strict().describe("Custom dropdown fields of the period, (see [Custom Dropdown Fields](#tag/Custom-Fields/Custom-Dropdown-Fields))").optional(), "workload": z.string(), "daily_fee_info": z.union([z.object({ "amount": z.number().gte(0).describe("Amount"), "currency": z.union([z.literal("EUR"), z.literal("USD"), z.literal("GBP"), z.literal(null)]).describe("Currency. If `null`, the currency will be set to the default currency") }), z.null()]).describe("Daily fee of the Assignment period") })).describe("List of periods associated to the Assignment. Only pass the periods that need to be persisted.\n⚠️ Passing an empty list or `null` will remove all periods associated to the Assignment.").optional()
}