import { z } from "zod"

export const inputParamsSchema = {
  "id": z.string(),
  "first_name": z.string().min(1).describe("First Name of the User"),
  "last_name": z.string().min(1).describe("Last Name of the User"),
  "email": z.string().email().min(1).describe("Email of the User"),
  "group": z.enum(["Basic Accreditation","Special Accreditation"]).describe("Name of the group associated to the User"),
  "position": z.string().min(1).describe("Name of position associated to the User (created if not existing)"),
  "active": z.boolean().describe("Whether the User is active or not (an inactive user is unable to log in)").optional(),
  "business_unit": z.union([z.string().min(1), z.null()]).describe("Name of the business unit associated to the User (created if not existing)").optional(),
  "location": z.union([z.string().min(1), z.null()]).describe("Name of the location associated to the User (created if not existing)").optional(),
  "description": z.union([z.string().min(1), z.null()]).describe("Description of the User (markdown field - converted to text)").optional(),
  "phone_number": z.union([z.string().min(1), z.null()]).describe("Phone number of the User").optional(),
  "hiring_date": z.union([z.string().date(), z.null()]).describe("Hiring date of the User").optional(),
  "leaving_date": z.union([z.string().date(), z.null()]).describe("Leaving date of the User").optional(),
  "custom_dropdown_fields": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `custom_dropdown_fields` to the tool, first call the tool `expandSchema` with \"/properties/custom_dropdown_fields\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Custom dropdown fields of the User, (see [Custom Dropdown Fields](#tag/Custom-Fields/Custom-Dropdown-Fields))</property-description>").optional(),
  "custom_text_fields": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `custom_text_fields` to the tool, first call the tool `expandSchema` with \"/properties/custom_text_fields\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Custom text fields of the User, (see [Custom Text Fields](#tag/Custom-Fields/Custom-Text-Fields))</property-description>").optional(),
  "productive_share": z.union([z.number().gte(0).lte(1), z.null()]).describe("Productive share of the User").optional(),
  "event_timelines": z.union([z.object({ "position": z.union([z.array(z.object({ "application_date": z.union([z.literal("first_event"), z.string().date()]).describe("Application date of the event (YYYY-MM-DD) or literal 'first_event' for the first event of the timeline"), "value": z.string().min(1).describe("Value to apply for the event") })), z.null()]).describe("Position event timeline"), "business_unit": z.union([z.array(z.object({ "application_date": z.union([z.literal("first_event"), z.string().date()]).describe("Application date of the event (YYYY-MM-DD) or literal 'first_event' for the first event of the timeline"), "value": z.union([z.string().min(1), z.null()]).describe("Value to apply for the event") })), z.null()]).describe("Business unit event timeline"), "location": z.union([z.array(z.object({ "application_date": z.union([z.literal("first_event"), z.string().date()]).describe("Application date of the event (YYYY-MM-DD) or literal 'first_event' for the first event of the timeline"), "value": z.union([z.string().min(1), z.null()]).describe("Value to apply for the event") })), z.null()]).describe("Location event timeline"), "daily_cost_info": z.union([z.array(z.object({ "application_date": z.union([z.literal("first_event"), z.string().date()]).describe("Application date of the event (YYYY-MM-DD) or literal 'first_event' for the first event of the timeline"), "value": z.union([z.object({ "amount": z.number().gte(0).describe("Amount"), "currency": z.union([z.literal("EUR"), z.literal("USD"), z.literal("GBP"), z.literal(null)]).describe("Currency. If `null`, the currency will be set to the default currency") }), z.null()]).describe("Value to apply for the event") })), z.null()]).describe("Daily cost event timeline"), "productive_share": z.union([z.array(z.object({ "application_date": z.union([z.literal("first_event"), z.string().date()]).describe("Application date of the event (YYYY-MM-DD) or literal 'first_event' for the first event of the timeline"), "value": z.number().gte(0).lte(1).describe("Value to apply for the event") })), z.null()]).describe("Productive share event timeline"), "hours_per_day": z.union([z.array(z.object({ "application_date": z.union([z.literal("first_event"), z.string().date()]).describe("Application date of the event (YYYY-MM-DD) or literal 'first_event' for the first event of the timeline"), "value": z.number().gte(0).describe("Value to apply for the event") })), z.null()]).describe("Hours per day event timeline") }), z.null()]).describe("List of events associated to the User (see [Event Timelines Fields](#tag/Event-Timelines-Fields))").optional(),
  "direct_managers": z.array(z.object({ "napta_id": z.union([z.number().int().gt(0), z.null()]).describe("Napta identifier of the User"), "external_id": z.union([z.string().min(1), z.null()]).describe("Unique reference of the User (see [External Ids](#tag/External-Ids))") })).describe("List of identifiers of the User's direct managers (at least one identification value must be provided). Note that N+2 and more hierarchical links will be created automatically using managers' managers.").optional(),
  "daily_cost_info": z.union([z.object({ "amount": z.number().gte(0).describe("Amount"), "currency": z.union([z.literal("EUR"), z.literal("USD"), z.literal("GBP"), z.literal(null)]).describe("Currency. If `null`, the currency will be set to the default currency") }), z.null()]).describe("Daily cost of the User").optional(),
  "hours_per_day": z.union([z.number().gte(0).lte(24), z.null()]).describe("Number of hours per day of the User").optional(),
  "workweek": z.union([z.object({ "monday": z.boolean().describe("Whether the User works on Monday"), "tuesday": z.boolean().describe("Whether the User works on Tuesday"), "wednesday": z.boolean().describe("Whether the User works on Wednesday"), "thursday": z.boolean().describe("Whether the User works on Thursday"), "friday": z.boolean().describe("Whether the User works on Friday"), "saturday": z.boolean().describe("Whether the User works on Saturday"), "sunday": z.boolean().describe("Whether the User works on Sunday") }), z.null()]).describe("Workweek of the User (description of the days worked by the User)").optional()
}