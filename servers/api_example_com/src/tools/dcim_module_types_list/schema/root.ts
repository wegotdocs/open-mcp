import { z } from "zod"

export const inputParamsSchema = {
  "airflow": z.enum(["front-to-rear","left-to-right","passive","rear-to-front","right-to-left","side-to-rear"]).nullable().describe("* `front-to-rear` - Front to rear\n* `rear-to-front` - Rear to front\n* `left-to-right` - Left to right\n* `right-to-left` - Right to left\n* `side-to-rear` - Side to rear\n* `passive` - Passive").optional(),
  "console_ports": z.boolean().describe("Has console ports").optional(),
  "console_server_ports": z.boolean().describe("Has console server ports").optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "interfaces": z.boolean().describe("Has interfaces").optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "manufacturer": z.array(z.string()).describe("Manufacturer (slug)").optional(),
  "manufacturer__n": z.array(z.string()).describe("Manufacturer (slug)").optional(),
  "manufacturer_id": z.array(z.number().int()).describe("Manufacturer (ID)").optional(),
  "manufacturer_id__n": z.array(z.number().int()).describe("Manufacturer (ID)").optional(),
  "model": z.array(z.string()).optional(),
  "model__empty": z.boolean().optional(),
  "model__ic": z.array(z.string()).optional(),
  "model__ie": z.array(z.string()).optional(),
  "model__iew": z.array(z.string()).optional(),
  "model__isw": z.array(z.string()).optional(),
  "model__n": z.array(z.string()).optional(),
  "model__nic": z.array(z.string()).optional(),
  "model__nie": z.array(z.string()).optional(),
  "model__niew": z.array(z.string()).optional(),
  "model__nisw": z.array(z.string()).optional(),
  "modified_by_request": z.string().uuid().optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "part_number": z.array(z.string()).optional(),
  "part_number__empty": z.boolean().optional(),
  "part_number__ic": z.array(z.string()).optional(),
  "part_number__ie": z.array(z.string()).optional(),
  "part_number__iew": z.array(z.string()).optional(),
  "part_number__isw": z.array(z.string()).optional(),
  "part_number__n": z.array(z.string()).optional(),
  "part_number__nic": z.array(z.string()).optional(),
  "part_number__nie": z.array(z.string()).optional(),
  "part_number__niew": z.array(z.string()).optional(),
  "part_number__nisw": z.array(z.string()).optional(),
  "pass_through_ports": z.boolean().describe("Has pass-through ports").optional(),
  "power_outlets": z.boolean().describe("Has power outlets").optional(),
  "power_ports": z.boolean().describe("Has power ports").optional(),
  "profile": z.array(z.string()).describe("Profile (name)").optional(),
  "profile__n": z.array(z.string()).describe("Profile (name)").optional(),
  "profile_id": z.array(z.number().int().nullable()).describe("Profile (ID)").optional(),
  "profile_id__n": z.array(z.number().int().nullable()).describe("Profile (ID)").optional(),
  "q": z.string().describe("Search").optional(),
  "tag": z.array(z.string()).optional(),
  "tag__n": z.array(z.string()).optional(),
  "tag_id": z.array(z.number().int()).optional(),
  "tag_id__n": z.array(z.number().int()).optional(),
  "updated_by_request": z.string().uuid().optional(),
  "weight": z.array(z.number()).optional(),
  "weight__empty": z.boolean().optional(),
  "weight__gt": z.array(z.number()).optional(),
  "weight__gte": z.array(z.number()).optional(),
  "weight__lt": z.array(z.number()).optional(),
  "weight__lte": z.array(z.number()).optional(),
  "weight__n": z.array(z.number()).optional(),
  "weight_unit": z.enum(["g","kg","lb","oz"]).nullable().describe("* `kg` - Kilograms\n* `g` - Grams\n* `lb` - Pounds\n* `oz` - Ounces").optional()
}