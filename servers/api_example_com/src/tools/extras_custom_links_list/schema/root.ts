import { z } from "zod"

export const inputParamsSchema = {
  "button_class": z.enum(["black","blue","cyan","default","ghost-dark","gray","green","indigo","orange","pink","purple","red","teal","white","yellow"]).describe("The class of the first link in a group will be used for the dropdown button\n\n* `default` - Default\n* `blue` - Blue\n* `indigo` - Indigo\n* `purple` - Purple\n* `pink` - Pink\n* `red` - Red\n* `orange` - Orange\n* `yellow` - Yellow\n* `green` - Green\n* `teal` - Teal\n* `cyan` - Cyan\n* `gray` - Gray\n* `black` - Black\n* `white` - White\n* `ghost-dark` - Link").optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "enabled": z.boolean().optional(),
  "group_name": z.array(z.string()).optional(),
  "group_name__empty": z.boolean().optional(),
  "group_name__ic": z.array(z.string()).optional(),
  "group_name__ie": z.array(z.string()).optional(),
  "group_name__iew": z.array(z.string()).optional(),
  "group_name__isw": z.array(z.string()).optional(),
  "group_name__n": z.array(z.string()).optional(),
  "group_name__nic": z.array(z.string()).optional(),
  "group_name__nie": z.array(z.string()).optional(),
  "group_name__niew": z.array(z.string()).optional(),
  "group_name__nisw": z.array(z.string()).optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "link_text": z.string().optional(),
  "link_text__ic": z.string().optional(),
  "link_text__ie": z.string().optional(),
  "link_text__iew": z.string().optional(),
  "link_text__isw": z.string().optional(),
  "link_text__n": z.string().optional(),
  "link_text__nic": z.string().optional(),
  "link_text__nie": z.string().optional(),
  "link_text__niew": z.string().optional(),
  "link_text__nisw": z.string().optional(),
  "link_url": z.string().optional(),
  "link_url__ic": z.string().optional(),
  "link_url__ie": z.string().optional(),
  "link_url__iew": z.string().optional(),
  "link_url__isw": z.string().optional(),
  "link_url__n": z.string().optional(),
  "link_url__nic": z.string().optional(),
  "link_url__nie": z.string().optional(),
  "link_url__niew": z.string().optional(),
  "link_url__nisw": z.string().optional(),
  "modified_by_request": z.string().uuid().optional(),
  "name": z.array(z.string()).optional(),
  "name__empty": z.boolean().optional(),
  "name__ic": z.array(z.string()).optional(),
  "name__ie": z.array(z.string()).optional(),
  "name__iew": z.array(z.string()).optional(),
  "name__isw": z.array(z.string()).optional(),
  "name__n": z.array(z.string()).optional(),
  "name__nic": z.array(z.string()).optional(),
  "name__nie": z.array(z.string()).optional(),
  "name__niew": z.array(z.string()).optional(),
  "name__nisw": z.array(z.string()).optional(),
  "new_window": z.boolean().optional(),
  "object_type": z.string().optional(),
  "object_type__ic": z.string().optional(),
  "object_type__ie": z.string().optional(),
  "object_type__iew": z.string().optional(),
  "object_type__isw": z.string().optional(),
  "object_type__n": z.string().optional(),
  "object_type__nic": z.string().optional(),
  "object_type__nie": z.string().optional(),
  "object_type__niew": z.string().optional(),
  "object_type__nisw": z.string().optional(),
  "object_type_id": z.array(z.number().int()).optional(),
  "object_type_id__n": z.array(z.number().int()).optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "q": z.string().describe("Search").optional(),
  "updated_by_request": z.string().uuid().optional(),
  "weight": z.array(z.number().int()).optional(),
  "weight__empty": z.boolean().optional(),
  "weight__gt": z.array(z.number().int()).optional(),
  "weight__gte": z.array(z.number().int()).optional(),
  "weight__lt": z.array(z.number().int()).optional(),
  "weight__lte": z.array(z.number().int()).optional(),
  "weight__n": z.array(z.number().int()).optional()
}