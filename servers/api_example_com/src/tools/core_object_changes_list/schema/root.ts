import { z } from "zod"

export const inputParamsSchema = {
  "action": z.enum(["create","delete","update"]).describe("* `create` - Created\n* `update` - Updated\n* `delete` - Deleted").optional(),
  "changed_object_id": z.array(z.number().int()).optional(),
  "changed_object_id__empty": z.boolean().optional(),
  "changed_object_id__gt": z.array(z.number().int()).optional(),
  "changed_object_id__gte": z.array(z.number().int()).optional(),
  "changed_object_id__lt": z.array(z.number().int()).optional(),
  "changed_object_id__lte": z.array(z.number().int()).optional(),
  "changed_object_id__n": z.array(z.number().int()).optional(),
  "changed_object_type": z.string().optional(),
  "changed_object_type__n": z.string().optional(),
  "changed_object_type_id": z.array(z.number().int()).optional(),
  "changed_object_type_id__n": z.array(z.number().int()).optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "object_repr": z.array(z.string()).optional(),
  "object_repr__empty": z.boolean().optional(),
  "object_repr__ic": z.array(z.string()).optional(),
  "object_repr__ie": z.array(z.string()).optional(),
  "object_repr__iew": z.array(z.string()).optional(),
  "object_repr__isw": z.array(z.string()).optional(),
  "object_repr__n": z.array(z.string()).optional(),
  "object_repr__nic": z.array(z.string()).optional(),
  "object_repr__nie": z.array(z.string()).optional(),
  "object_repr__niew": z.array(z.string()).optional(),
  "object_repr__nisw": z.array(z.string()).optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "q": z.string().describe("Search").optional(),
  "related_object_id": z.array(z.number().int()).optional(),
  "related_object_id__empty": z.boolean().optional(),
  "related_object_id__gt": z.array(z.number().int()).optional(),
  "related_object_id__gte": z.array(z.number().int()).optional(),
  "related_object_id__lt": z.array(z.number().int()).optional(),
  "related_object_id__lte": z.array(z.number().int()).optional(),
  "related_object_id__n": z.array(z.number().int()).optional(),
  "related_object_type": z.number().int().optional(),
  "related_object_type__n": z.number().int().optional(),
  "request_id": z.string().uuid().optional(),
  "time_after": z.string().datetime({ offset: true }).optional(),
  "time_before": z.string().datetime({ offset: true }).optional(),
  "user": z.array(z.string()).describe("User name").optional(),
  "user__n": z.array(z.string()).describe("User name").optional(),
  "user_id": z.array(z.number().int().nullable()).describe("User (ID)").optional(),
  "user_id__n": z.array(z.number().int().nullable()).describe("User (ID)").optional(),
  "user_name": z.array(z.string()).optional(),
  "user_name__empty": z.boolean().optional(),
  "user_name__ic": z.array(z.string()).optional(),
  "user_name__ie": z.array(z.string()).optional(),
  "user_name__iew": z.array(z.string()).optional(),
  "user_name__isw": z.array(z.string()).optional(),
  "user_name__n": z.array(z.string()).optional(),
  "user_name__nic": z.array(z.string()).optional(),
  "user_name__nie": z.array(z.string()).optional(),
  "user_name__niew": z.array(z.string()).optional(),
  "user_name__nisw": z.array(z.string()).optional()
}