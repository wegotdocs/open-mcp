import { z } from "zod"

export const inputParamsSchema = {
  "available_at_site": z.string().optional(),
  "available_on_device": z.string().optional(),
  "available_on_virtualmachine": z.string().optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "group": z.array(z.string()).describe("Group").optional(),
  "group__n": z.array(z.string()).describe("Group").optional(),
  "group_id": z.array(z.number().int().nullable()).describe("Group (ID)").optional(),
  "group_id__n": z.array(z.number().int().nullable()).describe("Group (ID)").optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "interface_id": z.string().describe("Assigned interface").optional(),
  "l2vpn": z.array(z.number().int().gte(-9223372036854776000).lte(9223372036854776000).nullable()).describe("L2VPN").optional(),
  "l2vpn__n": z.array(z.number().int().gte(-9223372036854776000).lte(9223372036854776000).nullable()).describe("L2VPN").optional(),
  "l2vpn_id": z.array(z.number().int()).describe("L2VPN (ID)").optional(),
  "l2vpn_id__n": z.array(z.number().int()).describe("L2VPN (ID)").optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "modified_by_request": z.string().uuid().optional(),
  "name": z.array(z.string()).optional(),
  "name__empty": z.boolean().optional(),
  "name__ic": z.array(z.string()).optional(),
  "name__ie": z.array(z.string()).optional(),
  "name__iew": z.array(z.string()).optional(),
  "name__isw": z.array(z.string()).optional(),
  "name__n": z.array(z.string()).optional(),
  "name__nic": z.array(z.string()).optional(),
  "name__nie": z.array(z.string()).optional(),
  "name__niew": z.array(z.string()).optional(),
  "name__nisw": z.array(z.string()).optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "q": z.string().describe("Search").optional(),
  "qinq_role": z.array(z.string().nullable()).describe("Customer/service VLAN designation (for Q-in-Q/IEEE 802.1ad)").optional(),
  "qinq_role__empty": z.boolean().optional(),
  "qinq_role__ic": z.array(z.string().nullable()).describe("Customer/service VLAN designation (for Q-in-Q/IEEE 802.1ad)").optional(),
  "qinq_role__ie": z.array(z.string().nullable()).describe("Customer/service VLAN designation (for Q-in-Q/IEEE 802.1ad)").optional(),
  "qinq_role__iew": z.array(z.string().nullable()).describe("Customer/service VLAN designation (for Q-in-Q/IEEE 802.1ad)").optional(),
  "qinq_role__isw": z.array(z.string().nullable()).describe("Customer/service VLAN designation (for Q-in-Q/IEEE 802.1ad)").optional(),
  "qinq_role__n": z.array(z.string().nullable()).describe("Customer/service VLAN designation (for Q-in-Q/IEEE 802.1ad)").optional(),
  "qinq_role__nic": z.array(z.string().nullable()).describe("Customer/service VLAN designation (for Q-in-Q/IEEE 802.1ad)").optional(),
  "qinq_role__nie": z.array(z.string().nullable()).describe("Customer/service VLAN designation (for Q-in-Q/IEEE 802.1ad)").optional(),
  "qinq_role__niew": z.array(z.string().nullable()).describe("Customer/service VLAN designation (for Q-in-Q/IEEE 802.1ad)").optional(),
  "qinq_role__nisw": z.array(z.string().nullable()).describe("Customer/service VLAN designation (for Q-in-Q/IEEE 802.1ad)").optional(),
  "qinq_svlan_id": z.array(z.number().int().nullable()).describe("Q-in-Q SVLAN (ID)").optional(),
  "qinq_svlan_id__n": z.array(z.number().int().nullable()).describe("Q-in-Q SVLAN (ID)").optional(),
  "qinq_svlan_vid": z.array(z.number().int()).optional(),
  "qinq_svlan_vid__empty": z.array(z.number().int()).optional(),
  "qinq_svlan_vid__gt": z.array(z.number().int()).optional(),
  "qinq_svlan_vid__gte": z.array(z.number().int()).optional(),
  "qinq_svlan_vid__lt": z.array(z.number().int()).optional(),
  "qinq_svlan_vid__lte": z.array(z.number().int()).optional(),
  "qinq_svlan_vid__n": z.array(z.number().int()).optional(),
  "region": z.array(z.string()).optional(),
  "region__n": z.array(z.string()).optional(),
  "region_id": z.array(z.string()).optional(),
  "region_id__n": z.array(z.string()).optional(),
  "role": z.array(z.string()).describe("Role (slug)").optional(),
  "role__n": z.array(z.string()).describe("Role (slug)").optional(),
  "role_id": z.array(z.number().int().nullable()).describe("Role (ID)").optional(),
  "role_id__n": z.array(z.number().int().nullable()).describe("Role (ID)").optional(),
  "site": z.array(z.string()).describe("Site (slug)").optional(),
  "site__n": z.array(z.string()).describe("Site (slug)").optional(),
  "site_group": z.array(z.string()).optional(),
  "site_group__n": z.array(z.string()).optional(),
  "site_group_id": z.array(z.string()).optional(),
  "site_group_id__n": z.array(z.string()).optional(),
  "site_id": z.array(z.number().int().nullable()).describe("Site (ID)").optional(),
  "site_id__n": z.array(z.number().int().nullable()).describe("Site (ID)").optional(),
  "status": z.array(z.string()).describe("Operational status of this VLAN").optional(),
  "status__empty": z.boolean().optional(),
  "status__ic": z.array(z.string()).describe("Operational status of this VLAN").optional(),
  "status__ie": z.array(z.string()).describe("Operational status of this VLAN").optional(),
  "status__iew": z.array(z.string()).describe("Operational status of this VLAN").optional(),
  "status__isw": z.array(z.string()).describe("Operational status of this VLAN").optional(),
  "status__n": z.array(z.string()).describe("Operational status of this VLAN").optional(),
  "status__nic": z.array(z.string()).describe("Operational status of this VLAN").optional(),
  "status__nie": z.array(z.string()).describe("Operational status of this VLAN").optional(),
  "status__niew": z.array(z.string()).describe("Operational status of this VLAN").optional(),
  "status__nisw": z.array(z.string()).describe("Operational status of this VLAN").optional(),
  "tag": z.array(z.string()).optional(),
  "tag__n": z.array(z.string()).optional(),
  "tag_id": z.array(z.number().int()).optional(),
  "tag_id__n": z.array(z.number().int()).optional(),
  "tenant": z.array(z.string()).describe("Tenant (slug)").optional(),
  "tenant__n": z.array(z.string()).describe("Tenant (slug)").optional(),
  "tenant_group": z.array(z.string()).optional(),
  "tenant_group__n": z.array(z.string()).optional(),
  "tenant_group_id": z.array(z.string()).optional(),
  "tenant_group_id__n": z.array(z.string()).optional(),
  "tenant_id": z.array(z.number().int().nullable()).describe("Tenant (ID)").optional(),
  "tenant_id__n": z.array(z.number().int().nullable()).describe("Tenant (ID)").optional(),
  "updated_by_request": z.string().uuid().optional(),
  "vid": z.array(z.number().int()).optional(),
  "vid__empty": z.boolean().optional(),
  "vid__gt": z.array(z.number().int()).optional(),
  "vid__gte": z.array(z.number().int()).optional(),
  "vid__lt": z.array(z.number().int()).optional(),
  "vid__lte": z.array(z.number().int()).optional(),
  "vid__n": z.array(z.number().int()).optional(),
  "vminterface_id": z.string().describe("Assigned VM interface").optional()
}