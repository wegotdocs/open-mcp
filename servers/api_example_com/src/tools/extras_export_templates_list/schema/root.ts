import { z } from "zod"

export const inputParamsSchema = {
  "as_attachment": z.boolean().optional(),
  "auto_sync_enabled": z.boolean().optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "data_file_id": z.array(z.number().int().nullable()).describe("Data file (ID)").optional(),
  "data_file_id__n": z.array(z.number().int().nullable()).describe("Data file (ID)").optional(),
  "data_source_id": z.array(z.number().int().nullable()).describe("Data source (ID)").optional(),
  "data_source_id__n": z.array(z.number().int().nullable()).describe("Data source (ID)").optional(),
  "data_synced": z.array(z.string().datetime({ offset: true })).optional(),
  "data_synced__empty": z.boolean().optional(),
  "data_synced__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "data_synced__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "data_synced__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "data_synced__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "data_synced__n": z.array(z.string().datetime({ offset: true })).optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "file_extension": z.array(z.string()).optional(),
  "file_extension__empty": z.boolean().optional(),
  "file_extension__ic": z.array(z.string()).optional(),
  "file_extension__ie": z.array(z.string()).optional(),
  "file_extension__iew": z.array(z.string()).optional(),
  "file_extension__isw": z.array(z.string()).optional(),
  "file_extension__n": z.array(z.string()).optional(),
  "file_extension__nic": z.array(z.string()).optional(),
  "file_extension__nie": z.array(z.string()).optional(),
  "file_extension__niew": z.array(z.string()).optional(),
  "file_extension__nisw": z.array(z.string()).optional(),
  "file_name": z.array(z.string()).optional(),
  "file_name__empty": z.boolean().optional(),
  "file_name__ic": z.array(z.string()).optional(),
  "file_name__ie": z.array(z.string()).optional(),
  "file_name__iew": z.array(z.string()).optional(),
  "file_name__isw": z.array(z.string()).optional(),
  "file_name__n": z.array(z.string()).optional(),
  "file_name__nic": z.array(z.string()).optional(),
  "file_name__nie": z.array(z.string()).optional(),
  "file_name__niew": z.array(z.string()).optional(),
  "file_name__nisw": z.array(z.string()).optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "mime_type": z.array(z.string()).optional(),
  "mime_type__empty": z.boolean().optional(),
  "mime_type__ic": z.array(z.string()).optional(),
  "mime_type__ie": z.array(z.string()).optional(),
  "mime_type__iew": z.array(z.string()).optional(),
  "mime_type__isw": z.array(z.string()).optional(),
  "mime_type__n": z.array(z.string()).optional(),
  "mime_type__nic": z.array(z.string()).optional(),
  "mime_type__nie": z.array(z.string()).optional(),
  "mime_type__niew": z.array(z.string()).optional(),
  "mime_type__nisw": z.array(z.string()).optional(),
  "modified_by_request": z.string().uuid().optional(),
  "name": z.array(z.string()).optional(),
  "name__empty": z.boolean().optional(),
  "name__ic": z.array(z.string()).optional(),
  "name__ie": z.array(z.string()).optional(),
  "name__iew": z.array(z.string()).optional(),
  "name__isw": z.array(z.string()).optional(),
  "name__n": z.array(z.string()).optional(),
  "name__nic": z.array(z.string()).optional(),
  "name__nie": z.array(z.string()).optional(),
  "name__niew": z.array(z.string()).optional(),
  "name__nisw": z.array(z.string()).optional(),
  "object_type": z.string().optional(),
  "object_type__ic": z.string().optional(),
  "object_type__ie": z.string().optional(),
  "object_type__iew": z.string().optional(),
  "object_type__isw": z.string().optional(),
  "object_type__n": z.string().optional(),
  "object_type__nic": z.string().optional(),
  "object_type__nie": z.string().optional(),
  "object_type__niew": z.string().optional(),
  "object_type__nisw": z.string().optional(),
  "object_type_id": z.array(z.number().int()).optional(),
  "object_type_id__n": z.array(z.number().int()).optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "q": z.string().describe("Search").optional(),
  "updated_by_request": z.string().uuid().optional()
}