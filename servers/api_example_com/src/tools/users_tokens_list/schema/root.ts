import { z } from "zod"

export const inputParamsSchema = {
  "created": z.string().datetime({ offset: true }).optional(),
  "created__gte": z.string().datetime({ offset: true }).optional(),
  "created__lte": z.string().datetime({ offset: true }).optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "expires": z.string().datetime({ offset: true }).optional(),
  "expires__gte": z.string().datetime({ offset: true }).optional(),
  "expires__lte": z.string().datetime({ offset: true }).optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "key": z.array(z.string()).optional(),
  "key__empty": z.boolean().optional(),
  "key__ic": z.array(z.string()).optional(),
  "key__ie": z.array(z.string()).optional(),
  "key__iew": z.array(z.string()).optional(),
  "key__isw": z.array(z.string()).optional(),
  "key__n": z.array(z.string()).optional(),
  "key__nic": z.array(z.string()).optional(),
  "key__nie": z.array(z.string()).optional(),
  "key__niew": z.array(z.string()).optional(),
  "key__nisw": z.array(z.string()).optional(),
  "last_used": z.array(z.string().datetime({ offset: true })).optional(),
  "last_used__empty": z.boolean().optional(),
  "last_used__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_used__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_used__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_used__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_used__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "q": z.string().describe("Search").optional(),
  "user": z.array(z.string()).describe("User (name)").optional(),
  "user__n": z.array(z.string()).describe("User (name)").optional(),
  "user_id": z.array(z.number().int()).describe("User").optional(),
  "user_id__n": z.array(z.number().int()).describe("User").optional(),
  "write_enabled": z.boolean().optional()
}