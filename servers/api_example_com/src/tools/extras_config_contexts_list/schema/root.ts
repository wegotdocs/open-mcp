import { z } from "zod"

export const inputParamsSchema = {
  "auto_sync_enabled": z.boolean().optional(),
  "cluster_group": z.array(z.string()).describe("Cluster group (slug)").optional(),
  "cluster_group__n": z.array(z.string()).describe("Cluster group (slug)").optional(),
  "cluster_group_id": z.array(z.number().int()).describe("Cluster group").optional(),
  "cluster_group_id__n": z.array(z.number().int()).describe("Cluster group").optional(),
  "cluster_id": z.array(z.number().int()).describe("Cluster").optional(),
  "cluster_id__n": z.array(z.number().int()).describe("Cluster").optional(),
  "cluster_type": z.array(z.string()).describe("Cluster type (slug)").optional(),
  "cluster_type__n": z.array(z.string()).describe("Cluster type (slug)").optional(),
  "cluster_type_id": z.array(z.number().int()).describe("Cluster type").optional(),
  "cluster_type_id__n": z.array(z.number().int()).describe("Cluster type").optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "data_file_id": z.array(z.number().int().nullable()).describe("Data file (ID)").optional(),
  "data_file_id__n": z.array(z.number().int().nullable()).describe("Data file (ID)").optional(),
  "data_source_id": z.array(z.number().int().nullable()).describe("Data source (ID)").optional(),
  "data_source_id__n": z.array(z.number().int().nullable()).describe("Data source (ID)").optional(),
  "data_synced": z.array(z.string().datetime({ offset: true })).optional(),
  "data_synced__empty": z.boolean().optional(),
  "data_synced__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "data_synced__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "data_synced__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "data_synced__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "data_synced__n": z.array(z.string().datetime({ offset: true })).optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "device_role": z.array(z.string()).describe("Role (slug)").optional(),
  "device_role__n": z.array(z.string()).describe("Role (slug)").optional(),
  "device_role_id": z.array(z.number().int()).describe("Role").optional(),
  "device_role_id__n": z.array(z.number().int()).describe("Role").optional(),
  "device_type_id": z.array(z.number().int()).describe("Device type").optional(),
  "device_type_id__n": z.array(z.number().int()).describe("Device type").optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "is_active": z.boolean().optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "location": z.array(z.string()).describe("Location (slug)").optional(),
  "location__n": z.array(z.string()).describe("Location (slug)").optional(),
  "location_id": z.array(z.number().int()).describe("Location").optional(),
  "location_id__n": z.array(z.number().int()).describe("Location").optional(),
  "modified_by_request": z.string().uuid().optional(),
  "name": z.array(z.string()).optional(),
  "name__empty": z.boolean().optional(),
  "name__ic": z.array(z.string()).optional(),
  "name__ie": z.array(z.string()).optional(),
  "name__iew": z.array(z.string()).optional(),
  "name__isw": z.array(z.string()).optional(),
  "name__n": z.array(z.string()).optional(),
  "name__nic": z.array(z.string()).optional(),
  "name__nie": z.array(z.string()).optional(),
  "name__niew": z.array(z.string()).optional(),
  "name__nisw": z.array(z.string()).optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "platform": z.array(z.string()).describe("Platform (slug)").optional(),
  "platform__n": z.array(z.string()).describe("Platform (slug)").optional(),
  "platform_id": z.array(z.number().int()).describe("Platform").optional(),
  "platform_id__n": z.array(z.number().int()).describe("Platform").optional(),
  "q": z.string().describe("Search").optional(),
  "region": z.array(z.string()).describe("Region (slug)").optional(),
  "region__n": z.array(z.string()).describe("Region (slug)").optional(),
  "region_id": z.array(z.number().int()).describe("Region").optional(),
  "region_id__n": z.array(z.number().int()).describe("Region").optional(),
  "site": z.array(z.string()).describe("Site (slug)").optional(),
  "site__n": z.array(z.string()).describe("Site (slug)").optional(),
  "site_group": z.array(z.string()).describe("Site group (slug)").optional(),
  "site_group__n": z.array(z.string()).describe("Site group (slug)").optional(),
  "site_group_id": z.array(z.number().int()).describe("Site group").optional(),
  "site_group_id__n": z.array(z.number().int()).describe("Site group").optional(),
  "site_id": z.array(z.number().int()).describe("Site").optional(),
  "site_id__n": z.array(z.number().int()).describe("Site").optional(),
  "tag": z.array(z.string()).describe("Tag (slug)").optional(),
  "tag__n": z.array(z.string()).describe("Tag (slug)").optional(),
  "tag_id": z.array(z.number().int()).describe("Tag").optional(),
  "tag_id__n": z.array(z.number().int()).describe("Tag").optional(),
  "tenant": z.array(z.string()).describe("Tenant (slug)").optional(),
  "tenant__n": z.array(z.string()).describe("Tenant (slug)").optional(),
  "tenant_group": z.array(z.string()).describe("Tenant group (slug)").optional(),
  "tenant_group__n": z.array(z.string()).describe("Tenant group (slug)").optional(),
  "tenant_group_id": z.array(z.number().int()).describe("Tenant group").optional(),
  "tenant_group_id__n": z.array(z.number().int()).describe("Tenant group").optional(),
  "tenant_id": z.array(z.number().int()).describe("Tenant").optional(),
  "tenant_id__n": z.array(z.number().int()).describe("Tenant").optional(),
  "updated_by_request": z.string().uuid().optional(),
  "weight": z.array(z.number().int()).optional(),
  "weight__empty": z.boolean().optional(),
  "weight__gt": z.array(z.number().int()).optional(),
  "weight__gte": z.array(z.number().int()).optional(),
  "weight__lt": z.array(z.number().int()).optional(),
  "weight__lte": z.array(z.number().int()).optional(),
  "weight__n": z.array(z.number().int()).optional()
}