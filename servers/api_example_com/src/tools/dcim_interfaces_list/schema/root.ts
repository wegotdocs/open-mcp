import { z } from "zod"

export const inputParamsSchema = {
  "bridge_id": z.array(z.number().int()).describe("Bridged interface (ID)").optional(),
  "bridge_id__n": z.array(z.number().int()).describe("Bridged interface (ID)").optional(),
  "cable_end": z.enum(["A","B"]).nullable().describe("* `A` - A\n* `B` - B").optional(),
  "cable_id": z.array(z.number().int().nullable()).describe("Cable (ID)").optional(),
  "cable_id__n": z.array(z.number().int().nullable()).describe("Cable (ID)").optional(),
  "cabled": z.boolean().optional(),
  "connected": z.boolean().optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "device": z.array(z.string().nullable()).describe("Device (name)").optional(),
  "device__n": z.array(z.string().nullable()).describe("Device (name)").optional(),
  "device_id": z.array(z.number().int()).describe("Device (ID)").optional(),
  "device_id__n": z.array(z.number().int()).describe("Device (ID)").optional(),
  "device_role": z.array(z.string()).describe("Device role (slug)").optional(),
  "device_role__n": z.array(z.string()).describe("Device role (slug)").optional(),
  "device_role_id": z.array(z.number().int()).describe("Device role (ID)").optional(),
  "device_role_id__n": z.array(z.number().int()).describe("Device role (ID)").optional(),
  "device_status": z.array(z.string()).optional(),
  "device_status__empty": z.boolean().optional(),
  "device_status__ic": z.array(z.string()).optional(),
  "device_status__ie": z.array(z.string()).optional(),
  "device_status__iew": z.array(z.string()).optional(),
  "device_status__isw": z.array(z.string()).optional(),
  "device_status__n": z.array(z.string()).optional(),
  "device_status__nic": z.array(z.string()).optional(),
  "device_status__nie": z.array(z.string()).optional(),
  "device_status__niew": z.array(z.string()).optional(),
  "device_status__nisw": z.array(z.string()).optional(),
  "device_type": z.array(z.string()).describe("Device type (model)").optional(),
  "device_type__n": z.array(z.string()).describe("Device type (model)").optional(),
  "device_type_id": z.array(z.number().int()).describe("Device type (ID)").optional(),
  "device_type_id__n": z.array(z.number().int()).describe("Device type (ID)").optional(),
  "duplex": z.array(z.string().nullable()).optional(),
  "duplex__empty": z.boolean().optional(),
  "duplex__ic": z.array(z.string().nullable()).optional(),
  "duplex__ie": z.array(z.string().nullable()).optional(),
  "duplex__iew": z.array(z.string().nullable()).optional(),
  "duplex__isw": z.array(z.string().nullable()).optional(),
  "duplex__n": z.array(z.string().nullable()).optional(),
  "duplex__nic": z.array(z.string().nullable()).optional(),
  "duplex__nie": z.array(z.string().nullable()).optional(),
  "duplex__niew": z.array(z.string().nullable()).optional(),
  "duplex__nisw": z.array(z.string().nullable()).optional(),
  "enabled": z.boolean().optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "kind": z.string().describe("Kind of interface").optional(),
  "l2vpn": z.array(z.number().int().gte(-9223372036854776000).lte(9223372036854776000).nullable()).describe("L2VPN").optional(),
  "l2vpn__n": z.array(z.number().int().gte(-9223372036854776000).lte(9223372036854776000).nullable()).describe("L2VPN").optional(),
  "l2vpn_id": z.array(z.number().int()).describe("L2VPN (ID)").optional(),
  "l2vpn_id__n": z.array(z.number().int()).describe("L2VPN (ID)").optional(),
  "label": z.array(z.string()).optional(),
  "label__empty": z.boolean().optional(),
  "label__ic": z.array(z.string()).optional(),
  "label__ie": z.array(z.string()).optional(),
  "label__iew": z.array(z.string()).optional(),
  "label__isw": z.array(z.string()).optional(),
  "label__n": z.array(z.string()).optional(),
  "label__nic": z.array(z.string()).optional(),
  "label__nie": z.array(z.string()).optional(),
  "label__niew": z.array(z.string()).optional(),
  "label__nisw": z.array(z.string()).optional(),
  "lag_id": z.array(z.number().int()).describe("LAG interface (ID)").optional(),
  "lag_id__n": z.array(z.number().int()).describe("LAG interface (ID)").optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "location": z.array(z.string()).describe("Location (slug)").optional(),
  "location__n": z.array(z.string()).describe("Location (slug)").optional(),
  "location_id": z.array(z.number().int()).describe("Location (ID)").optional(),
  "location_id__n": z.array(z.number().int()).describe("Location (ID)").optional(),
  "mac_address": z.array(z.string()).optional(),
  "mac_address__ic": z.array(z.string()).optional(),
  "mac_address__ie": z.array(z.string()).optional(),
  "mac_address__iew": z.array(z.string()).optional(),
  "mac_address__isw": z.array(z.string()).optional(),
  "mac_address__n": z.array(z.string()).optional(),
  "mac_address__nic": z.array(z.string()).optional(),
  "mac_address__nie": z.array(z.string()).optional(),
  "mac_address__niew": z.array(z.string()).optional(),
  "mac_address__nisw": z.array(z.string()).optional(),
  "mark_connected": z.boolean().optional(),
  "mgmt_only": z.boolean().optional(),
  "mode": z.array(z.string().nullable()).describe("802.1Q Mode").optional(),
  "mode__empty": z.boolean().describe("802.1Q Mode").optional(),
  "mode__ic": z.array(z.string().nullable()).describe("802.1Q Mode").optional(),
  "mode__ie": z.array(z.string().nullable()).describe("802.1Q Mode").optional(),
  "mode__iew": z.array(z.string().nullable()).describe("802.1Q Mode").optional(),
  "mode__isw": z.array(z.string().nullable()).describe("802.1Q Mode").optional(),
  "mode__n": z.array(z.string().nullable()).describe("802.1Q Mode").optional(),
  "mode__nic": z.array(z.string().nullable()).describe("802.1Q Mode").optional(),
  "mode__nie": z.array(z.string().nullable()).describe("802.1Q Mode").optional(),
  "mode__niew": z.array(z.string().nullable()).describe("802.1Q Mode").optional(),
  "mode__nisw": z.array(z.string().nullable()).describe("802.1Q Mode").optional(),
  "modified_by_request": z.string().uuid().optional(),
  "module_id": z.array(z.number().int().nullable()).describe("Module (ID)").optional(),
  "module_id__n": z.array(z.number().int().nullable()).describe("Module (ID)").optional(),
  "mtu": z.array(z.number().int()).optional(),
  "mtu__empty": z.boolean().optional(),
  "mtu__gt": z.array(z.number().int()).optional(),
  "mtu__gte": z.array(z.number().int()).optional(),
  "mtu__lt": z.array(z.number().int()).optional(),
  "mtu__lte": z.array(z.number().int()).optional(),
  "mtu__n": z.array(z.number().int()).optional(),
  "name": z.array(z.string()).optional(),
  "name__empty": z.boolean().optional(),
  "name__ic": z.array(z.string()).optional(),
  "name__ie": z.array(z.string()).optional(),
  "name__iew": z.array(z.string()).optional(),
  "name__isw": z.array(z.string()).optional(),
  "name__n": z.array(z.string()).optional(),
  "name__nic": z.array(z.string()).optional(),
  "name__nie": z.array(z.string()).optional(),
  "name__niew": z.array(z.string()).optional(),
  "name__nisw": z.array(z.string()).optional(),
  "occupied": z.boolean().optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "parent_id": z.array(z.number().int()).describe("Parent interface (ID)").optional(),
  "parent_id__n": z.array(z.number().int()).describe("Parent interface (ID)").optional(),
  "poe_mode": z.array(z.string().nullable()).optional(),
  "poe_mode__empty": z.boolean().optional(),
  "poe_mode__ic": z.array(z.string().nullable()).optional(),
  "poe_mode__ie": z.array(z.string().nullable()).optional(),
  "poe_mode__iew": z.array(z.string().nullable()).optional(),
  "poe_mode__isw": z.array(z.string().nullable()).optional(),
  "poe_mode__n": z.array(z.string().nullable()).optional(),
  "poe_mode__nic": z.array(z.string().nullable()).optional(),
  "poe_mode__nie": z.array(z.string().nullable()).optional(),
  "poe_mode__niew": z.array(z.string().nullable()).optional(),
  "poe_mode__nisw": z.array(z.string().nullable()).optional(),
  "poe_type": z.array(z.string().nullable()).optional(),
  "poe_type__empty": z.boolean().optional(),
  "poe_type__ic": z.array(z.string().nullable()).optional(),
  "poe_type__ie": z.array(z.string().nullable()).optional(),
  "poe_type__iew": z.array(z.string().nullable()).optional(),
  "poe_type__isw": z.array(z.string().nullable()).optional(),
  "poe_type__n": z.array(z.string().nullable()).optional(),
  "poe_type__nic": z.array(z.string().nullable()).optional(),
  "poe_type__nie": z.array(z.string().nullable()).optional(),
  "poe_type__niew": z.array(z.string().nullable()).optional(),
  "poe_type__nisw": z.array(z.string().nullable()).optional(),
  "primary_mac_address": z.array(z.string()).describe("Primary MAC address").optional(),
  "primary_mac_address__n": z.array(z.string()).describe("Primary MAC address").optional(),
  "primary_mac_address_id": z.array(z.number().int()).describe("Primary MAC address (ID)").optional(),
  "primary_mac_address_id__n": z.array(z.number().int()).describe("Primary MAC address (ID)").optional(),
  "q": z.string().describe("Search").optional(),
  "rack": z.array(z.string()).describe("Rack (name)").optional(),
  "rack__n": z.array(z.string()).describe("Rack (name)").optional(),
  "rack_id": z.array(z.number().int()).describe("Rack (ID)").optional(),
  "rack_id__n": z.array(z.number().int()).describe("Rack (ID)").optional(),
  "region": z.array(z.string()).optional(),
  "region__n": z.array(z.string()).optional(),
  "region_id": z.array(z.string()).optional(),
  "region_id__n": z.array(z.string()).optional(),
  "rf_channel": z.array(z.string().nullable()).optional(),
  "rf_channel__empty": z.boolean().optional(),
  "rf_channel__ic": z.array(z.string().nullable()).optional(),
  "rf_channel__ie": z.array(z.string().nullable()).optional(),
  "rf_channel__iew": z.array(z.string().nullable()).optional(),
  "rf_channel__isw": z.array(z.string().nullable()).optional(),
  "rf_channel__n": z.array(z.string().nullable()).optional(),
  "rf_channel__nic": z.array(z.string().nullable()).optional(),
  "rf_channel__nie": z.array(z.string().nullable()).optional(),
  "rf_channel__niew": z.array(z.string().nullable()).optional(),
  "rf_channel__nisw": z.array(z.string().nullable()).optional(),
  "rf_channel_frequency": z.array(z.number()).optional(),
  "rf_channel_frequency__empty": z.boolean().optional(),
  "rf_channel_frequency__gt": z.array(z.number()).optional(),
  "rf_channel_frequency__gte": z.array(z.number()).optional(),
  "rf_channel_frequency__lt": z.array(z.number()).optional(),
  "rf_channel_frequency__lte": z.array(z.number()).optional(),
  "rf_channel_frequency__n": z.array(z.number()).optional(),
  "rf_channel_width": z.array(z.number()).optional(),
  "rf_channel_width__empty": z.boolean().optional(),
  "rf_channel_width__gt": z.array(z.number()).optional(),
  "rf_channel_width__gte": z.array(z.number()).optional(),
  "rf_channel_width__lt": z.array(z.number()).optional(),
  "rf_channel_width__lte": z.array(z.number()).optional(),
  "rf_channel_width__n": z.array(z.number()).optional(),
  "rf_role": z.array(z.string().nullable()).optional(),
  "rf_role__empty": z.boolean().optional(),
  "rf_role__ic": z.array(z.string().nullable()).optional(),
  "rf_role__ie": z.array(z.string().nullable()).optional(),
  "rf_role__iew": z.array(z.string().nullable()).optional(),
  "rf_role__isw": z.array(z.string().nullable()).optional(),
  "rf_role__n": z.array(z.string().nullable()).optional(),
  "rf_role__nic": z.array(z.string().nullable()).optional(),
  "rf_role__nie": z.array(z.string().nullable()).optional(),
  "rf_role__niew": z.array(z.string().nullable()).optional(),
  "rf_role__nisw": z.array(z.string().nullable()).optional(),
  "site": z.array(z.string()).describe("Site name (slug)").optional(),
  "site__n": z.array(z.string()).describe("Site name (slug)").optional(),
  "site_group": z.array(z.string()).optional(),
  "site_group__n": z.array(z.string()).optional(),
  "site_group_id": z.array(z.string()).optional(),
  "site_group_id__n": z.array(z.string()).optional(),
  "site_id": z.array(z.number().int()).describe("Site (ID)").optional(),
  "site_id__n": z.array(z.number().int()).describe("Site (ID)").optional(),
  "speed": z.array(z.number().int()).optional(),
  "speed__empty": z.array(z.number().int()).optional(),
  "speed__gt": z.array(z.number().int()).optional(),
  "speed__gte": z.array(z.number().int()).optional(),
  "speed__lt": z.array(z.number().int()).optional(),
  "speed__lte": z.array(z.number().int()).optional(),
  "speed__n": z.array(z.number().int()).optional(),
  "tag": z.array(z.string()).optional(),
  "tag__n": z.array(z.string()).optional(),
  "tag_id": z.array(z.number().int()).optional(),
  "tag_id__n": z.array(z.number().int()).optional(),
  "tx_power": z.array(z.number().int()).optional(),
  "tx_power__empty": z.boolean().optional(),
  "tx_power__gt": z.array(z.number().int()).optional(),
  "tx_power__gte": z.array(z.number().int()).optional(),
  "tx_power__lt": z.array(z.number().int()).optional(),
  "tx_power__lte": z.array(z.number().int()).optional(),
  "tx_power__n": z.array(z.number().int()).optional(),
  "type": z.array(z.string()).optional(),
  "type__empty": z.boolean().optional(),
  "type__ic": z.array(z.string()).optional(),
  "type__ie": z.array(z.string()).optional(),
  "type__iew": z.array(z.string()).optional(),
  "type__isw": z.array(z.string()).optional(),
  "type__n": z.array(z.string()).optional(),
  "type__nic": z.array(z.string()).optional(),
  "type__nie": z.array(z.string()).optional(),
  "type__niew": z.array(z.string()).optional(),
  "type__nisw": z.array(z.string()).optional(),
  "updated_by_request": z.string().uuid().optional(),
  "vdc": z.array(z.string()).describe("Virtual Device Context").optional(),
  "vdc__n": z.array(z.string()).describe("Virtual Device Context").optional(),
  "vdc_id": z.array(z.number().int()).describe("Virtual Device Context").optional(),
  "vdc_id__n": z.array(z.number().int()).describe("Virtual Device Context").optional(),
  "vdc_identifier": z.array(z.number().int().gte(0).lte(32767).nullable()).describe("Virtual Device Context (Identifier)").optional(),
  "vdc_identifier__n": z.array(z.number().int().gte(0).lte(32767).nullable()).describe("Virtual Device Context (Identifier)").optional(),
  "virtual_chassis": z.array(z.string()).describe("Virtual Chassis").optional(),
  "virtual_chassis__n": z.array(z.string()).describe("Virtual Chassis").optional(),
  "virtual_chassis_id": z.array(z.number().int()).describe("Virtual Chassis (ID)").optional(),
  "virtual_chassis_id__n": z.array(z.number().int()).describe("Virtual Chassis (ID)").optional(),
  "virtual_chassis_member": z.array(z.string()).optional(),
  "virtual_chassis_member_id": z.array(z.number().int()).optional(),
  "virtual_circuit_id": z.array(z.number().int()).describe("Virtual circuit (ID)").optional(),
  "virtual_circuit_id__n": z.array(z.number().int()).describe("Virtual circuit (ID)").optional(),
  "virtual_circuit_termination_id": z.array(z.number().int()).describe("Virtual circuit termination (ID)").optional(),
  "virtual_circuit_termination_id__n": z.array(z.number().int()).describe("Virtual circuit termination (ID)").optional(),
  "vlan": z.string().describe("Assigned VID").optional(),
  "vlan_id": z.string().describe("Assigned VLAN").optional(),
  "vlan_translation_policy": z.array(z.string()).describe("VLAN Translation Policy").optional(),
  "vlan_translation_policy__n": z.array(z.string()).describe("VLAN Translation Policy").optional(),
  "vlan_translation_policy_id": z.array(z.number().int()).describe("VLAN Translation Policy (ID)").optional(),
  "vlan_translation_policy_id__n": z.array(z.number().int()).describe("VLAN Translation Policy (ID)").optional(),
  "vrf": z.array(z.string().nullable()).describe("VRF (RD)").optional(),
  "vrf__n": z.array(z.string().nullable()).describe("VRF (RD)").optional(),
  "vrf_id": z.array(z.number().int()).describe("VRF").optional(),
  "vrf_id__n": z.array(z.number().int()).describe("VRF").optional(),
  "wireless_lan_id": z.array(z.number().int()).describe("Wireless LAN").optional(),
  "wireless_lan_id__n": z.array(z.number().int()).describe("Wireless LAN").optional(),
  "wireless_link_id": z.array(z.number().int().nullable()).describe("Wireless link").optional(),
  "wireless_link_id__n": z.array(z.number().int().nullable()).describe("Wireless link").optional(),
  "wwn": z.array(z.string()).optional(),
  "wwn__ic": z.array(z.string()).optional(),
  "wwn__ie": z.array(z.string()).optional(),
  "wwn__iew": z.array(z.string()).optional(),
  "wwn__isw": z.array(z.string()).optional(),
  "wwn__n": z.array(z.string()).optional(),
  "wwn__nic": z.array(z.string()).optional(),
  "wwn__nie": z.array(z.string()).optional(),
  "wwn__niew": z.array(z.string()).optional(),
  "wwn__nisw": z.array(z.string()).optional()
}