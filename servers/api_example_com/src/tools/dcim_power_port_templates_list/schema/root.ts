import { z } from "zod"

export const inputParamsSchema = {
  "allocated_draw": z.array(z.number().int()).optional(),
  "allocated_draw__empty": z.boolean().optional(),
  "allocated_draw__gt": z.array(z.number().int()).optional(),
  "allocated_draw__gte": z.array(z.number().int()).optional(),
  "allocated_draw__lt": z.array(z.number().int()).optional(),
  "allocated_draw__lte": z.array(z.number().int()).optional(),
  "allocated_draw__n": z.array(z.number().int()).optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "device_type_id": z.array(z.number().int().nullable()).describe("Device type (ID)").optional(),
  "device_type_id__n": z.array(z.number().int().nullable()).describe("Device type (ID)").optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "label": z.array(z.string()).optional(),
  "label__empty": z.boolean().optional(),
  "label__ic": z.array(z.string()).optional(),
  "label__ie": z.array(z.string()).optional(),
  "label__iew": z.array(z.string()).optional(),
  "label__isw": z.array(z.string()).optional(),
  "label__n": z.array(z.string()).optional(),
  "label__nic": z.array(z.string()).optional(),
  "label__nie": z.array(z.string()).optional(),
  "label__niew": z.array(z.string()).optional(),
  "label__nisw": z.array(z.string()).optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "maximum_draw": z.array(z.number().int()).optional(),
  "maximum_draw__empty": z.boolean().optional(),
  "maximum_draw__gt": z.array(z.number().int()).optional(),
  "maximum_draw__gte": z.array(z.number().int()).optional(),
  "maximum_draw__lt": z.array(z.number().int()).optional(),
  "maximum_draw__lte": z.array(z.number().int()).optional(),
  "maximum_draw__n": z.array(z.number().int()).optional(),
  "modified_by_request": z.string().uuid().optional(),
  "module_type_id": z.array(z.number().int().nullable()).describe("Module type (ID)").optional(),
  "module_type_id__n": z.array(z.number().int().nullable()).describe("Module type (ID)").optional(),
  "name": z.array(z.string()).optional(),
  "name__empty": z.boolean().optional(),
  "name__ic": z.array(z.string()).optional(),
  "name__ie": z.array(z.string()).optional(),
  "name__iew": z.array(z.string()).optional(),
  "name__isw": z.array(z.string()).optional(),
  "name__n": z.array(z.string()).optional(),
  "name__nic": z.array(z.string()).optional(),
  "name__nie": z.array(z.string()).optional(),
  "name__niew": z.array(z.string()).optional(),
  "name__nisw": z.array(z.string()).optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "q": z.string().describe("Search").optional(),
  "type": z.enum(["California Style","DC","IEC 60309","IEC 60320","IEC 60906-1","International/ITA","Molex","NEMA (Locking)","NEMA (Non-locking)","Other","Proprietary","USB"]).nullable().describe("* `IEC 60320` - [('iec-60320-c6', 'C6'), ('iec-60320-c8', 'C8'), ('iec-60320-c14', 'C14'), ('iec-60320-c16', 'C16'), ('iec-60320-c20', 'C20'), ('iec-60320-c22', 'C22')]\n* `IEC 60309` - [('iec-60309-p-n-e-4h', 'P+N+E 4H'), ('iec-60309-p-n-e-6h', 'P+N+E 6H'), ('iec-60309-p-n-e-9h', 'P+N+E 9H'), ('iec-60309-2p-e-4h', '2P+E 4H'), ('iec-60309-2p-e-6h', '2P+E 6H'), ('iec-60309-2p-e-9h', '2P+E 9H'), ('iec-60309-3p-e-4h', '3P+E 4H'), ('iec-60309-3p-e-6h', '3P+E 6H'), ('iec-60309-3p-e-9h', '3P+E 9H'), ('iec-60309-3p-n-e-4h', '3P+N+E 4H'), ('iec-60309-3p-n-e-6h', '3P+N+E 6H'), ('iec-60309-3p-n-e-9h', '3P+N+E 9H')]\n* `IEC 60906-1` - [('iec-60906-1', 'IEC 60906-1'), ('nbr-14136-10a', '2P+T 10A (NBR 14136)'), ('nbr-14136-20a', '2P+T 20A (NBR 14136)')]\n* `NEMA (Non-locking)` - [('nema-1-15p', 'NEMA 1-15P'), ('nema-5-15p', 'NEMA 5-15P'), ('nema-5-20p', 'NEMA 5-20P'), ('nema-5-30p', 'NEMA 5-30P'), ('nema-5-50p', 'NEMA 5-50P'), ('nema-6-15p', 'NEMA 6-15P'), ('nema-6-20p', 'NEMA 6-20P'), ('nema-6-30p', 'NEMA 6-30P'), ('nema-6-50p', 'NEMA 6-50P'), ('nema-10-30p', 'NEMA 10-30P'), ('nema-10-50p', 'NEMA 10-50P'), ('nema-14-20p', 'NEMA 14-20P'), ('nema-14-30p', 'NEMA 14-30P'), ('nema-14-50p', 'NEMA 14-50P'), ('nema-14-60p', 'NEMA 14-60P'), ('nema-15-15p', 'NEMA 15-15P'), ('nema-15-20p', 'NEMA 15-20P'), ('nema-15-30p', 'NEMA 15-30P'), ('nema-15-50p', 'NEMA 15-50P'), ('nema-15-60p', 'NEMA 15-60P')]\n* `NEMA (Locking)` - [('nema-l1-15p', 'NEMA L1-15P'), ('nema-l5-15p', 'NEMA L5-15P'), ('nema-l5-20p', 'NEMA L5-20P'), ('nema-l5-30p', 'NEMA L5-30P'), ('nema-l5-50p', 'NEMA L5-50P'), ('nema-l6-15p', 'NEMA L6-15P'), ('nema-l6-20p', 'NEMA L6-20P'), ('nema-l6-30p', 'NEMA L6-30P'), ('nema-l6-50p', 'NEMA L6-50P'), ('nema-l10-30p', 'NEMA L10-30P'), ('nema-l14-20p', 'NEMA L14-20P'), ('nema-l14-30p', 'NEMA L14-30P'), ('nema-l14-50p', 'NEMA L14-50P'), ('nema-l14-60p', 'NEMA L14-60P'), ('nema-l15-20p', 'NEMA L15-20P'), ('nema-l15-30p', 'NEMA L15-30P'), ('nema-l15-50p', 'NEMA L15-50P'), ('nema-l15-60p', 'NEMA L15-60P'), ('nema-l21-20p', 'NEMA L21-20P'), ('nema-l21-30p', 'NEMA L21-30P'), ('nema-l22-20p', 'NEMA L22-20P'), ('nema-l22-30p', 'NEMA L22-30P')]\n* `California Style` - [('cs6361c', 'CS6361C'), ('cs6365c', 'CS6365C'), ('cs8165c', 'CS8165C'), ('cs8265c', 'CS8265C'), ('cs8365c', 'CS8365C'), ('cs8465c', 'CS8465C')]\n* `International/ITA` - [('ita-c', 'ITA Type C (CEE 7/16)'), ('ita-e', 'ITA Type E (CEE 7/6)'), ('ita-f', 'ITA Type F (CEE 7/4)'), ('ita-ef', 'ITA Type E/F (CEE 7/7)'), ('ita-g', 'ITA Type G (BS 1363)'), ('ita-h', 'ITA Type H'), ('ita-i', 'ITA Type I'), ('ita-j', 'ITA Type J'), ('ita-k', 'ITA Type K'), ('ita-l', 'ITA Type L (CEI 23-50)'), ('ita-m', 'ITA Type M (BS 546)'), ('ita-n', 'ITA Type N'), ('ita-o', 'ITA Type O')]\n* `USB` - [('usb-a', 'USB Type A'), ('usb-b', 'USB Type B'), ('usb-c', 'USB Type C'), ('usb-mini-a', 'USB Mini A'), ('usb-mini-b', 'USB Mini B'), ('usb-micro-a', 'USB Micro A'), ('usb-micro-b', 'USB Micro B'), ('usb-micro-ab', 'USB Micro AB'), ('usb-3-b', 'USB 3.0 Type B'), ('usb-3-micro-b', 'USB 3.0 Micro B')]\n* `Molex` - [('molex-micro-fit-1x2', 'Molex Micro-Fit 1x2'), ('molex-micro-fit-2x2', 'Molex Micro-Fit 2x2'), ('molex-micro-fit-2x4', 'Molex Micro-Fit 2x4')]\n* `DC` - [('dc-terminal', 'DC Terminal')]\n* `Proprietary` - [('saf-d-grid', 'Saf-D-Grid'), ('neutrik-powercon-20', 'Neutrik powerCON (20A)'), ('neutrik-powercon-32', 'Neutrik powerCON (32A)'), ('neutrik-powercon-true1', 'Neutrik powerCON TRUE1'), ('neutrik-powercon-true1-top', 'Neutrik powerCON TRUE1 TOP'), ('ubiquiti-smartpower', 'Ubiquiti SmartPower')]\n* `Other` - [('hardwired', 'Hardwired'), ('other', 'Other')]").optional(),
  "updated_by_request": z.string().uuid().optional()
}