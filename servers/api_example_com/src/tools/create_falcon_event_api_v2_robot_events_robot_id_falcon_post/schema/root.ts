import { z } from "zod"

export const inputParamsSchema = {
  "robot_id": z.number().int().describe("The ID of the robot"),
  "supply_voltage": z.union([z.number(), z.null()]).describe("Napięcie zasilania").optional(),
  "supply_current": z.union([z.number(), z.null()]).describe("Prąd zasilania").optional(),
  "grid_power": z.union([z.number(), z.null()]).describe("Moc z sieci").optional(),
  "battery_voltage": z.union([z.number(), z.null()]).describe("Napięcie Akumulatora").optional(),
  "battery_current": z.union([z.number(), z.null()]).describe("Prąd z akumulatora").optional(),
  "battery_power": z.union([z.number(), z.null()]).describe("Moc z akumulatora").optional(),
  "remaining_dc_current": z.union([z.number(), z.null()]).describe("Prąd na pozostałe DC").optional(),
  "charge_state": z.union([z.number(), z.null()]).describe("Stan naładowania").optional(),
  "left_wheel_current": z.union([z.number(), z.null()]).describe("Prąd koła Lewego").optional(),
  "right_wheel_current": z.union([z.number(), z.null()]).describe("Prąd koła Prawego").optional(),
  "belt_current": z.union([z.number(), z.null()]).describe("Prąd taśmy").optional(),
  "left_wheel_speed": z.union([z.number(), z.null()]).describe("Prękdość koła Lewego").optional(),
  "right_wheel_speed": z.union([z.number(), z.null()]).describe("Prędkość koła Prawego").optional(),
  "belt_speed": z.union([z.number(), z.null()]).describe("Prekosć taśmy").optional(),
  "left_wheel_distance": z.union([z.number(), z.null()]).describe("Dystans koła Lewgo").optional(),
  "right_wheel_distance": z.union([z.number(), z.null()]).describe("Dystans koła Prawego").optional(),
  "cutter_speed": z.union([z.number(), z.null()]).describe("Predkość Freza").optional(),
  "mixer_speed": z.union([z.number(), z.null()]).describe("Prędkosć Mieszadła").optional(),
  "cutter_torque": z.union([z.number(), z.null()]).describe("Moment Freza").optional(),
  "mixer_torque": z.union([z.number(), z.null()]).describe("Moment Mieszadała").optional(),
  "pump_speed": z.union([z.number(), z.null()]).describe("Prędkość Pompy").optional(),
  "pump_torque": z.union([z.number(), z.null()]).describe("Moment Pompy").optional(),
  "left_weight_sensor": z.union([z.number(), z.null()]).describe("Waga Sensor Lewey").optional(),
  "right_weight_sensor": z.union([z.number(), z.null()]).describe("Waga Sensor Prawy").optional(),
  "rear_weight_sensor": z.union([z.number(), z.null()]).describe("Waga Sensor Tył").optional(),
  "total_weight": z.union([z.number(), z.null()]).describe("Waga Suma").optional(),
  "cutter_position": z.union([z.number(), z.null()]).describe("Pozycja Frezu").optional(),
  "pump_pressure": z.union([z.number(), z.null()]).describe("Ciśnienie Pompa").optional(),
  "current_antenna_position": z.union([z.number(), z.null()]).describe("Aktualnie śledzona pozycja anteny").optional(),
  "current_loop": z.union([z.number(), z.null()]).describe("Aktualnie wybrana pętla").optional(),
  "front_loop_position": z.union([z.number(), z.null()]).describe("Aktualnie wykryta pozycja pętli Przód").optional(),
  "rear_loop_position": z.union([z.number(), z.null()]).describe("Aktualnie wykryta pozycja pętli Przód").optional(),
  "front_loop_power": z.union([z.number(), z.null()]).describe("Moc prętli przód").optional(),
  "rear_loop_power": z.union([z.number(), z.null()]).describe("Moc pętli tył").optional(),
  "weight_to_dispense": z.union([z.number(), z.null()]).describe("Waga do wydania/pobrania").optional(),
  "current_route": z.union([z.number(), z.null()]).describe("Aktualna trasa").optional(),
  "current_action": z.union([z.number(), z.null()]).describe("Aktualna akcja").optional(),
  "cutter_energy": z.union([z.number(), z.null()]).describe("Energia pobrana przez Frez").optional(),
  "mixer_energy": z.union([z.number(), z.null()]).describe("Energia pobrana przez Mieszanie").optional(),
  "pump_energy": z.union([z.number(), z.null()]).describe("Energia pobrana przez Pompę").optional(),
  "drive_wheels_energy": z.union([z.number(), z.null()]).describe("Energia pobrana przez koła jazdy").optional(),
  "belt_energy": z.union([z.number(), z.null()]).describe("Energia pobrana przez teśmę").optional(),
  "other_devices_energy": z.union([z.number(), z.null()]).describe("Energia pobrana przez postałe urządzenia").optional(),
  "grid_energy_for_operations": z.union([z.number(), z.null()]).describe("Energia pobrana z sieci na Mieszanie, Frez, Pompę").optional(),
  "grid_energy_for_charging": z.union([z.number(), z.null()]).describe("Energia pobrana z sieci do ładowania akumulatrora").optional(),
  "battery_energy_for_operations": z.union([z.number(), z.null()]).describe("Energia pobrana z akumulatora do Mieszania, Frezu i Pompy").optional(),
  "drive_wheels_temp": z.union([z.number(), z.null()]).describe("Temperatura kół jazdy").optional(),
  "cutter_motor_temp": z.union([z.number(), z.null()]).describe("Temperatura silnika Frezu").optional(),
  "mixer_motor_temp": z.union([z.number(), z.null()]).describe("Temperatira silnika Mieszania").optional(),
  "hydraulic_pump_temp": z.union([z.number(), z.null()]).describe("Temperatura pompy hydraulicznej").optional(),
  "battery_temp": z.union([z.number(), z.null()]).describe("Temperatura Akumulatorów").optional(),
  "converter_chamber_temp": z.union([z.number(), z.null()]).describe("Temperatura komory przewtwornic").optional(),
  "control_cabinet_temp": z.union([z.number(), z.null()]).describe("Temperatura szafy sterowniczej").optional(),
  "mbdv_controllers_temp": z.union([z.number(), z.null()]).describe("Temperatura sterowników MBDV").optional(),
  "acs_inverters_temp": z.union([z.number(), z.null()]).describe("Temperatura Faloników ACS").optional(),
  "automaton_status": z.union([z.number(), z.null()]).describe("Status Automatu").optional(),
  "power_status": z.union([z.number(), z.null()]).describe("Status Zasilania").optional(),
  "machine_status": z.union([z.number(), z.null()]).describe("Status Maszyny").optional(),
  "sensor_status": z.union([z.number().int(), z.null()]).describe("Status Czujników").optional(),
  "input_status": z.union([z.number().int(), z.null()]).describe("Status wejść").optional(),
  "output_status": z.union([z.number().int(), z.null()]).describe("Status wyjść").optional(),
  "status_1": z.union([z.number().int(), z.null()]).describe("Status 1").optional(),
  "status_2": z.union([z.number().int(), z.null()]).describe("Status 2").optional(),
  "status_3": z.union([z.number().int(), z.null()]).describe("Status 3").optional(),
  "ultrasonic_front_left": z.union([z.number(), z.null()]).describe("Ultradzięk Pwód Lewy").optional(),
  "ultrasonic_front_right": z.union([z.number(), z.null()]).describe("Ultradzięk Pwód PRawy").optional(),
  "ultrasonic_rear_left": z.union([z.number(), z.null()]).describe("Ultradzięk Tył Lewy").optional(),
  "ultrasonic_rear_right": z.union([z.number(), z.null()]).describe("Ultradzięk Tył PRawy").optional(),
  "ultrasonic_side_front_left": z.union([z.number(), z.null()]).describe("Ultradzięk Bok Lewy Pwód").optional(),
  "ultrasonic_side_front_right": z.union([z.number(), z.null()]).describe("Ultradzięk Bok PRawy Pwód").optional(),
  "ultrasonic_side_rear_left": z.union([z.number(), z.null()]).describe("Ultradzięk Bok Lewy Tył").optional(),
  "ultrasonic_side_rear_right": z.union([z.number(), z.null()]).describe("Ultradzięk Bok PRawy Tył").optional()
}