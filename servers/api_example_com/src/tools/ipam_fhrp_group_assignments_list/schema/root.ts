import { z } from "zod"

export const inputParamsSchema = {
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "device": z.array(z.string()).optional(),
  "device_id": z.array(z.number().int()).optional(),
  "group_id": z.array(z.number().int()).describe("Group (ID)").optional(),
  "group_id__n": z.array(z.number().int()).describe("Group (ID)").optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "interface_id": z.array(z.number().int()).optional(),
  "interface_id__empty": z.boolean().optional(),
  "interface_id__gt": z.array(z.number().int()).optional(),
  "interface_id__gte": z.array(z.number().int()).optional(),
  "interface_id__lt": z.array(z.number().int()).optional(),
  "interface_id__lte": z.array(z.number().int()).optional(),
  "interface_id__n": z.array(z.number().int()).optional(),
  "interface_type": z.string().optional(),
  "interface_type__n": z.string().optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "modified_by_request": z.string().uuid().optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "priority": z.array(z.number().int()).optional(),
  "priority__empty": z.boolean().optional(),
  "priority__gt": z.array(z.number().int()).optional(),
  "priority__gte": z.array(z.number().int()).optional(),
  "priority__lt": z.array(z.number().int()).optional(),
  "priority__lte": z.array(z.number().int()).optional(),
  "priority__n": z.array(z.number().int()).optional(),
  "updated_by_request": z.string().uuid().optional(),
  "virtual_machine": z.array(z.string()).optional(),
  "virtual_machine_id": z.array(z.number().int()).optional()
}