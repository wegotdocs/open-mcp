import { z } from "zod"

export const inputParamsSchema = {
  "completed": z.string().datetime({ offset: true }).optional(),
  "completed__after": z.string().datetime({ offset: true }).optional(),
  "completed__before": z.string().datetime({ offset: true }).optional(),
  "created": z.string().datetime({ offset: true }).optional(),
  "created__after": z.string().datetime({ offset: true }).optional(),
  "created__before": z.string().datetime({ offset: true }).optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "interval": z.array(z.number().int()).optional(),
  "interval__empty": z.boolean().optional(),
  "interval__gt": z.array(z.number().int()).optional(),
  "interval__gte": z.array(z.number().int()).optional(),
  "interval__lt": z.array(z.number().int()).optional(),
  "interval__lte": z.array(z.number().int()).optional(),
  "interval__n": z.array(z.number().int()).optional(),
  "job_id": z.string().uuid().optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "name": z.array(z.string()).optional(),
  "name__empty": z.boolean().optional(),
  "name__ic": z.array(z.string()).optional(),
  "name__ie": z.array(z.string()).optional(),
  "name__iew": z.array(z.string()).optional(),
  "name__isw": z.array(z.string()).optional(),
  "name__n": z.array(z.string()).optional(),
  "name__nic": z.array(z.string()).optional(),
  "name__nie": z.array(z.string()).optional(),
  "name__niew": z.array(z.string()).optional(),
  "name__nisw": z.array(z.string()).optional(),
  "object_id": z.array(z.number().int()).optional(),
  "object_id__empty": z.boolean().optional(),
  "object_id__gt": z.array(z.number().int()).optional(),
  "object_id__gte": z.array(z.number().int()).optional(),
  "object_id__lt": z.array(z.number().int()).optional(),
  "object_id__lte": z.array(z.number().int()).optional(),
  "object_id__n": z.array(z.number().int()).optional(),
  "object_type": z.number().int().optional(),
  "object_type__n": z.number().int().optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "q": z.string().describe("Search").optional(),
  "scheduled": z.string().datetime({ offset: true }).optional(),
  "scheduled__after": z.string().datetime({ offset: true }).optional(),
  "scheduled__before": z.string().datetime({ offset: true }).optional(),
  "started": z.string().datetime({ offset: true }).optional(),
  "started__after": z.string().datetime({ offset: true }).optional(),
  "started__before": z.string().datetime({ offset: true }).optional(),
  "status": z.array(z.string()).optional(),
  "status__empty": z.boolean().optional(),
  "status__ic": z.array(z.string()).optional(),
  "status__ie": z.array(z.string()).optional(),
  "status__iew": z.array(z.string()).optional(),
  "status__isw": z.array(z.string()).optional(),
  "status__n": z.array(z.string()).optional(),
  "status__nic": z.array(z.string()).optional(),
  "status__nie": z.array(z.string()).optional(),
  "status__niew": z.array(z.string()).optional(),
  "status__nisw": z.array(z.string()).optional(),
  "user": z.number().int().optional(),
  "user__n": z.number().int().optional()
}