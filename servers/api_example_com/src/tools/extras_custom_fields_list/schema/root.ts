import { z } from "zod"

export const inputParamsSchema = {
  "choice_set": z.array(z.string()).optional(),
  "choice_set__n": z.array(z.string()).optional(),
  "choice_set_id": z.array(z.number().int().nullable()).optional(),
  "choice_set_id__n": z.array(z.number().int().nullable()).optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "filter_logic": z.enum(["disabled","exact","loose"]).describe("Loose matches any instance of a given string; exact matches the entire field.\n\n* `disabled` - Disabled\n* `loose` - Loose\n* `exact` - Exact").optional(),
  "group_name": z.array(z.string()).optional(),
  "group_name__empty": z.boolean().optional(),
  "group_name__ic": z.array(z.string()).optional(),
  "group_name__ie": z.array(z.string()).optional(),
  "group_name__iew": z.array(z.string()).optional(),
  "group_name__isw": z.array(z.string()).optional(),
  "group_name__n": z.array(z.string()).optional(),
  "group_name__nic": z.array(z.string()).optional(),
  "group_name__nie": z.array(z.string()).optional(),
  "group_name__niew": z.array(z.string()).optional(),
  "group_name__nisw": z.array(z.string()).optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "is_cloneable": z.boolean().optional(),
  "label": z.array(z.string()).optional(),
  "label__empty": z.boolean().optional(),
  "label__ic": z.array(z.string()).optional(),
  "label__ie": z.array(z.string()).optional(),
  "label__iew": z.array(z.string()).optional(),
  "label__isw": z.array(z.string()).optional(),
  "label__n": z.array(z.string()).optional(),
  "label__nic": z.array(z.string()).optional(),
  "label__nie": z.array(z.string()).optional(),
  "label__niew": z.array(z.string()).optional(),
  "label__nisw": z.array(z.string()).optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "modified_by_request": z.string().uuid().optional(),
  "name": z.array(z.string()).optional(),
  "name__empty": z.boolean().optional(),
  "name__ic": z.array(z.string()).optional(),
  "name__ie": z.array(z.string()).optional(),
  "name__iew": z.array(z.string()).optional(),
  "name__isw": z.array(z.string()).optional(),
  "name__n": z.array(z.string()).optional(),
  "name__nic": z.array(z.string()).optional(),
  "name__nie": z.array(z.string()).optional(),
  "name__niew": z.array(z.string()).optional(),
  "name__nisw": z.array(z.string()).optional(),
  "object_type": z.string().optional(),
  "object_type__ic": z.string().optional(),
  "object_type__ie": z.string().optional(),
  "object_type__iew": z.string().optional(),
  "object_type__isw": z.string().optional(),
  "object_type__n": z.string().optional(),
  "object_type__nic": z.string().optional(),
  "object_type__nie": z.string().optional(),
  "object_type__niew": z.string().optional(),
  "object_type__nisw": z.string().optional(),
  "object_type_id": z.array(z.number().int()).optional(),
  "object_type_id__n": z.array(z.number().int()).optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "q": z.string().describe("Search").optional(),
  "related_object_type": z.string().optional(),
  "related_object_type__n": z.string().optional(),
  "related_object_type_id": z.array(z.number().int()).optional(),
  "related_object_type_id__n": z.array(z.number().int()).optional(),
  "required": z.boolean().optional(),
  "search_weight": z.array(z.number().int()).optional(),
  "search_weight__empty": z.boolean().optional(),
  "search_weight__gt": z.array(z.number().int()).optional(),
  "search_weight__gte": z.array(z.number().int()).optional(),
  "search_weight__lt": z.array(z.number().int()).optional(),
  "search_weight__lte": z.array(z.number().int()).optional(),
  "search_weight__n": z.array(z.number().int()).optional(),
  "type": z.array(z.string()).describe("The type of data this custom field holds").optional(),
  "type__empty": z.boolean().optional(),
  "type__ic": z.array(z.string()).describe("The type of data this custom field holds").optional(),
  "type__ie": z.array(z.string()).describe("The type of data this custom field holds").optional(),
  "type__iew": z.array(z.string()).describe("The type of data this custom field holds").optional(),
  "type__isw": z.array(z.string()).describe("The type of data this custom field holds").optional(),
  "type__n": z.array(z.string()).describe("The type of data this custom field holds").optional(),
  "type__nic": z.array(z.string()).describe("The type of data this custom field holds").optional(),
  "type__nie": z.array(z.string()).describe("The type of data this custom field holds").optional(),
  "type__niew": z.array(z.string()).describe("The type of data this custom field holds").optional(),
  "type__nisw": z.array(z.string()).describe("The type of data this custom field holds").optional(),
  "ui_editable": z.enum(["hidden","no","yes"]).describe("Specifies whether the custom field value can be edited in the UI\n\n* `yes` - Yes\n* `no` - No\n* `hidden` - Hidden").optional(),
  "ui_visible": z.enum(["always","hidden","if-set"]).describe("Specifies whether the custom field is displayed in the UI\n\n* `always` - Always\n* `if-set` - If set\n* `hidden` - Hidden").optional(),
  "unique": z.boolean().optional(),
  "updated_by_request": z.string().uuid().optional(),
  "validation_maximum": z.array(z.number().int()).optional(),
  "validation_maximum__empty": z.boolean().optional(),
  "validation_maximum__gt": z.array(z.number().int()).optional(),
  "validation_maximum__gte": z.array(z.number().int()).optional(),
  "validation_maximum__lt": z.array(z.number().int()).optional(),
  "validation_maximum__lte": z.array(z.number().int()).optional(),
  "validation_maximum__n": z.array(z.number().int()).optional(),
  "validation_minimum": z.array(z.number().int()).optional(),
  "validation_minimum__empty": z.boolean().optional(),
  "validation_minimum__gt": z.array(z.number().int()).optional(),
  "validation_minimum__gte": z.array(z.number().int()).optional(),
  "validation_minimum__lt": z.array(z.number().int()).optional(),
  "validation_minimum__lte": z.array(z.number().int()).optional(),
  "validation_minimum__n": z.array(z.number().int()).optional(),
  "validation_regex": z.array(z.string()).optional(),
  "validation_regex__empty": z.boolean().optional(),
  "validation_regex__ic": z.array(z.string()).optional(),
  "validation_regex__ie": z.array(z.string()).optional(),
  "validation_regex__iew": z.array(z.string()).optional(),
  "validation_regex__isw": z.array(z.string()).optional(),
  "validation_regex__n": z.array(z.string()).optional(),
  "validation_regex__nic": z.array(z.string()).optional(),
  "validation_regex__nie": z.array(z.string()).optional(),
  "validation_regex__niew": z.array(z.string()).optional(),
  "validation_regex__nisw": z.array(z.string()).optional(),
  "weight": z.array(z.number().int()).optional(),
  "weight__empty": z.boolean().optional(),
  "weight__gt": z.array(z.number().int()).optional(),
  "weight__gte": z.array(z.number().int()).optional(),
  "weight__lt": z.array(z.number().int()).optional(),
  "weight__lte": z.array(z.number().int()).optional(),
  "weight__n": z.array(z.number().int()).optional()
}