import { z } from "zod"

export const inputParamsSchema = {
  "cid": z.array(z.string()).optional(),
  "cid__empty": z.boolean().optional(),
  "cid__ic": z.array(z.string()).optional(),
  "cid__ie": z.array(z.string()).optional(),
  "cid__iew": z.array(z.string()).optional(),
  "cid__isw": z.array(z.string()).optional(),
  "cid__n": z.array(z.string()).optional(),
  "cid__nic": z.array(z.string()).optional(),
  "cid__nie": z.array(z.string()).optional(),
  "cid__niew": z.array(z.string()).optional(),
  "cid__nisw": z.array(z.string()).optional(),
  "commit_rate": z.array(z.number().int()).optional(),
  "commit_rate__empty": z.boolean().optional(),
  "commit_rate__gt": z.array(z.number().int()).optional(),
  "commit_rate__gte": z.array(z.number().int()).optional(),
  "commit_rate__lt": z.array(z.number().int()).optional(),
  "commit_rate__lte": z.array(z.number().int()).optional(),
  "commit_rate__n": z.array(z.number().int()).optional(),
  "contact": z.array(z.number().int()).describe("Contact").optional(),
  "contact__n": z.array(z.number().int()).describe("Contact").optional(),
  "contact_group": z.array(z.string()).optional(),
  "contact_group__n": z.array(z.string()).optional(),
  "contact_role": z.array(z.number().int()).describe("Contact Role").optional(),
  "contact_role__n": z.array(z.number().int()).describe("Contact Role").optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "distance": z.array(z.number()).optional(),
  "distance__empty": z.boolean().optional(),
  "distance__gt": z.array(z.number()).optional(),
  "distance__gte": z.array(z.number()).optional(),
  "distance__lt": z.array(z.number()).optional(),
  "distance__lte": z.array(z.number()).optional(),
  "distance__n": z.array(z.number()).optional(),
  "distance_unit": z.enum(["ft","km","m","mi"]).nullable().describe("* `km` - Kilometers\n* `m` - Meters\n* `mi` - Miles\n* `ft` - Feet").optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "install_date": z.array(z.string().date()).optional(),
  "install_date__empty": z.boolean().optional(),
  "install_date__gt": z.array(z.string().date()).optional(),
  "install_date__gte": z.array(z.string().date()).optional(),
  "install_date__lt": z.array(z.string().date()).optional(),
  "install_date__lte": z.array(z.string().date()).optional(),
  "install_date__n": z.array(z.string().date()).optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "location_id": z.array(z.number().int()).describe("Location (ID)").optional(),
  "location_id__n": z.array(z.number().int()).describe("Location (ID)").optional(),
  "modified_by_request": z.string().uuid().optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "provider": z.array(z.string()).describe("Provider (slug)").optional(),
  "provider__n": z.array(z.string()).describe("Provider (slug)").optional(),
  "provider_account": z.array(z.string()).describe("Provider account (account)").optional(),
  "provider_account__n": z.array(z.string()).describe("Provider account (account)").optional(),
  "provider_account_id": z.array(z.number().int()).describe("Provider account (ID)").optional(),
  "provider_account_id__n": z.array(z.number().int()).describe("Provider account (ID)").optional(),
  "provider_id": z.array(z.number().int()).describe("Provider (ID)").optional(),
  "provider_id__n": z.array(z.number().int()).describe("Provider (ID)").optional(),
  "provider_network_id": z.array(z.number().int()).describe("Provider network (ID)").optional(),
  "provider_network_id__n": z.array(z.number().int()).describe("Provider network (ID)").optional(),
  "q": z.string().describe("Search").optional(),
  "region": z.array(z.string()).optional(),
  "region__n": z.array(z.string()).optional(),
  "region_id": z.array(z.string()).optional(),
  "region_id__n": z.array(z.string()).optional(),
  "site": z.array(z.string()).describe("Site (slug)").optional(),
  "site__n": z.array(z.string()).describe("Site (slug)").optional(),
  "site_group": z.array(z.string()).optional(),
  "site_group__n": z.array(z.string()).optional(),
  "site_group_id": z.array(z.string()).optional(),
  "site_group_id__n": z.array(z.string()).optional(),
  "site_id": z.array(z.number().int()).describe("Site (ID)").optional(),
  "site_id__n": z.array(z.number().int()).describe("Site (ID)").optional(),
  "status": z.array(z.string()).optional(),
  "status__empty": z.boolean().optional(),
  "status__ic": z.array(z.string()).optional(),
  "status__ie": z.array(z.string()).optional(),
  "status__iew": z.array(z.string()).optional(),
  "status__isw": z.array(z.string()).optional(),
  "status__n": z.array(z.string()).optional(),
  "status__nic": z.array(z.string()).optional(),
  "status__nie": z.array(z.string()).optional(),
  "status__niew": z.array(z.string()).optional(),
  "status__nisw": z.array(z.string()).optional(),
  "tag": z.array(z.string()).optional(),
  "tag__n": z.array(z.string()).optional(),
  "tag_id": z.array(z.number().int()).optional(),
  "tag_id__n": z.array(z.number().int()).optional(),
  "tenant": z.array(z.string()).describe("Tenant (slug)").optional(),
  "tenant__n": z.array(z.string()).describe("Tenant (slug)").optional(),
  "tenant_group": z.array(z.string()).optional(),
  "tenant_group__n": z.array(z.string()).optional(),
  "tenant_group_id": z.array(z.string()).optional(),
  "tenant_group_id__n": z.array(z.string()).optional(),
  "tenant_id": z.array(z.number().int().nullable()).describe("Tenant (ID)").optional(),
  "tenant_id__n": z.array(z.number().int().nullable()).describe("Tenant (ID)").optional(),
  "termination_a_id": z.array(z.number().int().nullable()).describe("Termination A (ID)").optional(),
  "termination_a_id__n": z.array(z.number().int().nullable()).describe("Termination A (ID)").optional(),
  "termination_date": z.array(z.string().date()).optional(),
  "termination_date__empty": z.boolean().optional(),
  "termination_date__gt": z.array(z.string().date()).optional(),
  "termination_date__gte": z.array(z.string().date()).optional(),
  "termination_date__lt": z.array(z.string().date()).optional(),
  "termination_date__lte": z.array(z.string().date()).optional(),
  "termination_date__n": z.array(z.string().date()).optional(),
  "termination_z_id": z.array(z.number().int().nullable()).describe("Termination A (ID)").optional(),
  "termination_z_id__n": z.array(z.number().int().nullable()).describe("Termination A (ID)").optional(),
  "type": z.array(z.string()).describe("Circuit type (slug)").optional(),
  "type__n": z.array(z.string()).describe("Circuit type (slug)").optional(),
  "type_id": z.array(z.number().int()).describe("Circuit type (ID)").optional(),
  "type_id__n": z.array(z.number().int()).describe("Circuit type (ID)").optional(),
  "updated_by_request": z.string().uuid().optional()
}