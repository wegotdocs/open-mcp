import { z } from "zod"

export const inputParamsSchema = {
  "cable_end": z.enum(["A","B"]).nullable().describe("* `A` - A\n* `B` - B").optional(),
  "cable_id": z.array(z.number().int().nullable()).describe("Cable (ID)").optional(),
  "cable_id__n": z.array(z.number().int().nullable()).describe("Cable (ID)").optional(),
  "cabled": z.boolean().optional(),
  "circuit_id": z.array(z.number().int()).describe("Circuit").optional(),
  "circuit_id__n": z.array(z.number().int()).describe("Circuit").optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "location": z.array(z.string()).optional(),
  "location__n": z.array(z.string()).optional(),
  "location_id": z.array(z.string()).optional(),
  "location_id__n": z.array(z.string()).optional(),
  "mark_connected": z.boolean().optional(),
  "modified_by_request": z.string().uuid().optional(),
  "occupied": z.boolean().optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "port_speed": z.array(z.number().int()).optional(),
  "port_speed__empty": z.boolean().optional(),
  "port_speed__gt": z.array(z.number().int()).optional(),
  "port_speed__gte": z.array(z.number().int()).optional(),
  "port_speed__lt": z.array(z.number().int()).optional(),
  "port_speed__lte": z.array(z.number().int()).optional(),
  "port_speed__n": z.array(z.number().int()).optional(),
  "pp_info": z.array(z.string()).optional(),
  "pp_info__empty": z.boolean().optional(),
  "pp_info__ic": z.array(z.string()).optional(),
  "pp_info__ie": z.array(z.string()).optional(),
  "pp_info__iew": z.array(z.string()).optional(),
  "pp_info__isw": z.array(z.string()).optional(),
  "pp_info__n": z.array(z.string()).optional(),
  "pp_info__nic": z.array(z.string()).optional(),
  "pp_info__nie": z.array(z.string()).optional(),
  "pp_info__niew": z.array(z.string()).optional(),
  "pp_info__nisw": z.array(z.string()).optional(),
  "provider": z.array(z.string()).describe("Provider (slug)").optional(),
  "provider__n": z.array(z.string()).describe("Provider (slug)").optional(),
  "provider_id": z.array(z.number().int()).describe("Provider (ID)").optional(),
  "provider_id__n": z.array(z.number().int()).describe("Provider (ID)").optional(),
  "provider_network_id": z.array(z.number().int()).describe("ProviderNetwork (ID)").optional(),
  "provider_network_id__n": z.array(z.number().int()).describe("ProviderNetwork (ID)").optional(),
  "q": z.string().describe("Search").optional(),
  "region": z.array(z.string()).optional(),
  "region__n": z.array(z.string()).optional(),
  "region_id": z.array(z.string()).optional(),
  "region_id__n": z.array(z.string()).optional(),
  "site": z.array(z.string()).describe("Site (slug)").optional(),
  "site__n": z.array(z.string()).describe("Site (slug)").optional(),
  "site_group": z.array(z.string()).optional(),
  "site_group__n": z.array(z.string()).optional(),
  "site_group_id": z.array(z.string()).optional(),
  "site_group_id__n": z.array(z.string()).optional(),
  "site_id": z.array(z.number().int()).describe("Site (ID)").optional(),
  "site_id__n": z.array(z.number().int()).describe("Site (ID)").optional(),
  "tag": z.array(z.string()).optional(),
  "tag__n": z.array(z.string()).optional(),
  "tag_id": z.array(z.number().int()).optional(),
  "tag_id__n": z.array(z.number().int()).optional(),
  "term_side": z.enum(["A","Z"]).describe("* `A` - A\n* `Z` - Z").optional(),
  "termination_id": z.array(z.number().int()).optional(),
  "termination_id__empty": z.boolean().optional(),
  "termination_id__gt": z.array(z.number().int()).optional(),
  "termination_id__gte": z.array(z.number().int()).optional(),
  "termination_id__lt": z.array(z.number().int()).optional(),
  "termination_id__lte": z.array(z.number().int()).optional(),
  "termination_id__n": z.array(z.number().int()).optional(),
  "termination_type": z.string().optional(),
  "termination_type__n": z.string().optional(),
  "updated_by_request": z.string().uuid().optional(),
  "upstream_speed": z.array(z.number().int()).optional(),
  "upstream_speed__empty": z.boolean().optional(),
  "upstream_speed__gt": z.array(z.number().int()).optional(),
  "upstream_speed__gte": z.array(z.number().int()).optional(),
  "upstream_speed__lt": z.array(z.number().int()).optional(),
  "upstream_speed__lte": z.array(z.number().int()).optional(),
  "upstream_speed__n": z.array(z.number().int()).optional(),
  "xconnect_id": z.array(z.string()).optional(),
  "xconnect_id__empty": z.boolean().optional(),
  "xconnect_id__ic": z.array(z.string()).optional(),
  "xconnect_id__ie": z.array(z.string()).optional(),
  "xconnect_id__iew": z.array(z.string()).optional(),
  "xconnect_id__isw": z.array(z.string()).optional(),
  "xconnect_id__n": z.array(z.string()).optional(),
  "xconnect_id__nic": z.array(z.string()).optional(),
  "xconnect_id__nie": z.array(z.string()).optional(),
  "xconnect_id__niew": z.array(z.string()).optional(),
  "xconnect_id__nisw": z.array(z.string()).optional()
}