import { z } from "zod"

export const inputParamsSchema = {
  "bridge_id": z.array(z.number().int()).describe("Bridged interface (ID)").optional(),
  "bridge_id__n": z.array(z.number().int()).describe("Bridged interface (ID)").optional(),
  "cluster": z.array(z.string()).describe("Cluster").optional(),
  "cluster__n": z.array(z.string()).describe("Cluster").optional(),
  "cluster_id": z.array(z.number().int()).describe("Cluster (ID)").optional(),
  "cluster_id__n": z.array(z.number().int()).describe("Cluster (ID)").optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "enabled": z.boolean().optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "l2vpn": z.array(z.number().int().gte(-9223372036854776000).lte(9223372036854776000).nullable()).describe("L2VPN").optional(),
  "l2vpn__n": z.array(z.number().int().gte(-9223372036854776000).lte(9223372036854776000).nullable()).describe("L2VPN").optional(),
  "l2vpn_id": z.array(z.number().int()).describe("L2VPN (ID)").optional(),
  "l2vpn_id__n": z.array(z.number().int()).describe("L2VPN (ID)").optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "mac_address": z.array(z.string()).optional(),
  "mac_address__ic": z.array(z.string()).optional(),
  "mac_address__ie": z.array(z.string()).optional(),
  "mac_address__iew": z.array(z.string()).optional(),
  "mac_address__isw": z.array(z.string()).optional(),
  "mac_address__n": z.array(z.string()).optional(),
  "mac_address__nic": z.array(z.string()).optional(),
  "mac_address__nie": z.array(z.string()).optional(),
  "mac_address__niew": z.array(z.string()).optional(),
  "mac_address__nisw": z.array(z.string()).optional(),
  "mode": z.array(z.string().nullable()).describe("802.1Q Mode").optional(),
  "mode__empty": z.boolean().describe("802.1Q Mode").optional(),
  "mode__ic": z.array(z.string().nullable()).describe("802.1Q Mode").optional(),
  "mode__ie": z.array(z.string().nullable()).describe("802.1Q Mode").optional(),
  "mode__iew": z.array(z.string().nullable()).describe("802.1Q Mode").optional(),
  "mode__isw": z.array(z.string().nullable()).describe("802.1Q Mode").optional(),
  "mode__n": z.array(z.string().nullable()).describe("802.1Q Mode").optional(),
  "mode__nic": z.array(z.string().nullable()).describe("802.1Q Mode").optional(),
  "mode__nie": z.array(z.string().nullable()).describe("802.1Q Mode").optional(),
  "mode__niew": z.array(z.string().nullable()).describe("802.1Q Mode").optional(),
  "mode__nisw": z.array(z.string().nullable()).describe("802.1Q Mode").optional(),
  "modified_by_request": z.string().uuid().optional(),
  "mtu": z.array(z.number().int()).optional(),
  "mtu__empty": z.boolean().optional(),
  "mtu__gt": z.array(z.number().int()).optional(),
  "mtu__gte": z.array(z.number().int()).optional(),
  "mtu__lt": z.array(z.number().int()).optional(),
  "mtu__lte": z.array(z.number().int()).optional(),
  "mtu__n": z.array(z.number().int()).optional(),
  "name": z.array(z.string()).optional(),
  "name__empty": z.boolean().optional(),
  "name__ic": z.array(z.string()).optional(),
  "name__ie": z.array(z.string()).optional(),
  "name__iew": z.array(z.string()).optional(),
  "name__isw": z.array(z.string()).optional(),
  "name__n": z.array(z.string()).optional(),
  "name__nic": z.array(z.string()).optional(),
  "name__nie": z.array(z.string()).optional(),
  "name__niew": z.array(z.string()).optional(),
  "name__nisw": z.array(z.string()).optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "parent_id": z.array(z.number().int()).describe("Parent interface (ID)").optional(),
  "parent_id__n": z.array(z.number().int()).describe("Parent interface (ID)").optional(),
  "primary_mac_address": z.array(z.string()).describe("Primary MAC address").optional(),
  "primary_mac_address__n": z.array(z.string()).describe("Primary MAC address").optional(),
  "primary_mac_address_id": z.array(z.number().int()).describe("Primary MAC address (ID)").optional(),
  "primary_mac_address_id__n": z.array(z.number().int()).describe("Primary MAC address (ID)").optional(),
  "q": z.string().describe("Search").optional(),
  "tag": z.array(z.string()).optional(),
  "tag__n": z.array(z.string()).optional(),
  "tag_id": z.array(z.number().int()).optional(),
  "tag_id__n": z.array(z.number().int()).optional(),
  "updated_by_request": z.string().uuid().optional(),
  "virtual_machine": z.array(z.string()).describe("Virtual machine").optional(),
  "virtual_machine__n": z.array(z.string()).describe("Virtual machine").optional(),
  "virtual_machine_id": z.array(z.number().int()).describe("Virtual machine (ID)").optional(),
  "virtual_machine_id__n": z.array(z.number().int()).describe("Virtual machine (ID)").optional(),
  "vlan": z.string().describe("Assigned VID").optional(),
  "vlan_id": z.string().describe("Assigned VLAN").optional(),
  "vlan_translation_policy": z.array(z.string()).describe("VLAN Translation Policy").optional(),
  "vlan_translation_policy__n": z.array(z.string()).describe("VLAN Translation Policy").optional(),
  "vlan_translation_policy_id": z.array(z.number().int()).describe("VLAN Translation Policy (ID)").optional(),
  "vlan_translation_policy_id__n": z.array(z.number().int()).describe("VLAN Translation Policy (ID)").optional(),
  "vrf": z.array(z.string().nullable()).describe("VRF (RD)").optional(),
  "vrf__n": z.array(z.string().nullable()).describe("VRF (RD)").optional(),
  "vrf_id": z.array(z.number().int()).describe("VRF").optional(),
  "vrf_id__n": z.array(z.number().int()).describe("VRF").optional()
}