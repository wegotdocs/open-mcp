import { z } from "zod"

export const inputParamsSchema = {
  "airflow": z.enum(["bottom-to-top","front-to-rear","left-to-right","mixed","passive","rear-to-front","rear-to-side","right-to-left","side-to-rear","top-to-bottom"]).nullable().describe("* `front-to-rear` - Front to rear\n* `rear-to-front` - Rear to front\n* `left-to-right` - Left to right\n* `right-to-left` - Right to left\n* `side-to-rear` - Side to rear\n* `rear-to-side` - Rear to side\n* `bottom-to-top` - Bottom to top\n* `top-to-bottom` - Top to bottom\n* `passive` - Passive\n* `mixed` - Mixed").optional(),
  "asset_tag": z.array(z.string()).optional(),
  "asset_tag__empty": z.boolean().optional(),
  "asset_tag__ic": z.array(z.string()).optional(),
  "asset_tag__ie": z.array(z.string()).optional(),
  "asset_tag__iew": z.array(z.string()).optional(),
  "asset_tag__isw": z.array(z.string()).optional(),
  "asset_tag__n": z.array(z.string()).optional(),
  "asset_tag__nic": z.array(z.string()).optional(),
  "asset_tag__nie": z.array(z.string()).optional(),
  "asset_tag__niew": z.array(z.string()).optional(),
  "asset_tag__nisw": z.array(z.string()).optional(),
  "cluster_group": z.array(z.string()).describe("Cluster group (slug)").optional(),
  "cluster_group__n": z.array(z.string()).describe("Cluster group (slug)").optional(),
  "cluster_group_id": z.array(z.number().int()).describe("Cluster group (ID)").optional(),
  "cluster_group_id__n": z.array(z.number().int()).describe("Cluster group (ID)").optional(),
  "cluster_id": z.array(z.number().int().nullable()).describe("VM cluster (ID)").optional(),
  "cluster_id__n": z.array(z.number().int().nullable()).describe("VM cluster (ID)").optional(),
  "config_template_id": z.array(z.number().int().nullable()).describe("Config template (ID)").optional(),
  "config_template_id__n": z.array(z.number().int().nullable()).describe("Config template (ID)").optional(),
  "console_port_count": z.array(z.number().int()).optional(),
  "console_port_count__empty": z.boolean().optional(),
  "console_port_count__gt": z.array(z.number().int()).optional(),
  "console_port_count__gte": z.array(z.number().int()).optional(),
  "console_port_count__lt": z.array(z.number().int()).optional(),
  "console_port_count__lte": z.array(z.number().int()).optional(),
  "console_port_count__n": z.array(z.number().int()).optional(),
  "console_ports": z.boolean().describe("Has console ports").optional(),
  "console_server_port_count": z.array(z.number().int()).optional(),
  "console_server_port_count__empty": z.boolean().optional(),
  "console_server_port_count__gt": z.array(z.number().int()).optional(),
  "console_server_port_count__gte": z.array(z.number().int()).optional(),
  "console_server_port_count__lt": z.array(z.number().int()).optional(),
  "console_server_port_count__lte": z.array(z.number().int()).optional(),
  "console_server_port_count__n": z.array(z.number().int()).optional(),
  "console_server_ports": z.boolean().describe("Has console server ports").optional(),
  "contact": z.array(z.number().int()).describe("Contact").optional(),
  "contact__n": z.array(z.number().int()).describe("Contact").optional(),
  "contact_group": z.array(z.string()).optional(),
  "contact_group__n": z.array(z.string()).optional(),
  "contact_role": z.array(z.number().int()).describe("Contact Role").optional(),
  "contact_role__n": z.array(z.number().int()).describe("Contact Role").optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "device_bay_count": z.array(z.number().int()).optional(),
  "device_bay_count__empty": z.boolean().optional(),
  "device_bay_count__gt": z.array(z.number().int()).optional(),
  "device_bay_count__gte": z.array(z.number().int()).optional(),
  "device_bay_count__lt": z.array(z.number().int()).optional(),
  "device_bay_count__lte": z.array(z.number().int()).optional(),
  "device_bay_count__n": z.array(z.number().int()).optional(),
  "device_bays": z.boolean().describe("Has device bays").optional(),
  "device_type": z.array(z.string()).describe("Device type (slug)").optional(),
  "device_type__n": z.array(z.string()).describe("Device type (slug)").optional(),
  "device_type_id": z.array(z.number().int()).describe("Device type (ID)").optional(),
  "device_type_id__n": z.array(z.number().int()).describe("Device type (ID)").optional(),
  "face": z.enum(["front","rear"]).nullable().describe("* `front` - Front\n* `rear` - Rear").optional(),
  "front_port_count": z.array(z.number().int()).optional(),
  "front_port_count__empty": z.boolean().optional(),
  "front_port_count__gt": z.array(z.number().int()).optional(),
  "front_port_count__gte": z.array(z.number().int()).optional(),
  "front_port_count__lt": z.array(z.number().int()).optional(),
  "front_port_count__lte": z.array(z.number().int()).optional(),
  "front_port_count__n": z.array(z.number().int()).optional(),
  "has_oob_ip": z.boolean().describe("Has an out-of-band IP").optional(),
  "has_primary_ip": z.boolean().describe("Has a primary IP").optional(),
  "has_virtual_device_context": z.boolean().describe("Has virtual device context").optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "interface_count": z.array(z.number().int()).optional(),
  "interface_count__empty": z.boolean().optional(),
  "interface_count__gt": z.array(z.number().int()).optional(),
  "interface_count__gte": z.array(z.number().int()).optional(),
  "interface_count__lt": z.array(z.number().int()).optional(),
  "interface_count__lte": z.array(z.number().int()).optional(),
  "interface_count__n": z.array(z.number().int()).optional(),
  "interfaces": z.boolean().describe("Has interfaces").optional(),
  "inventory_item_count": z.array(z.number().int()).optional(),
  "inventory_item_count__empty": z.boolean().optional(),
  "inventory_item_count__gt": z.array(z.number().int()).optional(),
  "inventory_item_count__gte": z.array(z.number().int()).optional(),
  "inventory_item_count__lt": z.array(z.number().int()).optional(),
  "inventory_item_count__lte": z.array(z.number().int()).optional(),
  "inventory_item_count__n": z.array(z.number().int()).optional(),
  "is_full_depth": z.boolean().describe("Is full depth").optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "latitude": z.array(z.number()).optional(),
  "latitude__empty": z.boolean().optional(),
  "latitude__gt": z.array(z.number()).optional(),
  "latitude__gte": z.array(z.number()).optional(),
  "latitude__lt": z.array(z.number()).optional(),
  "latitude__lte": z.array(z.number()).optional(),
  "latitude__n": z.array(z.number()).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "local_context_data": z.boolean().describe("Has local config context data").optional(),
  "location": z.array(z.string()).optional(),
  "location__n": z.array(z.string()).optional(),
  "location_id": z.array(z.string()).optional(),
  "location_id__n": z.array(z.string()).optional(),
  "longitude": z.array(z.number()).optional(),
  "longitude__empty": z.boolean().optional(),
  "longitude__gt": z.array(z.number()).optional(),
  "longitude__gte": z.array(z.number()).optional(),
  "longitude__lt": z.array(z.number()).optional(),
  "longitude__lte": z.array(z.number()).optional(),
  "longitude__n": z.array(z.number()).optional(),
  "mac_address": z.array(z.string()).optional(),
  "mac_address__ic": z.array(z.string()).optional(),
  "mac_address__ie": z.array(z.string()).optional(),
  "mac_address__iew": z.array(z.string()).optional(),
  "mac_address__isw": z.array(z.string()).optional(),
  "mac_address__n": z.array(z.string()).optional(),
  "mac_address__nic": z.array(z.string()).optional(),
  "mac_address__nie": z.array(z.string()).optional(),
  "mac_address__niew": z.array(z.string()).optional(),
  "mac_address__nisw": z.array(z.string()).optional(),
  "manufacturer": z.array(z.string()).describe("Manufacturer (slug)").optional(),
  "manufacturer__n": z.array(z.string()).describe("Manufacturer (slug)").optional(),
  "manufacturer_id": z.array(z.number().int()).describe("Manufacturer (ID)").optional(),
  "manufacturer_id__n": z.array(z.number().int()).describe("Manufacturer (ID)").optional(),
  "model": z.array(z.string()).describe("Device model (slug)").optional(),
  "model__n": z.array(z.string()).describe("Device model (slug)").optional(),
  "modified_by_request": z.string().uuid().optional(),
  "module_bay_count": z.array(z.number().int()).optional(),
  "module_bay_count__empty": z.boolean().optional(),
  "module_bay_count__gt": z.array(z.number().int()).optional(),
  "module_bay_count__gte": z.array(z.number().int()).optional(),
  "module_bay_count__lt": z.array(z.number().int()).optional(),
  "module_bay_count__lte": z.array(z.number().int()).optional(),
  "module_bay_count__n": z.array(z.number().int()).optional(),
  "module_bays": z.boolean().describe("Has module bays").optional(),
  "name": z.array(z.string()).optional(),
  "name__empty": z.boolean().optional(),
  "name__ic": z.array(z.string()).optional(),
  "name__ie": z.array(z.string()).optional(),
  "name__iew": z.array(z.string()).optional(),
  "name__isw": z.array(z.string()).optional(),
  "name__n": z.array(z.string()).optional(),
  "name__nic": z.array(z.string()).optional(),
  "name__nie": z.array(z.string()).optional(),
  "name__niew": z.array(z.string()).optional(),
  "name__nisw": z.array(z.string()).optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "oob_ip_id": z.array(z.number().int()).describe("OOB IP (ID)").optional(),
  "oob_ip_id__n": z.array(z.number().int()).describe("OOB IP (ID)").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "parent_bay_id": z.array(z.number().int()).describe("Parent bay (ID)").optional(),
  "parent_bay_id__n": z.array(z.number().int()).describe("Parent bay (ID)").optional(),
  "parent_device_id": z.array(z.number().int()).describe("Parent Device (ID)").optional(),
  "parent_device_id__n": z.array(z.number().int()).describe("Parent Device (ID)").optional(),
  "pass_through_ports": z.boolean().describe("Has pass-through ports").optional(),
  "platform": z.array(z.string()).describe("Platform (slug)").optional(),
  "platform__n": z.array(z.string()).describe("Platform (slug)").optional(),
  "platform_id": z.array(z.number().int().nullable()).describe("Platform (ID)").optional(),
  "platform_id__n": z.array(z.number().int().nullable()).describe("Platform (ID)").optional(),
  "position": z.array(z.number()).optional(),
  "position__empty": z.boolean().optional(),
  "position__gt": z.array(z.number()).optional(),
  "position__gte": z.array(z.number()).optional(),
  "position__lt": z.array(z.number()).optional(),
  "position__lte": z.array(z.number()).optional(),
  "position__n": z.array(z.number()).optional(),
  "power_outlet_count": z.array(z.number().int()).optional(),
  "power_outlet_count__empty": z.boolean().optional(),
  "power_outlet_count__gt": z.array(z.number().int()).optional(),
  "power_outlet_count__gte": z.array(z.number().int()).optional(),
  "power_outlet_count__lt": z.array(z.number().int()).optional(),
  "power_outlet_count__lte": z.array(z.number().int()).optional(),
  "power_outlet_count__n": z.array(z.number().int()).optional(),
  "power_outlets": z.boolean().describe("Has power outlets").optional(),
  "power_port_count": z.array(z.number().int()).optional(),
  "power_port_count__empty": z.boolean().optional(),
  "power_port_count__gt": z.array(z.number().int()).optional(),
  "power_port_count__gte": z.array(z.number().int()).optional(),
  "power_port_count__lt": z.array(z.number().int()).optional(),
  "power_port_count__lte": z.array(z.number().int()).optional(),
  "power_port_count__n": z.array(z.number().int()).optional(),
  "power_ports": z.boolean().describe("Has power ports").optional(),
  "primary_ip4": z.array(z.string()).describe("Primary IPv4 (address)").optional(),
  "primary_ip4__n": z.array(z.string()).describe("Primary IPv4 (address)").optional(),
  "primary_ip4_id": z.array(z.number().int()).describe("Primary IPv4 (ID)").optional(),
  "primary_ip4_id__n": z.array(z.number().int()).describe("Primary IPv4 (ID)").optional(),
  "primary_ip6": z.array(z.string()).describe("Primary IPv6 (address)").optional(),
  "primary_ip6__n": z.array(z.string()).describe("Primary IPv6 (address)").optional(),
  "primary_ip6_id": z.array(z.number().int()).describe("Primary IPv6 (ID)").optional(),
  "primary_ip6_id__n": z.array(z.number().int()).describe("Primary IPv6 (ID)").optional(),
  "q": z.string().describe("Search").optional(),
  "rack_id": z.array(z.number().int()).describe("Rack (ID)").optional(),
  "rack_id__n": z.array(z.number().int()).describe("Rack (ID)").optional(),
  "rear_port_count": z.array(z.number().int()).optional(),
  "rear_port_count__empty": z.boolean().optional(),
  "rear_port_count__gt": z.array(z.number().int()).optional(),
  "rear_port_count__gte": z.array(z.number().int()).optional(),
  "rear_port_count__lt": z.array(z.number().int()).optional(),
  "rear_port_count__lte": z.array(z.number().int()).optional(),
  "rear_port_count__n": z.array(z.number().int()).optional(),
  "region": z.array(z.string()).optional(),
  "region__n": z.array(z.string()).optional(),
  "region_id": z.array(z.string()).optional(),
  "region_id__n": z.array(z.string()).optional(),
  "role": z.array(z.string()).optional(),
  "role__n": z.array(z.string()).optional(),
  "role_id": z.array(z.string()).optional(),
  "role_id__n": z.array(z.string()).optional(),
  "serial": z.array(z.string()).optional(),
  "serial__empty": z.boolean().optional(),
  "serial__ic": z.array(z.string()).optional(),
  "serial__ie": z.array(z.string()).optional(),
  "serial__iew": z.array(z.string()).optional(),
  "serial__isw": z.array(z.string()).optional(),
  "serial__n": z.array(z.string()).optional(),
  "serial__nic": z.array(z.string()).optional(),
  "serial__nie": z.array(z.string()).optional(),
  "serial__niew": z.array(z.string()).optional(),
  "serial__nisw": z.array(z.string()).optional(),
  "site": z.array(z.string()).describe("Site name (slug)").optional(),
  "site__n": z.array(z.string()).describe("Site name (slug)").optional(),
  "site_group": z.array(z.string()).optional(),
  "site_group__n": z.array(z.string()).optional(),
  "site_group_id": z.array(z.string()).optional(),
  "site_group_id__n": z.array(z.string()).optional(),
  "site_id": z.array(z.number().int()).describe("Site (ID)").optional(),
  "site_id__n": z.array(z.number().int()).describe("Site (ID)").optional(),
  "status": z.array(z.string()).optional(),
  "status__empty": z.boolean().optional(),
  "status__ic": z.array(z.string()).optional(),
  "status__ie": z.array(z.string()).optional(),
  "status__iew": z.array(z.string()).optional(),
  "status__isw": z.array(z.string()).optional(),
  "status__n": z.array(z.string()).optional(),
  "status__nic": z.array(z.string()).optional(),
  "status__nie": z.array(z.string()).optional(),
  "status__niew": z.array(z.string()).optional(),
  "status__nisw": z.array(z.string()).optional(),
  "tag": z.array(z.string()).optional(),
  "tag__n": z.array(z.string()).optional(),
  "tag_id": z.array(z.number().int()).optional(),
  "tag_id__n": z.array(z.number().int()).optional(),
  "tenant": z.array(z.string()).describe("Tenant (slug)").optional(),
  "tenant__n": z.array(z.string()).describe("Tenant (slug)").optional(),
  "tenant_group": z.array(z.string()).optional(),
  "tenant_group__n": z.array(z.string()).optional(),
  "tenant_group_id": z.array(z.string()).optional(),
  "tenant_group_id__n": z.array(z.string()).optional(),
  "tenant_id": z.array(z.number().int().nullable()).describe("Tenant (ID)").optional(),
  "tenant_id__n": z.array(z.number().int().nullable()).describe("Tenant (ID)").optional(),
  "updated_by_request": z.string().uuid().optional(),
  "vc_position": z.array(z.number().int()).optional(),
  "vc_position__empty": z.boolean().optional(),
  "vc_position__gt": z.array(z.number().int()).optional(),
  "vc_position__gte": z.array(z.number().int()).optional(),
  "vc_position__lt": z.array(z.number().int()).optional(),
  "vc_position__lte": z.array(z.number().int()).optional(),
  "vc_position__n": z.array(z.number().int()).optional(),
  "vc_priority": z.array(z.number().int()).optional(),
  "vc_priority__empty": z.boolean().optional(),
  "vc_priority__gt": z.array(z.number().int()).optional(),
  "vc_priority__gte": z.array(z.number().int()).optional(),
  "vc_priority__lt": z.array(z.number().int()).optional(),
  "vc_priority__lte": z.array(z.number().int()).optional(),
  "vc_priority__n": z.array(z.number().int()).optional(),
  "virtual_chassis_id": z.array(z.number().int()).describe("Virtual chassis (ID)").optional(),
  "virtual_chassis_id__n": z.array(z.number().int()).describe("Virtual chassis (ID)").optional(),
  "virtual_chassis_member": z.boolean().describe("Is a virtual chassis member").optional()
}