{
  "type": "object",
  "properties": {
    "policy_id": {
      "type": "integer",
      "format": "int32"
    },
    "enabled": {
      "type": "boolean",
      "description": "Policy condition enabled",
      "default": true
    },
    "displayName": {
      "maxLength": 255,
      "minLength": 0,
      "type": "string",
      "description": "Policy condition display name"
    },
    "severity": {
      "type": "string",
      "description": "Policy condition severity",
      "default": "NONE",
      "enum": [
        "NONE",
        "MINOR",
        "MODERATE",
        "MAJOR",
        "CRITICAL"
      ]
    },
    "priority": {
      "type": "string",
      "description": "Policy condition priority",
      "default": "NONE",
      "enum": [
        "NONE",
        "LOW",
        "MEDIUM",
        "HIGH"
      ]
    },
    "channels": {
      "maxItems": 20,
      "minItems": 0,
      "uniqueItems": true,
      "type": "array",
      "description": "Policy condition notification channels",
      "items": {
        "type": "integer",
        "description": "Policy condition notification channels",
        "format": "int32"
      }
    },
    "scripts": {
      "maxItems": 20,
      "minItems": 0,
      "type": "array",
      "description": "Policy condition scripts",
      "items": {
        "type": "object",
        "properties": {
          "scriptId": {
            "type": "integer",
            "description": "Policy condition script id",
            "format": "int32"
          },
          "runAs": {
            "type": "string",
            "description": "Policy condition script runAs",
            "default": "SYSTEM",
            "enum": [
              "SYSTEM",
              "LOGGED_ON_USER",
              "LOCAL_ADMIN",
              "DOMAIN_ADMIN",
              "PREFERRED_CREDENTIAL_MAC",
              "PREFERRED_CREDENTIAL_LINUX"
            ]
          },
          "scriptParam": {
            "type": "string",
            "description": "Policy condition script parameter"
          },
          "scriptVariables": {
            "maxItems": 20,
            "minItems": 0,
            "type": "array",
            "description": "Policy condition script variables",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Policy condition script variable Id"
                },
                "value": {
                  "maxLength": 65535,
                  "minLength": 0,
                  "type": "string",
                  "description": "Policy condition script variable value"
                }
              },
              "description": "Policy condition script variable"
            }
          }
        },
        "description": "Policy condition script"
      }
    },
    "notificationAction": {
      "type": "string",
      "description": "Policy condition notification action",
      "default": "NONE",
      "enum": [
        "NONE",
        "SEND"
      ]
    },
    "notifyOnReset": {
      "type": "boolean",
      "description": "Policy condition notify on reset",
      "default": false
    },
    "resetThreshold": {
      "type": "integer",
      "description": "Policy condition reset threshold (seconds)",
      "format": "int32",
      "default": 14400
    },
    "source": {
      "maxLength": 255,
      "minLength": 0,
      "type": "string",
      "description": "Event Source"
    },
    "eventIds": {
      "maxItems": 20,
      "minItems": 0,
      "uniqueItems": true,
      "type": "array",
      "description": "Event IDs",
      "items": {
        "type": "integer",
        "description": "Event IDs",
        "format": "int32"
      }
    },
    "text": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `text` to the tool, first call the tool `expandSchema` with \"/properties/text\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Windows event policy condition text</property-description>",
      "additionalProperties": true
    },
    "occurrence": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `occurrence` to the tool, first call the tool `expandSchema` with \"/properties/occurrence\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Windows event policy condition occurrence</property-description>",
      "additionalProperties": true
    }
  },
  "required": [
    "policy_id",
    "source",
    "eventIds"
  ]
}