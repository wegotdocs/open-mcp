import { z } from "zod"

export const inputParamsSchema = {
  "airflow": z.enum(["front-to-rear","rear-to-front"]).nullable().describe("* `front-to-rear` - Front to rear\n* `rear-to-front` - Rear to front").optional(),
  "asset_tag": z.array(z.string()).optional(),
  "asset_tag__empty": z.boolean().optional(),
  "asset_tag__ic": z.array(z.string()).optional(),
  "asset_tag__ie": z.array(z.string()).optional(),
  "asset_tag__iew": z.array(z.string()).optional(),
  "asset_tag__isw": z.array(z.string()).optional(),
  "asset_tag__n": z.array(z.string()).optional(),
  "asset_tag__nic": z.array(z.string()).optional(),
  "asset_tag__nie": z.array(z.string()).optional(),
  "asset_tag__niew": z.array(z.string()).optional(),
  "asset_tag__nisw": z.array(z.string()).optional(),
  "contact": z.array(z.number().int()).describe("Contact").optional(),
  "contact__n": z.array(z.number().int()).describe("Contact").optional(),
  "contact_group": z.array(z.string()).optional(),
  "contact_group__n": z.array(z.string()).optional(),
  "contact_role": z.array(z.number().int()).describe("Contact Role").optional(),
  "contact_role__n": z.array(z.number().int()).describe("Contact Role").optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "desc_units": z.boolean().optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "facility_id": z.array(z.string()).optional(),
  "facility_id__empty": z.boolean().optional(),
  "facility_id__ic": z.array(z.string()).optional(),
  "facility_id__ie": z.array(z.string()).optional(),
  "facility_id__iew": z.array(z.string()).optional(),
  "facility_id__isw": z.array(z.string()).optional(),
  "facility_id__n": z.array(z.string()).optional(),
  "facility_id__nic": z.array(z.string()).optional(),
  "facility_id__nie": z.array(z.string()).optional(),
  "facility_id__niew": z.array(z.string()).optional(),
  "facility_id__nisw": z.array(z.string()).optional(),
  "form_factor": z.array(z.string().nullable()).optional(),
  "form_factor__empty": z.boolean().optional(),
  "form_factor__ic": z.array(z.string().nullable()).optional(),
  "form_factor__ie": z.array(z.string().nullable()).optional(),
  "form_factor__iew": z.array(z.string().nullable()).optional(),
  "form_factor__isw": z.array(z.string().nullable()).optional(),
  "form_factor__n": z.array(z.string().nullable()).optional(),
  "form_factor__nic": z.array(z.string().nullable()).optional(),
  "form_factor__nie": z.array(z.string().nullable()).optional(),
  "form_factor__niew": z.array(z.string().nullable()).optional(),
  "form_factor__nisw": z.array(z.string().nullable()).optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "location": z.array(z.string()).optional(),
  "location__n": z.array(z.string()).optional(),
  "location_id": z.array(z.string()).optional(),
  "location_id__n": z.array(z.string()).optional(),
  "manufacturer": z.array(z.string()).describe("Manufacturer (slug)").optional(),
  "manufacturer__n": z.array(z.string()).describe("Manufacturer (slug)").optional(),
  "manufacturer_id": z.array(z.number().int()).describe("Manufacturer (ID)").optional(),
  "manufacturer_id__n": z.array(z.number().int()).describe("Manufacturer (ID)").optional(),
  "max_weight": z.array(z.number().int()).optional(),
  "max_weight__empty": z.boolean().optional(),
  "max_weight__gt": z.array(z.number().int()).optional(),
  "max_weight__gte": z.array(z.number().int()).optional(),
  "max_weight__lt": z.array(z.number().int()).optional(),
  "max_weight__lte": z.array(z.number().int()).optional(),
  "max_weight__n": z.array(z.number().int()).optional(),
  "modified_by_request": z.string().uuid().optional(),
  "mounting_depth": z.array(z.number().int()).optional(),
  "mounting_depth__empty": z.boolean().optional(),
  "mounting_depth__gt": z.array(z.number().int()).optional(),
  "mounting_depth__gte": z.array(z.number().int()).optional(),
  "mounting_depth__lt": z.array(z.number().int()).optional(),
  "mounting_depth__lte": z.array(z.number().int()).optional(),
  "mounting_depth__n": z.array(z.number().int()).optional(),
  "name": z.array(z.string()).optional(),
  "name__empty": z.boolean().optional(),
  "name__ic": z.array(z.string()).optional(),
  "name__ie": z.array(z.string()).optional(),
  "name__iew": z.array(z.string()).optional(),
  "name__isw": z.array(z.string()).optional(),
  "name__n": z.array(z.string()).optional(),
  "name__nic": z.array(z.string()).optional(),
  "name__nie": z.array(z.string()).optional(),
  "name__niew": z.array(z.string()).optional(),
  "name__nisw": z.array(z.string()).optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "outer_depth": z.array(z.number().int()).optional(),
  "outer_depth__empty": z.boolean().optional(),
  "outer_depth__gt": z.array(z.number().int()).optional(),
  "outer_depth__gte": z.array(z.number().int()).optional(),
  "outer_depth__lt": z.array(z.number().int()).optional(),
  "outer_depth__lte": z.array(z.number().int()).optional(),
  "outer_depth__n": z.array(z.number().int()).optional(),
  "outer_height": z.array(z.number().int()).optional(),
  "outer_height__empty": z.boolean().optional(),
  "outer_height__gt": z.array(z.number().int()).optional(),
  "outer_height__gte": z.array(z.number().int()).optional(),
  "outer_height__lt": z.array(z.number().int()).optional(),
  "outer_height__lte": z.array(z.number().int()).optional(),
  "outer_height__n": z.array(z.number().int()).optional(),
  "outer_unit": z.enum(["in","mm"]).nullable().describe("* `mm` - Millimeters\n* `in` - Inches").optional(),
  "outer_width": z.array(z.number().int()).optional(),
  "outer_width__empty": z.boolean().optional(),
  "outer_width__gt": z.array(z.number().int()).optional(),
  "outer_width__gte": z.array(z.number().int()).optional(),
  "outer_width__lt": z.array(z.number().int()).optional(),
  "outer_width__lte": z.array(z.number().int()).optional(),
  "outer_width__n": z.array(z.number().int()).optional(),
  "q": z.string().describe("Search").optional(),
  "rack_type": z.array(z.string()).describe("Rack type (slug)").optional(),
  "rack_type__n": z.array(z.string()).describe("Rack type (slug)").optional(),
  "rack_type_id": z.array(z.number().int().nullable()).describe("Rack type (ID)").optional(),
  "rack_type_id__n": z.array(z.number().int().nullable()).describe("Rack type (ID)").optional(),
  "region": z.array(z.string()).optional(),
  "region__n": z.array(z.string()).optional(),
  "region_id": z.array(z.string()).optional(),
  "region_id__n": z.array(z.string()).optional(),
  "role": z.array(z.string()).describe("Role (slug)").optional(),
  "role__n": z.array(z.string()).describe("Role (slug)").optional(),
  "role_id": z.array(z.number().int().nullable()).describe("Role (ID)").optional(),
  "role_id__n": z.array(z.number().int().nullable()).describe("Role (ID)").optional(),
  "serial": z.array(z.string()).optional(),
  "serial__empty": z.boolean().optional(),
  "serial__ic": z.array(z.string()).optional(),
  "serial__ie": z.array(z.string()).optional(),
  "serial__iew": z.array(z.string()).optional(),
  "serial__isw": z.array(z.string()).optional(),
  "serial__n": z.array(z.string()).optional(),
  "serial__nic": z.array(z.string()).optional(),
  "serial__nie": z.array(z.string()).optional(),
  "serial__niew": z.array(z.string()).optional(),
  "serial__nisw": z.array(z.string()).optional(),
  "site": z.array(z.string()).describe("Site (slug)").optional(),
  "site__n": z.array(z.string()).describe("Site (slug)").optional(),
  "site_group": z.array(z.string()).optional(),
  "site_group__n": z.array(z.string()).optional(),
  "site_group_id": z.array(z.string()).optional(),
  "site_group_id__n": z.array(z.string()).optional(),
  "site_id": z.array(z.number().int()).describe("Site (ID)").optional(),
  "site_id__n": z.array(z.number().int()).describe("Site (ID)").optional(),
  "starting_unit": z.array(z.number().int()).optional(),
  "starting_unit__empty": z.boolean().optional(),
  "starting_unit__gt": z.array(z.number().int()).optional(),
  "starting_unit__gte": z.array(z.number().int()).optional(),
  "starting_unit__lt": z.array(z.number().int()).optional(),
  "starting_unit__lte": z.array(z.number().int()).optional(),
  "starting_unit__n": z.array(z.number().int()).optional(),
  "status": z.array(z.string()).optional(),
  "status__empty": z.boolean().optional(),
  "status__ic": z.array(z.string()).optional(),
  "status__ie": z.array(z.string()).optional(),
  "status__iew": z.array(z.string()).optional(),
  "status__isw": z.array(z.string()).optional(),
  "status__n": z.array(z.string()).optional(),
  "status__nic": z.array(z.string()).optional(),
  "status__nie": z.array(z.string()).optional(),
  "status__niew": z.array(z.string()).optional(),
  "status__nisw": z.array(z.string()).optional(),
  "tag": z.array(z.string()).optional(),
  "tag__n": z.array(z.string()).optional(),
  "tag_id": z.array(z.number().int()).optional(),
  "tag_id__n": z.array(z.number().int()).optional(),
  "tenant": z.array(z.string()).describe("Tenant (slug)").optional(),
  "tenant__n": z.array(z.string()).describe("Tenant (slug)").optional(),
  "tenant_group": z.array(z.string()).optional(),
  "tenant_group__n": z.array(z.string()).optional(),
  "tenant_group_id": z.array(z.string()).optional(),
  "tenant_group_id__n": z.array(z.string()).optional(),
  "tenant_id": z.array(z.number().int().nullable()).describe("Tenant (ID)").optional(),
  "tenant_id__n": z.array(z.number().int().nullable()).describe("Tenant (ID)").optional(),
  "u_height": z.array(z.number().int()).optional(),
  "u_height__empty": z.boolean().optional(),
  "u_height__gt": z.array(z.number().int()).optional(),
  "u_height__gte": z.array(z.number().int()).optional(),
  "u_height__lt": z.array(z.number().int()).optional(),
  "u_height__lte": z.array(z.number().int()).optional(),
  "u_height__n": z.array(z.number().int()).optional(),
  "updated_by_request": z.string().uuid().optional(),
  "weight": z.array(z.number()).optional(),
  "weight__empty": z.boolean().optional(),
  "weight__gt": z.array(z.number()).optional(),
  "weight__gte": z.array(z.number()).optional(),
  "weight__lt": z.array(z.number()).optional(),
  "weight__lte": z.array(z.number()).optional(),
  "weight__n": z.array(z.number()).optional(),
  "weight_unit": z.enum(["g","kg","lb","oz"]).nullable().describe("* `kg` - Kilograms\n* `g` - Grams\n* `lb` - Pounds\n* `oz` - Ounces").optional(),
  "width": z.array(z.number().int()).describe("Rail-to-rail width").optional(),
  "width__ic": z.array(z.number().int()).describe("Rail-to-rail width").optional(),
  "width__ie": z.array(z.number().int()).describe("Rail-to-rail width").optional(),
  "width__iew": z.array(z.number().int()).describe("Rail-to-rail width").optional(),
  "width__isw": z.array(z.number().int()).describe("Rail-to-rail width").optional(),
  "width__n": z.array(z.number().int()).describe("Rail-to-rail width").optional(),
  "width__nic": z.array(z.number().int()).describe("Rail-to-rail width").optional(),
  "width__nie": z.array(z.number().int()).describe("Rail-to-rail width").optional(),
  "width__niew": z.array(z.number().int()).describe("Rail-to-rail width").optional(),
  "width__nisw": z.array(z.number().int()).describe("Rail-to-rail width").optional()
}