import { z } from "zod"

export const inputParamsSchema = {
  "asset_tag": z.array(z.string()).optional(),
  "asset_tag__empty": z.boolean().optional(),
  "asset_tag__ic": z.array(z.string()).optional(),
  "asset_tag__ie": z.array(z.string()).optional(),
  "asset_tag__iew": z.array(z.string()).optional(),
  "asset_tag__isw": z.array(z.string()).optional(),
  "asset_tag__n": z.array(z.string()).optional(),
  "asset_tag__nic": z.array(z.string()).optional(),
  "asset_tag__nie": z.array(z.string()).optional(),
  "asset_tag__niew": z.array(z.string()).optional(),
  "asset_tag__nisw": z.array(z.string()).optional(),
  "component_id": z.array(z.number().int()).optional(),
  "component_id__empty": z.array(z.number().int()).optional(),
  "component_id__gt": z.array(z.number().int()).optional(),
  "component_id__gte": z.array(z.number().int()).optional(),
  "component_id__lt": z.array(z.number().int()).optional(),
  "component_id__lte": z.array(z.number().int()).optional(),
  "component_id__n": z.array(z.number().int()).optional(),
  "component_type": z.string().optional(),
  "component_type__n": z.string().optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "device": z.array(z.string().nullable()).describe("Device (name)").optional(),
  "device__n": z.array(z.string().nullable()).describe("Device (name)").optional(),
  "device_id": z.array(z.number().int()).describe("Device (ID)").optional(),
  "device_id__n": z.array(z.number().int()).describe("Device (ID)").optional(),
  "device_role": z.array(z.string()).describe("Device role (slug)").optional(),
  "device_role__n": z.array(z.string()).describe("Device role (slug)").optional(),
  "device_role_id": z.array(z.number().int()).describe("Device role (ID)").optional(),
  "device_role_id__n": z.array(z.number().int()).describe("Device role (ID)").optional(),
  "device_status": z.array(z.string()).optional(),
  "device_status__empty": z.boolean().optional(),
  "device_status__ic": z.array(z.string()).optional(),
  "device_status__ie": z.array(z.string()).optional(),
  "device_status__iew": z.array(z.string()).optional(),
  "device_status__isw": z.array(z.string()).optional(),
  "device_status__n": z.array(z.string()).optional(),
  "device_status__nic": z.array(z.string()).optional(),
  "device_status__nie": z.array(z.string()).optional(),
  "device_status__niew": z.array(z.string()).optional(),
  "device_status__nisw": z.array(z.string()).optional(),
  "device_type": z.array(z.string()).describe("Device type (model)").optional(),
  "device_type__n": z.array(z.string()).describe("Device type (model)").optional(),
  "device_type_id": z.array(z.number().int()).describe("Device type (ID)").optional(),
  "device_type_id__n": z.array(z.number().int()).describe("Device type (ID)").optional(),
  "discovered": z.boolean().optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "label": z.array(z.string()).optional(),
  "label__empty": z.boolean().optional(),
  "label__ic": z.array(z.string()).optional(),
  "label__ie": z.array(z.string()).optional(),
  "label__iew": z.array(z.string()).optional(),
  "label__isw": z.array(z.string()).optional(),
  "label__n": z.array(z.string()).optional(),
  "label__nic": z.array(z.string()).optional(),
  "label__nie": z.array(z.string()).optional(),
  "label__niew": z.array(z.string()).optional(),
  "label__nisw": z.array(z.string()).optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "location": z.array(z.string()).describe("Location (slug)").optional(),
  "location__n": z.array(z.string()).describe("Location (slug)").optional(),
  "location_id": z.array(z.number().int()).describe("Location (ID)").optional(),
  "location_id__n": z.array(z.number().int()).describe("Location (ID)").optional(),
  "manufacturer": z.array(z.string()).describe("Manufacturer (slug)").optional(),
  "manufacturer__n": z.array(z.string()).describe("Manufacturer (slug)").optional(),
  "manufacturer_id": z.array(z.number().int().nullable()).describe("Manufacturer (ID)").optional(),
  "manufacturer_id__n": z.array(z.number().int().nullable()).describe("Manufacturer (ID)").optional(),
  "modified_by_request": z.string().uuid().optional(),
  "name": z.array(z.string()).optional(),
  "name__empty": z.boolean().optional(),
  "name__ic": z.array(z.string()).optional(),
  "name__ie": z.array(z.string()).optional(),
  "name__iew": z.array(z.string()).optional(),
  "name__isw": z.array(z.string()).optional(),
  "name__n": z.array(z.string()).optional(),
  "name__nic": z.array(z.string()).optional(),
  "name__nie": z.array(z.string()).optional(),
  "name__niew": z.array(z.string()).optional(),
  "name__nisw": z.array(z.string()).optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "parent_id": z.array(z.number().int().nullable()).describe("Parent inventory item (ID)").optional(),
  "parent_id__n": z.array(z.number().int().nullable()).describe("Parent inventory item (ID)").optional(),
  "part_id": z.array(z.string()).optional(),
  "part_id__empty": z.boolean().optional(),
  "part_id__ic": z.array(z.string()).optional(),
  "part_id__ie": z.array(z.string()).optional(),
  "part_id__iew": z.array(z.string()).optional(),
  "part_id__isw": z.array(z.string()).optional(),
  "part_id__n": z.array(z.string()).optional(),
  "part_id__nic": z.array(z.string()).optional(),
  "part_id__nie": z.array(z.string()).optional(),
  "part_id__niew": z.array(z.string()).optional(),
  "part_id__nisw": z.array(z.string()).optional(),
  "q": z.string().describe("Search").optional(),
  "rack": z.array(z.string()).describe("Rack (name)").optional(),
  "rack__n": z.array(z.string()).describe("Rack (name)").optional(),
  "rack_id": z.array(z.number().int()).describe("Rack (ID)").optional(),
  "rack_id__n": z.array(z.number().int()).describe("Rack (ID)").optional(),
  "region": z.array(z.string()).optional(),
  "region__n": z.array(z.string()).optional(),
  "region_id": z.array(z.string()).optional(),
  "region_id__n": z.array(z.string()).optional(),
  "role": z.array(z.string()).describe("Role (slug)").optional(),
  "role__n": z.array(z.string()).describe("Role (slug)").optional(),
  "role_id": z.array(z.number().int().nullable()).describe("Role (ID)").optional(),
  "role_id__n": z.array(z.number().int().nullable()).describe("Role (ID)").optional(),
  "serial": z.array(z.string()).optional(),
  "serial__empty": z.boolean().optional(),
  "serial__ic": z.array(z.string()).optional(),
  "serial__ie": z.array(z.string()).optional(),
  "serial__iew": z.array(z.string()).optional(),
  "serial__isw": z.array(z.string()).optional(),
  "serial__n": z.array(z.string()).optional(),
  "serial__nic": z.array(z.string()).optional(),
  "serial__nie": z.array(z.string()).optional(),
  "serial__niew": z.array(z.string()).optional(),
  "serial__nisw": z.array(z.string()).optional(),
  "site": z.array(z.string()).describe("Site name (slug)").optional(),
  "site__n": z.array(z.string()).describe("Site name (slug)").optional(),
  "site_group": z.array(z.string()).optional(),
  "site_group__n": z.array(z.string()).optional(),
  "site_group_id": z.array(z.string()).optional(),
  "site_group_id__n": z.array(z.string()).optional(),
  "site_id": z.array(z.number().int()).describe("Site (ID)").optional(),
  "site_id__n": z.array(z.number().int()).describe("Site (ID)").optional(),
  "status": z.array(z.string()).optional(),
  "status__empty": z.boolean().optional(),
  "status__ic": z.array(z.string()).optional(),
  "status__ie": z.array(z.string()).optional(),
  "status__iew": z.array(z.string()).optional(),
  "status__isw": z.array(z.string()).optional(),
  "status__n": z.array(z.string()).optional(),
  "status__nic": z.array(z.string()).optional(),
  "status__nie": z.array(z.string()).optional(),
  "status__niew": z.array(z.string()).optional(),
  "status__nisw": z.array(z.string()).optional(),
  "tag": z.array(z.string()).optional(),
  "tag__n": z.array(z.string()).optional(),
  "tag_id": z.array(z.number().int()).optional(),
  "tag_id__n": z.array(z.number().int()).optional(),
  "updated_by_request": z.string().uuid().optional(),
  "virtual_chassis": z.array(z.string()).describe("Virtual Chassis").optional(),
  "virtual_chassis__n": z.array(z.string()).describe("Virtual Chassis").optional(),
  "virtual_chassis_id": z.array(z.number().int()).describe("Virtual Chassis (ID)").optional(),
  "virtual_chassis_id__n": z.array(z.number().int()).describe("Virtual Chassis (ID)").optional()
}