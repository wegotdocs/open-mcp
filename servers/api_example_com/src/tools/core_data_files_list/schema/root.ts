import { z } from "zod"

export const inputParamsSchema = {
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "hash": z.array(z.string()).optional(),
  "hash__empty": z.boolean().optional(),
  "hash__ic": z.array(z.string()).optional(),
  "hash__ie": z.array(z.string()).optional(),
  "hash__iew": z.array(z.string()).optional(),
  "hash__isw": z.array(z.string()).optional(),
  "hash__n": z.array(z.string()).optional(),
  "hash__nic": z.array(z.string()).optional(),
  "hash__nie": z.array(z.string()).optional(),
  "hash__niew": z.array(z.string()).optional(),
  "hash__nisw": z.array(z.string()).optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "modified_by_request": z.string().uuid().optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "path": z.array(z.string()).optional(),
  "path__empty": z.boolean().optional(),
  "path__ic": z.array(z.string()).optional(),
  "path__ie": z.array(z.string()).optional(),
  "path__iew": z.array(z.string()).optional(),
  "path__isw": z.array(z.string()).optional(),
  "path__n": z.array(z.string()).optional(),
  "path__nic": z.array(z.string()).optional(),
  "path__nie": z.array(z.string()).optional(),
  "path__niew": z.array(z.string()).optional(),
  "path__nisw": z.array(z.string()).optional(),
  "q": z.string().optional(),
  "size": z.array(z.number().int()).optional(),
  "size__empty": z.boolean().optional(),
  "size__gt": z.array(z.number().int()).optional(),
  "size__gte": z.array(z.number().int()).optional(),
  "size__lt": z.array(z.number().int()).optional(),
  "size__lte": z.array(z.number().int()).optional(),
  "size__n": z.array(z.number().int()).optional(),
  "source": z.array(z.string()).describe("Data source (name)").optional(),
  "source__n": z.array(z.string()).describe("Data source (name)").optional(),
  "source_id": z.array(z.number().int()).describe("Data source (ID)").optional(),
  "source_id__n": z.array(z.number().int()).describe("Data source (ID)").optional(),
  "updated_by_request": z.string().uuid().optional()
}