import { z } from "zod"

export const inputParamsSchema = {
  "amperage": z.array(z.number().int()).optional(),
  "amperage__empty": z.boolean().optional(),
  "amperage__gt": z.array(z.number().int()).optional(),
  "amperage__gte": z.array(z.number().int()).optional(),
  "amperage__lt": z.array(z.number().int()).optional(),
  "amperage__lte": z.array(z.number().int()).optional(),
  "amperage__n": z.array(z.number().int()).optional(),
  "available_power": z.array(z.number().int()).optional(),
  "available_power__empty": z.boolean().optional(),
  "available_power__gt": z.array(z.number().int()).optional(),
  "available_power__gte": z.array(z.number().int()).optional(),
  "available_power__lt": z.array(z.number().int()).optional(),
  "available_power__lte": z.array(z.number().int()).optional(),
  "available_power__n": z.array(z.number().int()).optional(),
  "cable_end": z.enum(["A","B"]).nullable().describe("* `A` - A\n* `B` - B").optional(),
  "cable_id": z.array(z.number().int().nullable()).describe("Cable (ID)").optional(),
  "cable_id__n": z.array(z.number().int().nullable()).describe("Cable (ID)").optional(),
  "cabled": z.boolean().optional(),
  "connected": z.boolean().optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "mark_connected": z.boolean().optional(),
  "max_utilization": z.array(z.number().int()).optional(),
  "max_utilization__empty": z.boolean().optional(),
  "max_utilization__gt": z.array(z.number().int()).optional(),
  "max_utilization__gte": z.array(z.number().int()).optional(),
  "max_utilization__lt": z.array(z.number().int()).optional(),
  "max_utilization__lte": z.array(z.number().int()).optional(),
  "max_utilization__n": z.array(z.number().int()).optional(),
  "modified_by_request": z.string().uuid().optional(),
  "name": z.array(z.string()).optional(),
  "name__empty": z.boolean().optional(),
  "name__ic": z.array(z.string()).optional(),
  "name__ie": z.array(z.string()).optional(),
  "name__iew": z.array(z.string()).optional(),
  "name__isw": z.array(z.string()).optional(),
  "name__n": z.array(z.string()).optional(),
  "name__nic": z.array(z.string()).optional(),
  "name__nie": z.array(z.string()).optional(),
  "name__niew": z.array(z.string()).optional(),
  "name__nisw": z.array(z.string()).optional(),
  "occupied": z.boolean().optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "phase": z.enum(["single-phase","three-phase"]).describe("* `single-phase` - Single phase\n* `three-phase` - Three-phase").optional(),
  "power_panel_id": z.array(z.number().int()).describe("Power panel (ID)").optional(),
  "power_panel_id__n": z.array(z.number().int()).describe("Power panel (ID)").optional(),
  "q": z.string().describe("Search").optional(),
  "rack_id": z.array(z.number().int()).describe("Rack (ID)").optional(),
  "rack_id__n": z.array(z.number().int()).describe("Rack (ID)").optional(),
  "region": z.array(z.string()).optional(),
  "region__n": z.array(z.string()).optional(),
  "region_id": z.array(z.string()).optional(),
  "region_id__n": z.array(z.string()).optional(),
  "site": z.array(z.string()).describe("Site name (slug)").optional(),
  "site__n": z.array(z.string()).describe("Site name (slug)").optional(),
  "site_group": z.array(z.string()).optional(),
  "site_group__n": z.array(z.string()).optional(),
  "site_group_id": z.array(z.string()).optional(),
  "site_group_id__n": z.array(z.string()).optional(),
  "site_id": z.array(z.number().int()).describe("Site (ID)").optional(),
  "site_id__n": z.array(z.number().int()).describe("Site (ID)").optional(),
  "status": z.array(z.string()).optional(),
  "status__empty": z.boolean().optional(),
  "status__ic": z.array(z.string()).optional(),
  "status__ie": z.array(z.string()).optional(),
  "status__iew": z.array(z.string()).optional(),
  "status__isw": z.array(z.string()).optional(),
  "status__n": z.array(z.string()).optional(),
  "status__nic": z.array(z.string()).optional(),
  "status__nie": z.array(z.string()).optional(),
  "status__niew": z.array(z.string()).optional(),
  "status__nisw": z.array(z.string()).optional(),
  "supply": z.enum(["ac","dc"]).describe("* `ac` - AC\n* `dc` - DC").optional(),
  "tag": z.array(z.string()).optional(),
  "tag__n": z.array(z.string()).optional(),
  "tag_id": z.array(z.number().int()).optional(),
  "tag_id__n": z.array(z.number().int()).optional(),
  "tenant": z.array(z.string()).describe("Tenant (slug)").optional(),
  "tenant__n": z.array(z.string()).describe("Tenant (slug)").optional(),
  "tenant_group": z.array(z.string()).optional(),
  "tenant_group__n": z.array(z.string()).optional(),
  "tenant_group_id": z.array(z.string()).optional(),
  "tenant_group_id__n": z.array(z.string()).optional(),
  "tenant_id": z.array(z.number().int().nullable()).describe("Tenant (ID)").optional(),
  "tenant_id__n": z.array(z.number().int().nullable()).describe("Tenant (ID)").optional(),
  "type": z.enum(["primary","redundant"]).describe("* `primary` - Primary\n* `redundant` - Redundant").optional(),
  "updated_by_request": z.string().uuid().optional(),
  "voltage": z.array(z.number().int()).optional(),
  "voltage__empty": z.boolean().optional(),
  "voltage__gt": z.array(z.number().int()).optional(),
  "voltage__gte": z.array(z.number().int()).optional(),
  "voltage__lt": z.array(z.number().int()).optional(),
  "voltage__lte": z.array(z.number().int()).optional(),
  "voltage__n": z.array(z.number().int()).optional()
}