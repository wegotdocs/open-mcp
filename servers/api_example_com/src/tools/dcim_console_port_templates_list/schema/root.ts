import { z } from "zod"

export const inputParamsSchema = {
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "device_type_id": z.array(z.number().int().nullable()).describe("Device type (ID)").optional(),
  "device_type_id__n": z.array(z.number().int().nullable()).describe("Device type (ID)").optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "label": z.array(z.string()).optional(),
  "label__empty": z.boolean().optional(),
  "label__ic": z.array(z.string()).optional(),
  "label__ie": z.array(z.string()).optional(),
  "label__iew": z.array(z.string()).optional(),
  "label__isw": z.array(z.string()).optional(),
  "label__n": z.array(z.string()).optional(),
  "label__nic": z.array(z.string()).optional(),
  "label__nie": z.array(z.string()).optional(),
  "label__niew": z.array(z.string()).optional(),
  "label__nisw": z.array(z.string()).optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "modified_by_request": z.string().uuid().optional(),
  "module_type_id": z.array(z.number().int().nullable()).describe("Module type (ID)").optional(),
  "module_type_id__n": z.array(z.number().int().nullable()).describe("Module type (ID)").optional(),
  "name": z.array(z.string()).optional(),
  "name__empty": z.boolean().optional(),
  "name__ic": z.array(z.string()).optional(),
  "name__ie": z.array(z.string()).optional(),
  "name__iew": z.array(z.string()).optional(),
  "name__isw": z.array(z.string()).optional(),
  "name__n": z.array(z.string()).optional(),
  "name__nic": z.array(z.string()).optional(),
  "name__nie": z.array(z.string()).optional(),
  "name__niew": z.array(z.string()).optional(),
  "name__nisw": z.array(z.string()).optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "q": z.string().describe("Search").optional(),
  "type": z.enum(["Other","Serial","USB"]).nullable().describe("* `Serial` - [('de-9', 'DE-9'), ('db-25', 'DB-25'), ('rj-11', 'RJ-11'), ('rj-12', 'RJ-12'), ('rj-45', 'RJ-45'), ('mini-din-8', 'Mini-DIN 8')]\n* `USB` - [('usb-a', 'USB Type A'), ('usb-b', 'USB Type B'), ('usb-c', 'USB Type C'), ('usb-mini-a', 'USB Mini A'), ('usb-mini-b', 'USB Mini B'), ('usb-micro-a', 'USB Micro A'), ('usb-micro-b', 'USB Micro B'), ('usb-micro-ab', 'USB Micro AB')]\n* `Other` - [('other', 'Other')]").optional(),
  "updated_by_request": z.string().uuid().optional()
}