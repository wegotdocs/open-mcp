import { z } from "zod"

export const inputParamsSchema = {
  "circuittermination_id": z.array(z.number().int()).optional(),
  "color": z.array(z.string()).optional(),
  "color__empty": z.boolean().optional(),
  "color__ic": z.array(z.string()).optional(),
  "color__ie": z.array(z.string()).optional(),
  "color__iew": z.array(z.string()).optional(),
  "color__isw": z.array(z.string()).optional(),
  "color__n": z.array(z.string()).optional(),
  "color__nic": z.array(z.string()).optional(),
  "color__nie": z.array(z.string()).optional(),
  "color__niew": z.array(z.string()).optional(),
  "color__nisw": z.array(z.string()).optional(),
  "consoleport_id": z.array(z.number().int()).optional(),
  "consoleserverport_id": z.array(z.number().int()).optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "device": z.array(z.string()).optional(),
  "device_id": z.array(z.number().int()).optional(),
  "frontport_id": z.array(z.number().int()).optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "interface_id": z.array(z.number().int()).optional(),
  "label": z.array(z.string()).optional(),
  "label__empty": z.boolean().optional(),
  "label__ic": z.array(z.string()).optional(),
  "label__ie": z.array(z.string()).optional(),
  "label__iew": z.array(z.string()).optional(),
  "label__isw": z.array(z.string()).optional(),
  "label__n": z.array(z.string()).optional(),
  "label__nic": z.array(z.string()).optional(),
  "label__nie": z.array(z.string()).optional(),
  "label__niew": z.array(z.string()).optional(),
  "label__nisw": z.array(z.string()).optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "length": z.array(z.number()).optional(),
  "length__empty": z.boolean().optional(),
  "length__gt": z.array(z.number()).optional(),
  "length__gte": z.array(z.number()).optional(),
  "length__lt": z.array(z.number()).optional(),
  "length__lte": z.array(z.number()).optional(),
  "length__n": z.array(z.number()).optional(),
  "length_unit": z.enum(["cm","ft","in","km","m","mi"]).nullable().describe("* `km` - Kilometers\n* `m` - Meters\n* `cm` - Centimeters\n* `mi` - Miles\n* `ft` - Feet\n* `in` - Inches").optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "location": z.array(z.string()).optional(),
  "location_id": z.array(z.number().int()).optional(),
  "modified_by_request": z.string().uuid().optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "powerfeed_id": z.array(z.number().int()).optional(),
  "poweroutlet_id": z.array(z.number().int()).optional(),
  "powerport_id": z.array(z.number().int()).optional(),
  "q": z.string().describe("Search").optional(),
  "rack": z.array(z.string()).optional(),
  "rack_id": z.array(z.number().int()).optional(),
  "rearport_id": z.array(z.number().int()).optional(),
  "site": z.array(z.string()).optional(),
  "site_id": z.array(z.number().int()).optional(),
  "status": z.array(z.string()).optional(),
  "status__empty": z.boolean().optional(),
  "status__ic": z.array(z.string()).optional(),
  "status__ie": z.array(z.string()).optional(),
  "status__iew": z.array(z.string()).optional(),
  "status__isw": z.array(z.string()).optional(),
  "status__n": z.array(z.string()).optional(),
  "status__nic": z.array(z.string()).optional(),
  "status__nie": z.array(z.string()).optional(),
  "status__niew": z.array(z.string()).optional(),
  "status__nisw": z.array(z.string()).optional(),
  "tag": z.array(z.string()).optional(),
  "tag__n": z.array(z.string()).optional(),
  "tag_id": z.array(z.number().int()).optional(),
  "tag_id__n": z.array(z.number().int()).optional(),
  "tenant": z.array(z.string()).describe("Tenant (slug)").optional(),
  "tenant__n": z.array(z.string()).describe("Tenant (slug)").optional(),
  "tenant_group": z.array(z.string()).optional(),
  "tenant_group__n": z.array(z.string()).optional(),
  "tenant_group_id": z.array(z.string()).optional(),
  "tenant_group_id__n": z.array(z.string()).optional(),
  "tenant_id": z.array(z.number().int().nullable()).describe("Tenant (ID)").optional(),
  "tenant_id__n": z.array(z.number().int().nullable()).describe("Tenant (ID)").optional(),
  "termination_a_id": z.array(z.number().int()).optional(),
  "termination_a_type": z.string().optional(),
  "termination_a_type__n": z.string().optional(),
  "termination_b_id": z.array(z.number().int()).optional(),
  "termination_b_type": z.string().optional(),
  "termination_b_type__n": z.string().optional(),
  "type": z.array(z.string().nullable()).optional(),
  "type__empty": z.boolean().optional(),
  "type__ic": z.array(z.string().nullable()).optional(),
  "type__ie": z.array(z.string().nullable()).optional(),
  "type__iew": z.array(z.string().nullable()).optional(),
  "type__isw": z.array(z.string().nullable()).optional(),
  "type__n": z.array(z.string().nullable()).optional(),
  "type__nic": z.array(z.string().nullable()).optional(),
  "type__nie": z.array(z.string().nullable()).optional(),
  "type__niew": z.array(z.string().nullable()).optional(),
  "type__nisw": z.array(z.string().nullable()).optional(),
  "unterminated": z.boolean().describe("Unterminated").optional(),
  "updated_by_request": z.string().uuid().optional()
}