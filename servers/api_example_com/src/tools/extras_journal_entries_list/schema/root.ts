import { z } from "zod"

export const inputParamsSchema = {
  "assigned_object_id": z.array(z.number().int()).optional(),
  "assigned_object_id__empty": z.boolean().optional(),
  "assigned_object_id__gt": z.array(z.number().int()).optional(),
  "assigned_object_id__gte": z.array(z.number().int()).optional(),
  "assigned_object_id__lt": z.array(z.number().int()).optional(),
  "assigned_object_id__lte": z.array(z.number().int()).optional(),
  "assigned_object_id__n": z.array(z.number().int()).optional(),
  "assigned_object_type": z.string().optional(),
  "assigned_object_type__n": z.string().optional(),
  "assigned_object_type_id": z.array(z.number().int()).optional(),
  "assigned_object_type_id__n": z.array(z.number().int()).optional(),
  "created_after": z.string().datetime({ offset: true }).optional(),
  "created_before": z.string().datetime({ offset: true }).optional(),
  "created_by": z.array(z.string()).describe("User (name)").optional(),
  "created_by__n": z.array(z.string()).describe("User (name)").optional(),
  "created_by_id": z.array(z.number().int().nullable()).describe("User (ID)").optional(),
  "created_by_id__n": z.array(z.number().int().nullable()).describe("User (ID)").optional(),
  "created_by_request": z.string().uuid().optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "kind": z.array(z.string()).optional(),
  "kind__empty": z.boolean().optional(),
  "kind__ic": z.array(z.string()).optional(),
  "kind__ie": z.array(z.string()).optional(),
  "kind__iew": z.array(z.string()).optional(),
  "kind__isw": z.array(z.string()).optional(),
  "kind__n": z.array(z.string()).optional(),
  "kind__nic": z.array(z.string()).optional(),
  "kind__nie": z.array(z.string()).optional(),
  "kind__niew": z.array(z.string()).optional(),
  "kind__nisw": z.array(z.string()).optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "modified_by_request": z.string().uuid().optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "q": z.string().describe("Search").optional(),
  "tag": z.array(z.string()).optional(),
  "tag__n": z.array(z.string()).optional(),
  "tag_id": z.array(z.number().int()).optional(),
  "tag_id__n": z.array(z.number().int()).optional(),
  "updated_by_request": z.string().uuid().optional()
}