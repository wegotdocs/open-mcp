import { z } from "zod"

export const inputParamsSchema = {
  "prog_id": z.number().int(),
  "rename_only": z.union([z.number().int(), z.null()]).describe("Rename only? Empty / 0: No, Any / 1: Yes").optional(),
  "session_id": z.string().optional(),
  "name": z.string(),
  "display_name": z.union([z.string(), z.null()]).optional(),
  "description": z.union([z.string(), z.null()]).optional(),
  "back_color": z.union([z.string(), z.null()]).describe("#RGBA. Ex: #AABBCCFF").optional(),
  "back_media_id": z.union([z.number().int(), z.null()]).optional(),
  "width": z.union([z.number().int(), z.null()]).describe("Pixels.").optional(),
  "height": z.union([z.number().int(), z.null()]).describe("Pixels.").optional(),
  "duration": z.union([z.number().int(), z.null()]).describe("Seconds. Null/0: According to estimated_duration, -1: Eternal").optional(),
  "monitor_list": z.union([z.array(z.object({ "id": z.union([z.number().int(), z.null()]).describe("Provide id when updating.").optional(), "name": z.union([z.string(), z.null()]).optional(), "index": z.union([z.number().int(), z.null()]).optional(), "left": z.number().int(), "top": z.number().int(), "width": z.number().int(), "height": z.number().int(), "canvas_left": z.number().int(), "canvas_top": z.number().int() })), z.null()]).describe("Monitor list.").optional(),
  "block_list": z.union([z.array(z.object({ "id": z.union([z.number().int(), z.null()]).describe("Provide id when updating.").optional(), "name": z.union([z.string(), z.null()]).optional(), "index": z.union([z.number().int(), z.null()]).optional(), "left": z.number().int(), "top": z.number().int(), "width": z.number().int(), "height": z.number().int(), "canvas_left": z.number().int(), "canvas_top": z.number().int(), "block_type_id": z.number().int(), "primary": z.union([z.boolean(), z.null()]).optional(), "zindex": z.number().int(), "locked": z.union([z.boolean(), z.null()]).optional(), "disabled": z.union([z.boolean(), z.null()]).optional(), "hidden": z.union([z.boolean(), z.null()]).optional(), "group_name": z.union([z.string(), z.null()]).optional(), "table_name": z.union([z.string(), z.null()]).optional(), "multi_playlist": z.union([z.boolean(), z.null()]).optional(), "style_id": z.union([z.number().int(), z.null()]).optional(), "default_style": z.union([z.string(), z.null()]).optional(), "media_id": z.union([z.number().int(), z.null()]).optional(), "mirror_block_index": z.union([z.number().int(), z.null()]).optional(), "content": z.union([z.string(), z.null()]).optional(), "content_source": z.union([z.string(), z.null()]).optional(), "extra_content": z.union([z.record(z.any()), z.null()]).optional(), "argument": z.union([z.record(z.any()), z.null()]).optional(), "fore_color": z.union([z.string(), z.null()]).describe("#RGBA. Ex: #AABBCCFF").optional(), "back_color": z.union([z.string(), z.null()]).describe("#RGBA. Ex: #AABBCCFF").optional(), "font_prop": z.union([z.record(z.any()), z.null()]).optional(), "stretch": z.union([z.number().int(), z.null()]).optional(), "scale": z.union([z.number().int(), z.null()]).optional(), "interactive": z.union([z.boolean(), z.null()]).optional(), "volume": z.union([z.number().int(), z.null()]).optional(), "vertical_align": z.union([z.number().int(), z.null()]).describe("0: Top, 1: Middle, 2: Bottom").optional(), "horizontal_align": z.union([z.number().int(), z.null()]).describe("0: Left, 1: Middle, 2: Right").optional(), "margin": z.union([z.array(z.number().int()), z.null()]).describe("[Top, Right, Bottom, Left]").optional(), "padding": z.union([z.array(z.number().int()), z.null()]).describe("[Top, Right, Bottom, Left]").optional(), "border_prop": z.union([z.record(z.any()), z.null()]).optional(), "playlist_list": z.union([z.array(z.object({ "id": z.union([z.number().int(), z.null()]).describe("Only on update.").optional(), "name": z.union([z.string(), z.null()]).optional(), "index": z.union([z.number().int(), z.null()]).optional(), "default": z.union([z.boolean(), z.null()]).optional(), "disabled": z.union([z.boolean(), z.null()]).optional(), "playitem_list": z.union([z.array(z.object({ "id": z.union([z.number().int(), z.null()]).describe("更新時才需要提供。").optional(), "name": z.union([z.string(), z.null()]).describe("播放項目名稱。").optional(), "index": z.number().int().describe("播放項目索引。"), "media_id": z.number().int().describe("媒體 ID。"), "duration": z.union([z.number().int(), z.null()]).describe("Seconds. -1: Forever, Null/0: According to the media").optional(), "left": z.union([z.number().int(), z.null()]).describe("(預留) 左座標 (px)。").optional(), "top": z.union([z.number().int(), z.null()]).describe("(預留) 上座標 (px)。").optional(), "width": z.union([z.number().int(), z.null()]).describe("(預留) 寬 (px)。").optional(), "height": z.union([z.number().int(), z.null()]).describe("(預留) 高 (px)。").optional(), "stretch": z.union([z.number().int(), z.null()]).describe("Null/0/1: Fill, 2: Uniform").optional(), "scale": z.union([z.number().int(), z.null()]).describe("%. Null: 100%").optional(), "interactive": z.union([z.boolean(), z.null()]).optional(), "volume": z.union([z.number().int(), z.null()]).describe("0/100").optional(), "speed": z.union([z.number().int(), z.null()]).optional(), "effect": z.union([z.number().int(), z.null()]).describe("Null/0: None, 1: Upward, 2: Downward, 3: Leftward, 4: Rightward, 5: Fade-in").optional(), "effect_prop": z.union([z.record(z.any()), z.null()]).describe("(預留) 特效參數。").optional() })), z.null()]).optional() })), z.null()]).optional() })), z.null()]).describe("Block list.").optional(),
  "progitem_list": z.union([z.array(z.object({ "index": z.union([z.number().int(), z.null()]).optional(), "subprog_id": z.union([z.number().int(), z.null()]).optional(), "duration": z.union([z.number().int(), z.null()]).describe("Seconds. Null/0: According to the sub-program duration, -1: Eternal").optional() })), z.null()]).describe("Program item list.").optional(),
  "interact_list": z.union([z.array(z.object({ "index": z.union([z.number().int(), z.null()]).optional(), "when_type": z.union([z.string(), z.null()]).describe("signage, prog or block.").optional(), "when_args": z.union([z.record(z.any()), z.null()]).optional(), "when_prog_id": z.union([z.number().int(), z.null()]).optional(), "when_block_id": z.union([z.number().int(), z.null()]).optional(), "on_type": z.union([z.string(), z.null()]).optional(), "on_event": z.union([z.string(), z.null()]).describe("builtin.user_interacted, builtin.idle_timeout, PM2.5, CO2...").optional(), "on_args": z.union([z.record(z.any()), z.null()]).optional(), "then_type": z.union([z.string(), z.null()]).describe("signage or block.").optional(), "then_args": z.union([z.record(z.any()), z.null()]).optional(), "then_block_id": z.union([z.number().int(), z.null()]).optional(), "do_action": z.union([z.string(), z.null()]).optional(), "do_args": z.union([z.record(z.any()), z.null()]).optional(), "do_prog_id": z.union([z.number().int(), z.null()]).optional(), "do_playlist_id": z.union([z.number().int(), z.null()]).optional() })), z.null()]).describe("Interaction list.").optional()
}