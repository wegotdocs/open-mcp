import { z } from "zod"

export const inputParamsSchema = {
  "auth_key": z.array(z.string()).optional(),
  "auth_key__empty": z.boolean().optional(),
  "auth_key__ic": z.array(z.string()).optional(),
  "auth_key__ie": z.array(z.string()).optional(),
  "auth_key__iew": z.array(z.string()).optional(),
  "auth_key__isw": z.array(z.string()).optional(),
  "auth_key__n": z.array(z.string()).optional(),
  "auth_key__nic": z.array(z.string()).optional(),
  "auth_key__nie": z.array(z.string()).optional(),
  "auth_key__niew": z.array(z.string()).optional(),
  "auth_key__nisw": z.array(z.string()).optional(),
  "auth_type": z.array(z.string().nullable()).optional(),
  "auth_type__empty": z.boolean().optional(),
  "auth_type__ic": z.array(z.string().nullable()).optional(),
  "auth_type__ie": z.array(z.string().nullable()).optional(),
  "auth_type__iew": z.array(z.string().nullable()).optional(),
  "auth_type__isw": z.array(z.string().nullable()).optional(),
  "auth_type__n": z.array(z.string().nullable()).optional(),
  "auth_type__nic": z.array(z.string().nullable()).optional(),
  "auth_type__nie": z.array(z.string().nullable()).optional(),
  "auth_type__niew": z.array(z.string().nullable()).optional(),
  "auth_type__nisw": z.array(z.string().nullable()).optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "group_id": z.array(z.number().int()).optional(),
  "group_id__empty": z.boolean().optional(),
  "group_id__gt": z.array(z.number().int()).optional(),
  "group_id__gte": z.array(z.number().int()).optional(),
  "group_id__lt": z.array(z.number().int()).optional(),
  "group_id__lte": z.array(z.number().int()).optional(),
  "group_id__n": z.array(z.number().int()).optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "modified_by_request": z.string().uuid().optional(),
  "name": z.array(z.string()).optional(),
  "name__empty": z.boolean().optional(),
  "name__ic": z.array(z.string()).optional(),
  "name__ie": z.array(z.string()).optional(),
  "name__iew": z.array(z.string()).optional(),
  "name__isw": z.array(z.string()).optional(),
  "name__n": z.array(z.string()).optional(),
  "name__nic": z.array(z.string()).optional(),
  "name__nie": z.array(z.string()).optional(),
  "name__niew": z.array(z.string()).optional(),
  "name__nisw": z.array(z.string()).optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "protocol": z.array(z.string()).optional(),
  "protocol__empty": z.boolean().optional(),
  "protocol__ic": z.array(z.string()).optional(),
  "protocol__ie": z.array(z.string()).optional(),
  "protocol__iew": z.array(z.string()).optional(),
  "protocol__isw": z.array(z.string()).optional(),
  "protocol__n": z.array(z.string()).optional(),
  "protocol__nic": z.array(z.string()).optional(),
  "protocol__nie": z.array(z.string()).optional(),
  "protocol__niew": z.array(z.string()).optional(),
  "protocol__nisw": z.array(z.string()).optional(),
  "q": z.string().describe("Search").optional(),
  "related_ip": z.array(z.string()).optional(),
  "tag": z.array(z.string()).optional(),
  "tag__n": z.array(z.string()).optional(),
  "tag_id": z.array(z.number().int()).optional(),
  "tag_id__n": z.array(z.number().int()).optional(),
  "updated_by_request": z.string().uuid().optional()
}