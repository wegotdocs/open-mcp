import { z } from "zod"

export const inputParamsSchema = {
  "cable_end": z.enum(["A","B"]).nullable().describe("* `A` - A\n* `B` - B").optional(),
  "cable_id": z.array(z.number().int().nullable()).describe("Cable (ID)").optional(),
  "cable_id__n": z.array(z.number().int().nullable()).describe("Cable (ID)").optional(),
  "cabled": z.boolean().optional(),
  "connected": z.boolean().optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "device": z.array(z.string().nullable()).describe("Device (name)").optional(),
  "device__n": z.array(z.string().nullable()).describe("Device (name)").optional(),
  "device_id": z.array(z.number().int()).describe("Device (ID)").optional(),
  "device_id__n": z.array(z.number().int()).describe("Device (ID)").optional(),
  "device_role": z.array(z.string()).describe("Device role (slug)").optional(),
  "device_role__n": z.array(z.string()).describe("Device role (slug)").optional(),
  "device_role_id": z.array(z.number().int()).describe("Device role (ID)").optional(),
  "device_role_id__n": z.array(z.number().int()).describe("Device role (ID)").optional(),
  "device_status": z.array(z.string()).optional(),
  "device_status__empty": z.boolean().optional(),
  "device_status__ic": z.array(z.string()).optional(),
  "device_status__ie": z.array(z.string()).optional(),
  "device_status__iew": z.array(z.string()).optional(),
  "device_status__isw": z.array(z.string()).optional(),
  "device_status__n": z.array(z.string()).optional(),
  "device_status__nic": z.array(z.string()).optional(),
  "device_status__nie": z.array(z.string()).optional(),
  "device_status__niew": z.array(z.string()).optional(),
  "device_status__nisw": z.array(z.string()).optional(),
  "device_type": z.array(z.string()).describe("Device type (model)").optional(),
  "device_type__n": z.array(z.string()).describe("Device type (model)").optional(),
  "device_type_id": z.array(z.number().int()).describe("Device type (ID)").optional(),
  "device_type_id__n": z.array(z.number().int()).describe("Device type (ID)").optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "label": z.array(z.string()).optional(),
  "label__empty": z.boolean().optional(),
  "label__ic": z.array(z.string()).optional(),
  "label__ie": z.array(z.string()).optional(),
  "label__iew": z.array(z.string()).optional(),
  "label__isw": z.array(z.string()).optional(),
  "label__n": z.array(z.string()).optional(),
  "label__nic": z.array(z.string()).optional(),
  "label__nie": z.array(z.string()).optional(),
  "label__niew": z.array(z.string()).optional(),
  "label__nisw": z.array(z.string()).optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "location": z.array(z.string()).describe("Location (slug)").optional(),
  "location__n": z.array(z.string()).describe("Location (slug)").optional(),
  "location_id": z.array(z.number().int()).describe("Location (ID)").optional(),
  "location_id__n": z.array(z.number().int()).describe("Location (ID)").optional(),
  "mark_connected": z.boolean().optional(),
  "modified_by_request": z.string().uuid().optional(),
  "module_id": z.array(z.number().int().nullable()).describe("Module (ID)").optional(),
  "module_id__n": z.array(z.number().int().nullable()).describe("Module (ID)").optional(),
  "name": z.array(z.string()).optional(),
  "name__empty": z.boolean().optional(),
  "name__ic": z.array(z.string()).optional(),
  "name__ie": z.array(z.string()).optional(),
  "name__iew": z.array(z.string()).optional(),
  "name__isw": z.array(z.string()).optional(),
  "name__n": z.array(z.string()).optional(),
  "name__nic": z.array(z.string()).optional(),
  "name__nie": z.array(z.string()).optional(),
  "name__niew": z.array(z.string()).optional(),
  "name__nisw": z.array(z.string()).optional(),
  "occupied": z.boolean().optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "q": z.string().describe("Search").optional(),
  "rack": z.array(z.string()).describe("Rack (name)").optional(),
  "rack__n": z.array(z.string()).describe("Rack (name)").optional(),
  "rack_id": z.array(z.number().int()).describe("Rack (ID)").optional(),
  "rack_id__n": z.array(z.number().int()).describe("Rack (ID)").optional(),
  "region": z.array(z.string()).optional(),
  "region__n": z.array(z.string()).optional(),
  "region_id": z.array(z.string()).optional(),
  "region_id__n": z.array(z.string()).optional(),
  "site": z.array(z.string()).describe("Site name (slug)").optional(),
  "site__n": z.array(z.string()).describe("Site name (slug)").optional(),
  "site_group": z.array(z.string()).optional(),
  "site_group__n": z.array(z.string()).optional(),
  "site_group_id": z.array(z.string()).optional(),
  "site_group_id__n": z.array(z.string()).optional(),
  "site_id": z.array(z.number().int()).describe("Site (ID)").optional(),
  "site_id__n": z.array(z.number().int()).describe("Site (ID)").optional(),
  "speed": z.union([z.literal(115200), z.literal(1200), z.literal(19200), z.literal(2400), z.literal(38400), z.literal(4800), z.literal(57600), z.literal(9600)]).nullable().describe("Port speed in bits per second\n\n* `1200` - 1200 bps\n* `2400` - 2400 bps\n* `4800` - 4800 bps\n* `9600` - 9600 bps\n* `19200` - 19.2 kbps\n* `38400` - 38.4 kbps\n* `57600` - 57.6 kbps\n* `115200` - 115.2 kbps").optional(),
  "tag": z.array(z.string()).optional(),
  "tag__n": z.array(z.string()).optional(),
  "tag_id": z.array(z.number().int()).optional(),
  "tag_id__n": z.array(z.number().int()).optional(),
  "type": z.array(z.string().nullable()).describe("Physical port type").optional(),
  "type__empty": z.boolean().optional(),
  "type__ic": z.array(z.string().nullable()).describe("Physical port type").optional(),
  "type__ie": z.array(z.string().nullable()).describe("Physical port type").optional(),
  "type__iew": z.array(z.string().nullable()).describe("Physical port type").optional(),
  "type__isw": z.array(z.string().nullable()).describe("Physical port type").optional(),
  "type__n": z.array(z.string().nullable()).describe("Physical port type").optional(),
  "type__nic": z.array(z.string().nullable()).describe("Physical port type").optional(),
  "type__nie": z.array(z.string().nullable()).describe("Physical port type").optional(),
  "type__niew": z.array(z.string().nullable()).describe("Physical port type").optional(),
  "type__nisw": z.array(z.string().nullable()).describe("Physical port type").optional(),
  "updated_by_request": z.string().uuid().optional(),
  "virtual_chassis": z.array(z.string()).describe("Virtual Chassis").optional(),
  "virtual_chassis__n": z.array(z.string()).describe("Virtual Chassis").optional(),
  "virtual_chassis_id": z.array(z.number().int()).describe("Virtual Chassis (ID)").optional(),
  "virtual_chassis_id__n": z.array(z.number().int()).describe("Virtual Chassis (ID)").optional()
}