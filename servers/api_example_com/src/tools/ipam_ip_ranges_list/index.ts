import { inputParamsSchema } from "./schema/root.js"
import type { OpenMCPServerTool } from "@open-mcp/core"

const tool: OpenMCPServerTool = {
  "toolName": "ipam_ip_ranges_list",
  "toolDescription": "Get a list of IP range objects.",
  "baseUrl": "https://api.example.com",
  "path": "/api/ipam/ip-ranges/",
  "method": "get",
  "security": [
    {
      "key": "sessionid",
      "value": "<mcp-env-var>SESSIONID</mcp-env-var>",
      "in": "cookie",
      "envVarName": "SESSIONID"
    },
    {
      "key": "Authorization",
      "value": "<mcp-env-var>AUTHORIZATION</mcp-env-var>",
      "in": "header",
      "envVarName": "AUTHORIZATION"
    }
  ],
  "paramsMap": {
    "query": {
      "contact": "contact",
      "contact__n": "contact__n",
      "contact_group": "contact_group",
      "contact_group__n": "contact_group__n",
      "contact_role": "contact_role",
      "contact_role__n": "contact_role__n",
      "contains": "contains",
      "created": "created",
      "created__empty": "created__empty",
      "created__gt": "created__gt",
      "created__gte": "created__gte",
      "created__lt": "created__lt",
      "created__lte": "created__lte",
      "created__n": "created__n",
      "created_by_request": "created_by_request",
      "description": "description",
      "description__empty": "description__empty",
      "description__ic": "description__ic",
      "description__ie": "description__ie",
      "description__iew": "description__iew",
      "description__isw": "description__isw",
      "description__n": "description__n",
      "description__nic": "description__nic",
      "description__nie": "description__nie",
      "description__niew": "description__niew",
      "description__nisw": "description__nisw",
      "end_address": "end_address",
      "family": "family",
      "id": "id",
      "id__empty": "id__empty",
      "id__gt": "id__gt",
      "id__gte": "id__gte",
      "id__lt": "id__lt",
      "id__lte": "id__lte",
      "id__n": "id__n",
      "last_updated": "last_updated",
      "last_updated__empty": "last_updated__empty",
      "last_updated__gt": "last_updated__gt",
      "last_updated__gte": "last_updated__gte",
      "last_updated__lt": "last_updated__lt",
      "last_updated__lte": "last_updated__lte",
      "last_updated__n": "last_updated__n",
      "limit": "limit",
      "mark_populated": "mark_populated",
      "mark_utilized": "mark_utilized",
      "modified_by_request": "modified_by_request",
      "offset": "offset",
      "ordering": "ordering",
      "parent": "parent",
      "q": "q",
      "role": "role",
      "role__n": "role__n",
      "role_id": "role_id",
      "role_id__n": "role_id__n",
      "size": "size",
      "size__empty": "size__empty",
      "size__gt": "size__gt",
      "size__gte": "size__gte",
      "size__lt": "size__lt",
      "size__lte": "size__lte",
      "size__n": "size__n",
      "start_address": "start_address",
      "status": "status",
      "status__empty": "status__empty",
      "status__ic": "status__ic",
      "status__ie": "status__ie",
      "status__iew": "status__iew",
      "status__isw": "status__isw",
      "status__n": "status__n",
      "status__nic": "status__nic",
      "status__nie": "status__nie",
      "status__niew": "status__niew",
      "status__nisw": "status__nisw",
      "tag": "tag",
      "tag__n": "tag__n",
      "tag_id": "tag_id",
      "tag_id__n": "tag_id__n",
      "tenant": "tenant",
      "tenant__n": "tenant__n",
      "tenant_group": "tenant_group",
      "tenant_group__n": "tenant_group__n",
      "tenant_group_id": "tenant_group_id",
      "tenant_group_id__n": "tenant_group_id__n",
      "tenant_id": "tenant_id",
      "tenant_id__n": "tenant_id__n",
      "updated_by_request": "updated_by_request",
      "vrf": "vrf",
      "vrf__n": "vrf__n",
      "vrf_id": "vrf_id",
      "vrf_id__n": "vrf_id__n"
    }
  },
  inputParamsSchema
}

export default tool