import { z } from "zod"

export const inputParamsSchema = {
  "contact": z.array(z.number().int()).describe("Contact").optional(),
  "contact__n": z.array(z.number().int()).describe("Contact").optional(),
  "contact_group": z.array(z.string()).optional(),
  "contact_group__n": z.array(z.string()).optional(),
  "contact_role": z.array(z.number().int()).describe("Contact Role").optional(),
  "contact_role__n": z.array(z.number().int()).describe("Contact Role").optional(),
  "contains": z.string().describe("Ranges which contain this prefix or IP").optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "end_address": z.array(z.string()).optional(),
  "family": z.number().optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "mark_populated": z.boolean().optional(),
  "mark_utilized": z.boolean().optional(),
  "modified_by_request": z.string().uuid().optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "parent": z.array(z.string()).optional(),
  "q": z.string().describe("Search").optional(),
  "role": z.array(z.string()).describe("Role (slug)").optional(),
  "role__n": z.array(z.string()).describe("Role (slug)").optional(),
  "role_id": z.array(z.number().int().nullable()).describe("Role (ID)").optional(),
  "role_id__n": z.array(z.number().int().nullable()).describe("Role (ID)").optional(),
  "size": z.array(z.number().int()).optional(),
  "size__empty": z.boolean().optional(),
  "size__gt": z.array(z.number().int()).optional(),
  "size__gte": z.array(z.number().int()).optional(),
  "size__lt": z.array(z.number().int()).optional(),
  "size__lte": z.array(z.number().int()).optional(),
  "size__n": z.array(z.number().int()).optional(),
  "start_address": z.array(z.string()).optional(),
  "status": z.array(z.string()).describe("Operational status of this range").optional(),
  "status__empty": z.boolean().optional(),
  "status__ic": z.array(z.string()).describe("Operational status of this range").optional(),
  "status__ie": z.array(z.string()).describe("Operational status of this range").optional(),
  "status__iew": z.array(z.string()).describe("Operational status of this range").optional(),
  "status__isw": z.array(z.string()).describe("Operational status of this range").optional(),
  "status__n": z.array(z.string()).describe("Operational status of this range").optional(),
  "status__nic": z.array(z.string()).describe("Operational status of this range").optional(),
  "status__nie": z.array(z.string()).describe("Operational status of this range").optional(),
  "status__niew": z.array(z.string()).describe("Operational status of this range").optional(),
  "status__nisw": z.array(z.string()).describe("Operational status of this range").optional(),
  "tag": z.array(z.string()).optional(),
  "tag__n": z.array(z.string()).optional(),
  "tag_id": z.array(z.number().int()).optional(),
  "tag_id__n": z.array(z.number().int()).optional(),
  "tenant": z.array(z.string()).describe("Tenant (slug)").optional(),
  "tenant__n": z.array(z.string()).describe("Tenant (slug)").optional(),
  "tenant_group": z.array(z.string()).optional(),
  "tenant_group__n": z.array(z.string()).optional(),
  "tenant_group_id": z.array(z.string()).optional(),
  "tenant_group_id__n": z.array(z.string()).optional(),
  "tenant_id": z.array(z.number().int().nullable()).describe("Tenant (ID)").optional(),
  "tenant_id__n": z.array(z.number().int().nullable()).describe("Tenant (ID)").optional(),
  "updated_by_request": z.string().uuid().optional(),
  "vrf": z.array(z.string().nullable()).describe("VRF (RD)").optional(),
  "vrf__n": z.array(z.string().nullable()).describe("VRF (RD)").optional(),
  "vrf_id": z.array(z.number().int().nullable()).describe("VRF").optional(),
  "vrf_id__n": z.array(z.number().int().nullable()).describe("VRF").optional()
}