import { z } from "zod"

export const inputParamsSchema = {
  "contact": z.array(z.number().int()).describe("Contact").optional(),
  "contact__n": z.array(z.number().int()).describe("Contact").optional(),
  "contact_group": z.array(z.string()).optional(),
  "contact_group__n": z.array(z.string()).optional(),
  "contact_role": z.array(z.number().int()).describe("Contact Role").optional(),
  "contact_role__n": z.array(z.number().int()).describe("Contact Role").optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "description": z.array(z.string()).optional(),
  "description__empty": z.boolean().optional(),
  "description__ic": z.array(z.string()).optional(),
  "description__ie": z.array(z.string()).optional(),
  "description__iew": z.array(z.string()).optional(),
  "description__isw": z.array(z.string()).optional(),
  "description__n": z.array(z.string()).optional(),
  "description__nic": z.array(z.string()).optional(),
  "description__nie": z.array(z.string()).optional(),
  "description__niew": z.array(z.string()).optional(),
  "description__nisw": z.array(z.string()).optional(),
  "device": z.array(z.string()).optional(),
  "device_id": z.array(z.number().int()).optional(),
  "fhrpgroup": z.array(z.string()).optional(),
  "fhrpgroup_id": z.array(z.number().int()).optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "ip_address": z.array(z.string()).describe("IP address").optional(),
  "ip_address__n": z.array(z.string()).describe("IP address").optional(),
  "ip_address_id": z.array(z.number().int()).describe("IP address (ID)").optional(),
  "ip_address_id__n": z.array(z.number().int()).describe("IP address (ID)").optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "modified_by_request": z.string().uuid().optional(),
  "name": z.array(z.string()).optional(),
  "name__empty": z.boolean().optional(),
  "name__ic": z.array(z.string()).optional(),
  "name__ie": z.array(z.string()).optional(),
  "name__iew": z.array(z.string()).optional(),
  "name__isw": z.array(z.string()).optional(),
  "name__n": z.array(z.string()).optional(),
  "name__nic": z.array(z.string()).optional(),
  "name__nie": z.array(z.string()).optional(),
  "name__niew": z.array(z.string()).optional(),
  "name__nisw": z.array(z.string()).optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "parent_object_id": z.array(z.number().int()).optional(),
  "parent_object_id__empty": z.boolean().optional(),
  "parent_object_id__gt": z.array(z.number().int()).optional(),
  "parent_object_id__gte": z.array(z.number().int()).optional(),
  "parent_object_id__lt": z.array(z.number().int()).optional(),
  "parent_object_id__lte": z.array(z.number().int()).optional(),
  "parent_object_id__n": z.array(z.number().int()).optional(),
  "parent_object_type": z.number().int().optional(),
  "parent_object_type__n": z.number().int().optional(),
  "port": z.number().optional(),
  "protocol": z.enum(["sctp","tcp","udp"]).describe("* `tcp` - TCP\n* `udp` - UDP\n* `sctp` - SCTP").optional(),
  "q": z.string().describe("Search").optional(),
  "tag": z.array(z.string()).optional(),
  "tag__n": z.array(z.string()).optional(),
  "tag_id": z.array(z.number().int()).optional(),
  "tag_id__n": z.array(z.number().int()).optional(),
  "updated_by_request": z.string().uuid().optional(),
  "virtual_machine": z.array(z.string()).optional(),
  "virtual_machine_id": z.array(z.number().int()).optional()
}