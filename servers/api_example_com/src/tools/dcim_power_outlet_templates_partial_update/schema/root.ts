import { z } from "zod"

export const inputParamsSchema = {
  "id": z.number().int().describe("A unique integer value identifying this power outlet template."),
  "device_type": z.number().int().nullable().optional(),
  "module_type": z.number().int().nullable().optional(),
  "name": z.string().min(1).max(64).describe("{module} is accepted as a substitution for the module bay position when attached to a module type.").optional(),
  "label": z.string().max(64).describe("Physical label").optional(),
  "type": z.union([z.literal("iec-60320-c5"), z.literal("iec-60320-c7"), z.literal("iec-60320-c13"), z.literal("iec-60320-c15"), z.literal("iec-60320-c19"), z.literal("iec-60320-c21"), z.literal("iec-60309-p-n-e-4h"), z.literal("iec-60309-p-n-e-6h"), z.literal("iec-60309-p-n-e-9h"), z.literal("iec-60309-2p-e-4h"), z.literal("iec-60309-2p-e-6h"), z.literal("iec-60309-2p-e-9h"), z.literal("iec-60309-3p-e-4h"), z.literal("iec-60309-3p-e-6h"), z.literal("iec-60309-3p-e-9h"), z.literal("iec-60309-3p-n-e-4h"), z.literal("iec-60309-3p-n-e-6h"), z.literal("iec-60309-3p-n-e-9h"), z.literal("iec-60906-1"), z.literal("nbr-14136-10a"), z.literal("nbr-14136-20a"), z.literal("nema-1-15r"), z.literal("nema-5-15r"), z.literal("nema-5-20r"), z.literal("nema-5-30r"), z.literal("nema-5-50r"), z.literal("nema-6-15r"), z.literal("nema-6-20r"), z.literal("nema-6-30r"), z.literal("nema-6-50r"), z.literal("nema-10-30r"), z.literal("nema-10-50r"), z.literal("nema-14-20r"), z.literal("nema-14-30r"), z.literal("nema-14-50r"), z.literal("nema-14-60r"), z.literal("nema-15-15r"), z.literal("nema-15-20r"), z.literal("nema-15-30r"), z.literal("nema-15-50r"), z.literal("nema-15-60r"), z.literal("nema-l1-15r"), z.literal("nema-l5-15r"), z.literal("nema-l5-20r"), z.literal("nema-l5-30r"), z.literal("nema-l5-50r"), z.literal("nema-l6-15r"), z.literal("nema-l6-20r"), z.literal("nema-l6-30r"), z.literal("nema-l6-50r"), z.literal("nema-l10-30r"), z.literal("nema-l14-20r"), z.literal("nema-l14-30r"), z.literal("nema-l14-50r"), z.literal("nema-l14-60r"), z.literal("nema-l15-20r"), z.literal("nema-l15-30r"), z.literal("nema-l15-50r"), z.literal("nema-l15-60r"), z.literal("nema-l21-20r"), z.literal("nema-l21-30r"), z.literal("nema-l22-20r"), z.literal("nema-l22-30r"), z.literal("CS6360C"), z.literal("CS6364C"), z.literal("CS8164C"), z.literal("CS8264C"), z.literal("CS8364C"), z.literal("CS8464C"), z.literal("ita-e"), z.literal("ita-f"), z.literal("ita-g"), z.literal("ita-h"), z.literal("ita-i"), z.literal("ita-j"), z.literal("ita-k"), z.literal("ita-l"), z.literal("ita-m"), z.literal("ita-n"), z.literal("ita-o"), z.literal("ita-multistandard"), z.literal("usb-a"), z.literal("usb-micro-b"), z.literal("usb-c"), z.literal("molex-micro-fit-1x2"), z.literal("molex-micro-fit-2x2"), z.literal("molex-micro-fit-2x4"), z.literal("dc-terminal"), z.literal("eaton-c39"), z.literal("hdot-cx"), z.literal("saf-d-grid"), z.literal("neutrik-powercon-20a"), z.literal("neutrik-powercon-32a"), z.literal("neutrik-powercon-true1"), z.literal("neutrik-powercon-true1-top"), z.literal("ubiquiti-smartpower"), z.literal("hardwired"), z.literal("other"), z.literal(""), z.literal(null)]).nullable().describe("* `iec-60320-c5` - C5\n* `iec-60320-c7` - C7\n* `iec-60320-c13` - C13\n* `iec-60320-c15` - C15\n* `iec-60320-c19` - C19\n* `iec-60320-c21` - C21\n* `iec-60309-p-n-e-4h` - P+N+E 4H\n* `iec-60309-p-n-e-6h` - P+N+E 6H\n* `iec-60309-p-n-e-9h` - P+N+E 9H\n* `iec-60309-2p-e-4h` - 2P+E 4H\n* `iec-60309-2p-e-6h` - 2P+E 6H\n* `iec-60309-2p-e-9h` - 2P+E 9H\n* `iec-60309-3p-e-4h` - 3P+E 4H\n* `iec-60309-3p-e-6h` - 3P+E 6H\n* `iec-60309-3p-e-9h` - 3P+E 9H\n* `iec-60309-3p-n-e-4h` - 3P+N+E 4H\n* `iec-60309-3p-n-e-6h` - 3P+N+E 6H\n* `iec-60309-3p-n-e-9h` - 3P+N+E 9H\n* `iec-60906-1` - IEC 60906-1\n* `nbr-14136-10a` - 2P+T 10A (NBR 14136)\n* `nbr-14136-20a` - 2P+T 20A (NBR 14136)\n* `nema-1-15r` - NEMA 1-15R\n* `nema-5-15r` - NEMA 5-15R\n* `nema-5-20r` - NEMA 5-20R\n* `nema-5-30r` - NEMA 5-30R\n* `nema-5-50r` - NEMA 5-50R\n* `nema-6-15r` - NEMA 6-15R\n* `nema-6-20r` - NEMA 6-20R\n* `nema-6-30r` - NEMA 6-30R\n* `nema-6-50r` - NEMA 6-50R\n* `nema-10-30r` - NEMA 10-30R\n* `nema-10-50r` - NEMA 10-50R\n* `nema-14-20r` - NEMA 14-20R\n* `nema-14-30r` - NEMA 14-30R\n* `nema-14-50r` - NEMA 14-50R\n* `nema-14-60r` - NEMA 14-60R\n* `nema-15-15r` - NEMA 15-15R\n* `nema-15-20r` - NEMA 15-20R\n* `nema-15-30r` - NEMA 15-30R\n* `nema-15-50r` - NEMA 15-50R\n* `nema-15-60r` - NEMA 15-60R\n* `nema-l1-15r` - NEMA L1-15R\n* `nema-l5-15r` - NEMA L5-15R\n* `nema-l5-20r` - NEMA L5-20R\n* `nema-l5-30r` - NEMA L5-30R\n* `nema-l5-50r` - NEMA L5-50R\n* `nema-l6-15r` - NEMA L6-15R\n* `nema-l6-20r` - NEMA L6-20R\n* `nema-l6-30r` - NEMA L6-30R\n* `nema-l6-50r` - NEMA L6-50R\n* `nema-l10-30r` - NEMA L10-30R\n* `nema-l14-20r` - NEMA L14-20R\n* `nema-l14-30r` - NEMA L14-30R\n* `nema-l14-50r` - NEMA L14-50R\n* `nema-l14-60r` - NEMA L14-60R\n* `nema-l15-20r` - NEMA L15-20R\n* `nema-l15-30r` - NEMA L15-30R\n* `nema-l15-50r` - NEMA L15-50R\n* `nema-l15-60r` - NEMA L15-60R\n* `nema-l21-20r` - NEMA L21-20R\n* `nema-l21-30r` - NEMA L21-30R\n* `nema-l22-20r` - NEMA L22-20R\n* `nema-l22-30r` - NEMA L22-30R\n* `CS6360C` - CS6360C\n* `CS6364C` - CS6364C\n* `CS8164C` - CS8164C\n* `CS8264C` - CS8264C\n* `CS8364C` - CS8364C\n* `CS8464C` - CS8464C\n* `ita-e` - ITA Type E (CEE 7/5)\n* `ita-f` - ITA Type F (CEE 7/3)\n* `ita-g` - ITA Type G (BS 1363)\n* `ita-h` - ITA Type H\n* `ita-i` - ITA Type I\n* `ita-j` - ITA Type J\n* `ita-k` - ITA Type K\n* `ita-l` - ITA Type L (CEI 23-50)\n* `ita-m` - ITA Type M (BS 546)\n* `ita-n` - ITA Type N\n* `ita-o` - ITA Type O\n* `ita-multistandard` - ITA Multistandard\n* `usb-a` - USB Type A\n* `usb-micro-b` - USB Micro B\n* `usb-c` - USB Type C\n* `molex-micro-fit-1x2` - Molex Micro-Fit 1x2\n* `molex-micro-fit-2x2` - Molex Micro-Fit 2x2\n* `molex-micro-fit-2x4` - Molex Micro-Fit 2x4\n* `dc-terminal` - DC Terminal\n* `eaton-c39` - Eaton C39\n* `hdot-cx` - HDOT Cx\n* `saf-d-grid` - Saf-D-Grid\n* `neutrik-powercon-20a` - Neutrik powerCON (20A)\n* `neutrik-powercon-32a` - Neutrik powerCON (32A)\n* `neutrik-powercon-true1` - Neutrik powerCON TRUE1\n* `neutrik-powercon-true1-top` - Neutrik powerCON TRUE1 TOP\n* `ubiquiti-smartpower` - Ubiquiti SmartPower\n* `hardwired` - Hardwired\n* `other` - Other").optional(),
  "power_port": z.number().int().nullable().optional(),
  "feed_leg": z.union([z.literal("A"), z.literal("B"), z.literal("C"), z.literal(""), z.literal(null)]).nullable().describe("Phase (for three-phase feeds)\n\n* `A` - A\n* `B` - B\n* `C` - C").optional(),
  "description": z.string().max(200).optional()
}