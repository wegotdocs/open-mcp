import { z } from "zod"

export const inputParamsSchema = {
  "id": z.number().int().describe("A unique integer value identifying this device."),
  "name": z.string().max(64).nullable().optional(),
  "device_type": z.number().int(),
  "role": z.number().int(),
  "tenant": z.number().int().nullable().optional(),
  "platform": z.number().int().nullable().optional(),
  "serial": z.string().max(50).describe("Chassis serial number, assigned by the manufacturer").optional(),
  "asset_tag": z.string().max(50).nullable().describe("A unique tag used to identify this device").optional(),
  "site": z.number().int(),
  "location": z.number().int().nullable().optional(),
  "rack": z.number().int().nullable().optional(),
  "position": z.number().gte(0.5).lt(1000).nullable().optional(),
  "face": z.union([z.literal("front"), z.literal("rear"), z.literal(""), z.literal(null)]).nullable().describe("* `front` - Front\n* `rear` - Rear").optional(),
  "latitude": z.number().gt(-100).lt(100).nullable().describe("GPS coordinate in decimal format (xx.yyyyyy)").optional(),
  "longitude": z.number().gt(-1000).lt(1000).nullable().describe("GPS coordinate in decimal format (xx.yyyyyy)").optional(),
  "status": z.enum(["offline","active","planned","staged","failed","inventory","decommissioning"]).describe("* `offline` - Offline\n* `active` - Active\n* `planned` - Planned\n* `staged` - Staged\n* `failed` - Failed\n* `inventory` - Inventory\n* `decommissioning` - Decommissioning").optional(),
  "airflow": z.union([z.literal("front-to-rear"), z.literal("rear-to-front"), z.literal("left-to-right"), z.literal("right-to-left"), z.literal("side-to-rear"), z.literal("rear-to-side"), z.literal("bottom-to-top"), z.literal("top-to-bottom"), z.literal("passive"), z.literal("mixed"), z.literal(""), z.literal(null)]).nullable().describe("* `front-to-rear` - Front to rear\n* `rear-to-front` - Rear to front\n* `left-to-right` - Left to right\n* `right-to-left` - Right to left\n* `side-to-rear` - Side to rear\n* `rear-to-side` - Rear to side\n* `bottom-to-top` - Bottom to top\n* `top-to-bottom` - Top to bottom\n* `passive` - Passive\n* `mixed` - Mixed").optional(),
  "primary_ip4": z.number().int().nullable().optional(),
  "primary_ip6": z.number().int().nullable().optional(),
  "oob_ip": z.number().int().nullable().optional(),
  "cluster": z.number().int().nullable().optional(),
  "virtual_chassis": z.number().int().nullable().optional(),
  "vc_position": z.number().int().gte(0).lte(255).nullable().optional(),
  "vc_priority": z.number().int().gte(0).lte(255).nullable().describe("Virtual chassis master election priority").optional(),
  "description": z.string().max(200).optional(),
  "comments": z.string().optional(),
  "config_template": z.number().int().nullable().optional(),
  "local_context_data": z.any().nullable().describe("Local config context data takes precedence over source contexts in the final rendered config context").optional(),
  "tags": z.array(z.object({ "name": z.string().min(1).max(100), "slug": z.string().regex(new RegExp("^[-\\w]+$")).min(1).max(100), "color": z.string().regex(new RegExp("^[0-9a-f]{6}$")).min(1).max(6).optional() }).describe("Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a\ndictionary of attributes which can be used to uniquely identify the related object. This class should be\nsubclassed to return a full representation of the related object on read.")).optional(),
  "custom_fields": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `custom_fields` to the tool, first call the tool `expandSchema` with \"/properties/custom_fields\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional()
}