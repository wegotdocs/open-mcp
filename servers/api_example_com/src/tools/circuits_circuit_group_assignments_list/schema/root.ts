import { z } from "zod"

export const inputParamsSchema = {
  "circuit": z.array(z.string()).optional(),
  "circuit_id": z.array(z.number().int()).optional(),
  "created": z.array(z.string().datetime({ offset: true })).optional(),
  "created__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "created__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "created__n": z.array(z.string().datetime({ offset: true })).optional(),
  "created_by_request": z.string().uuid().optional(),
  "group": z.array(z.string()).describe("Circuit group (slug)").optional(),
  "group__n": z.array(z.string()).describe("Circuit group (slug)").optional(),
  "group_id": z.array(z.number().int()).describe("Circuit group (ID)").optional(),
  "group_id__n": z.array(z.number().int()).describe("Circuit group (ID)").optional(),
  "id": z.array(z.number().int()).optional(),
  "id__empty": z.boolean().optional(),
  "id__gt": z.array(z.number().int()).optional(),
  "id__gte": z.array(z.number().int()).optional(),
  "id__lt": z.array(z.number().int()).optional(),
  "id__lte": z.array(z.number().int()).optional(),
  "id__n": z.array(z.number().int()).optional(),
  "last_updated": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__empty": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__gte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lt": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__lte": z.array(z.string().datetime({ offset: true })).optional(),
  "last_updated__n": z.array(z.string().datetime({ offset: true })).optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "member_id": z.array(z.number().int()).optional(),
  "member_id__empty": z.boolean().optional(),
  "member_id__gt": z.array(z.number().int()).optional(),
  "member_id__gte": z.array(z.number().int()).optional(),
  "member_id__lt": z.array(z.number().int()).optional(),
  "member_id__lte": z.array(z.number().int()).optional(),
  "member_id__n": z.array(z.number().int()).optional(),
  "member_type": z.string().optional(),
  "member_type__n": z.string().optional(),
  "modified_by_request": z.string().uuid().optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "ordering": z.string().describe("Which field to use when ordering the results.").optional(),
  "priority": z.enum(["inactive","primary","secondary","tertiary"]).nullable().describe("* `primary` - Primary\n* `secondary` - Secondary\n* `tertiary` - Tertiary\n* `inactive` - Inactive").optional(),
  "provider": z.array(z.string()).optional(),
  "provider_id": z.array(z.number().int()).optional(),
  "q": z.string().describe("Search").optional(),
  "tag": z.array(z.string()).optional(),
  "tag__n": z.array(z.string()).optional(),
  "tag_id": z.array(z.number().int()).optional(),
  "tag_id__n": z.array(z.number().int()).optional(),
  "updated_by_request": z.string().uuid().optional(),
  "virtual_circuit": z.array(z.string()).optional(),
  "virtual_circuit_id": z.array(z.number().int()).optional()
}