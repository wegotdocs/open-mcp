import { z } from "zod"

export const inputParamsSchema = {
  "id": z.number().int().describe("A unique integer value identifying this power port template."),
  "device_type": z.number().int().nullable().optional(),
  "module_type": z.number().int().nullable().optional(),
  "name": z.string().min(1).max(64).describe("{module} is accepted as a substitution for the module bay position when attached to a module type.").optional(),
  "label": z.string().max(64).describe("Physical label").optional(),
  "type": z.union([z.literal("iec-60320-c6"), z.literal("iec-60320-c8"), z.literal("iec-60320-c14"), z.literal("iec-60320-c16"), z.literal("iec-60320-c20"), z.literal("iec-60320-c22"), z.literal("iec-60309-p-n-e-4h"), z.literal("iec-60309-p-n-e-6h"), z.literal("iec-60309-p-n-e-9h"), z.literal("iec-60309-2p-e-4h"), z.literal("iec-60309-2p-e-6h"), z.literal("iec-60309-2p-e-9h"), z.literal("iec-60309-3p-e-4h"), z.literal("iec-60309-3p-e-6h"), z.literal("iec-60309-3p-e-9h"), z.literal("iec-60309-3p-n-e-4h"), z.literal("iec-60309-3p-n-e-6h"), z.literal("iec-60309-3p-n-e-9h"), z.literal("iec-60906-1"), z.literal("nbr-14136-10a"), z.literal("nbr-14136-20a"), z.literal("nema-1-15p"), z.literal("nema-5-15p"), z.literal("nema-5-20p"), z.literal("nema-5-30p"), z.literal("nema-5-50p"), z.literal("nema-6-15p"), z.literal("nema-6-20p"), z.literal("nema-6-30p"), z.literal("nema-6-50p"), z.literal("nema-10-30p"), z.literal("nema-10-50p"), z.literal("nema-14-20p"), z.literal("nema-14-30p"), z.literal("nema-14-50p"), z.literal("nema-14-60p"), z.literal("nema-15-15p"), z.literal("nema-15-20p"), z.literal("nema-15-30p"), z.literal("nema-15-50p"), z.literal("nema-15-60p"), z.literal("nema-l1-15p"), z.literal("nema-l5-15p"), z.literal("nema-l5-20p"), z.literal("nema-l5-30p"), z.literal("nema-l5-50p"), z.literal("nema-l6-15p"), z.literal("nema-l6-20p"), z.literal("nema-l6-30p"), z.literal("nema-l6-50p"), z.literal("nema-l10-30p"), z.literal("nema-l14-20p"), z.literal("nema-l14-30p"), z.literal("nema-l14-50p"), z.literal("nema-l14-60p"), z.literal("nema-l15-20p"), z.literal("nema-l15-30p"), z.literal("nema-l15-50p"), z.literal("nema-l15-60p"), z.literal("nema-l21-20p"), z.literal("nema-l21-30p"), z.literal("nema-l22-20p"), z.literal("nema-l22-30p"), z.literal("cs6361c"), z.literal("cs6365c"), z.literal("cs8165c"), z.literal("cs8265c"), z.literal("cs8365c"), z.literal("cs8465c"), z.literal("ita-c"), z.literal("ita-e"), z.literal("ita-f"), z.literal("ita-ef"), z.literal("ita-g"), z.literal("ita-h"), z.literal("ita-i"), z.literal("ita-j"), z.literal("ita-k"), z.literal("ita-l"), z.literal("ita-m"), z.literal("ita-n"), z.literal("ita-o"), z.literal("usb-a"), z.literal("usb-b"), z.literal("usb-c"), z.literal("usb-mini-a"), z.literal("usb-mini-b"), z.literal("usb-micro-a"), z.literal("usb-micro-b"), z.literal("usb-micro-ab"), z.literal("usb-3-b"), z.literal("usb-3-micro-b"), z.literal("molex-micro-fit-1x2"), z.literal("molex-micro-fit-2x2"), z.literal("molex-micro-fit-2x4"), z.literal("dc-terminal"), z.literal("saf-d-grid"), z.literal("neutrik-powercon-20"), z.literal("neutrik-powercon-32"), z.literal("neutrik-powercon-true1"), z.literal("neutrik-powercon-true1-top"), z.literal("ubiquiti-smartpower"), z.literal("hardwired"), z.literal("other"), z.literal(""), z.literal(null)]).nullable().describe("* `iec-60320-c6` - C6\n* `iec-60320-c8` - C8\n* `iec-60320-c14` - C14\n* `iec-60320-c16` - C16\n* `iec-60320-c20` - C20\n* `iec-60320-c22` - C22\n* `iec-60309-p-n-e-4h` - P+N+E 4H\n* `iec-60309-p-n-e-6h` - P+N+E 6H\n* `iec-60309-p-n-e-9h` - P+N+E 9H\n* `iec-60309-2p-e-4h` - 2P+E 4H\n* `iec-60309-2p-e-6h` - 2P+E 6H\n* `iec-60309-2p-e-9h` - 2P+E 9H\n* `iec-60309-3p-e-4h` - 3P+E 4H\n* `iec-60309-3p-e-6h` - 3P+E 6H\n* `iec-60309-3p-e-9h` - 3P+E 9H\n* `iec-60309-3p-n-e-4h` - 3P+N+E 4H\n* `iec-60309-3p-n-e-6h` - 3P+N+E 6H\n* `iec-60309-3p-n-e-9h` - 3P+N+E 9H\n* `iec-60906-1` - IEC 60906-1\n* `nbr-14136-10a` - 2P+T 10A (NBR 14136)\n* `nbr-14136-20a` - 2P+T 20A (NBR 14136)\n* `nema-1-15p` - NEMA 1-15P\n* `nema-5-15p` - NEMA 5-15P\n* `nema-5-20p` - NEMA 5-20P\n* `nema-5-30p` - NEMA 5-30P\n* `nema-5-50p` - NEMA 5-50P\n* `nema-6-15p` - NEMA 6-15P\n* `nema-6-20p` - NEMA 6-20P\n* `nema-6-30p` - NEMA 6-30P\n* `nema-6-50p` - NEMA 6-50P\n* `nema-10-30p` - NEMA 10-30P\n* `nema-10-50p` - NEMA 10-50P\n* `nema-14-20p` - NEMA 14-20P\n* `nema-14-30p` - NEMA 14-30P\n* `nema-14-50p` - NEMA 14-50P\n* `nema-14-60p` - NEMA 14-60P\n* `nema-15-15p` - NEMA 15-15P\n* `nema-15-20p` - NEMA 15-20P\n* `nema-15-30p` - NEMA 15-30P\n* `nema-15-50p` - NEMA 15-50P\n* `nema-15-60p` - NEMA 15-60P\n* `nema-l1-15p` - NEMA L1-15P\n* `nema-l5-15p` - NEMA L5-15P\n* `nema-l5-20p` - NEMA L5-20P\n* `nema-l5-30p` - NEMA L5-30P\n* `nema-l5-50p` - NEMA L5-50P\n* `nema-l6-15p` - NEMA L6-15P\n* `nema-l6-20p` - NEMA L6-20P\n* `nema-l6-30p` - NEMA L6-30P\n* `nema-l6-50p` - NEMA L6-50P\n* `nema-l10-30p` - NEMA L10-30P\n* `nema-l14-20p` - NEMA L14-20P\n* `nema-l14-30p` - NEMA L14-30P\n* `nema-l14-50p` - NEMA L14-50P\n* `nema-l14-60p` - NEMA L14-60P\n* `nema-l15-20p` - NEMA L15-20P\n* `nema-l15-30p` - NEMA L15-30P\n* `nema-l15-50p` - NEMA L15-50P\n* `nema-l15-60p` - NEMA L15-60P\n* `nema-l21-20p` - NEMA L21-20P\n* `nema-l21-30p` - NEMA L21-30P\n* `nema-l22-20p` - NEMA L22-20P\n* `nema-l22-30p` - NEMA L22-30P\n* `cs6361c` - CS6361C\n* `cs6365c` - CS6365C\n* `cs8165c` - CS8165C\n* `cs8265c` - CS8265C\n* `cs8365c` - CS8365C\n* `cs8465c` - CS8465C\n* `ita-c` - ITA Type C (CEE 7/16)\n* `ita-e` - ITA Type E (CEE 7/6)\n* `ita-f` - ITA Type F (CEE 7/4)\n* `ita-ef` - ITA Type E/F (CEE 7/7)\n* `ita-g` - ITA Type G (BS 1363)\n* `ita-h` - ITA Type H\n* `ita-i` - ITA Type I\n* `ita-j` - ITA Type J\n* `ita-k` - ITA Type K\n* `ita-l` - ITA Type L (CEI 23-50)\n* `ita-m` - ITA Type M (BS 546)\n* `ita-n` - ITA Type N\n* `ita-o` - ITA Type O\n* `usb-a` - USB Type A\n* `usb-b` - USB Type B\n* `usb-c` - USB Type C\n* `usb-mini-a` - USB Mini A\n* `usb-mini-b` - USB Mini B\n* `usb-micro-a` - USB Micro A\n* `usb-micro-b` - USB Micro B\n* `usb-micro-ab` - USB Micro AB\n* `usb-3-b` - USB 3.0 Type B\n* `usb-3-micro-b` - USB 3.0 Micro B\n* `molex-micro-fit-1x2` - Molex Micro-Fit 1x2\n* `molex-micro-fit-2x2` - Molex Micro-Fit 2x2\n* `molex-micro-fit-2x4` - Molex Micro-Fit 2x4\n* `dc-terminal` - DC Terminal\n* `saf-d-grid` - Saf-D-Grid\n* `neutrik-powercon-20` - Neutrik powerCON (20A)\n* `neutrik-powercon-32` - Neutrik powerCON (32A)\n* `neutrik-powercon-true1` - Neutrik powerCON TRUE1\n* `neutrik-powercon-true1-top` - Neutrik powerCON TRUE1 TOP\n* `ubiquiti-smartpower` - Ubiquiti SmartPower\n* `hardwired` - Hardwired\n* `other` - Other").optional(),
  "maximum_draw": z.number().int().gte(1).lte(2147483647).nullable().describe("Maximum power draw (watts)").optional(),
  "allocated_draw": z.number().int().gte(1).lte(2147483647).nullable().describe("Allocated power draw (watts)").optional(),
  "description": z.string().max(200).optional()
}