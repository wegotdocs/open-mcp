import { z } from "zod"

export const inputParamsSchema = {
  "billingTypes": z.array(z.enum(["CREDIT_CARD","PIX"]).describe("Payment methods")).describe("Payment methods"),
  "chargeTypes": z.array(z.enum(["DETACHED","RECURRENT","INSTALLMENT"]).describe("Charge types")).describe("Charge types"),
  "minutesToExpire": z.number().int().gte(10).lte(1440).describe("Time in minutes for checkout expiration").optional(),
  "callback": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `callback` to the tool, first call the tool `expandSchema` with \"/properties/callback\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Automatic redirection information after payment on the checkout screen</property-description>"),
  "items": z.array(z.object({ "description": z.string().max(150).describe("Item Description").optional(), "imageBase64": z.string().describe("Item image in Base64"), "name": z.string().max(30).describe("Item name"), "quantity": z.number().int().describe("Item Quantity"), "value": z.number().describe("Item value") }).describe("List of items at checkout")).describe("List of items at checkout"),
  "customerData": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `customerData` to the tool, first call the tool `expandSchema` with \"/properties/customerData\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Customer data</property-description>").optional(),
  "subscription": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `subscription` to the tool, first call the tool `expandSchema` with \"/properties/subscription\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Subscription details, required if chargeTypes includes `RECURRENT`</property-description>").optional(),
  "installment": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `installment` to the tool, first call the tool `expandSchema` with \"/properties/installment\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Installment details. If informed, it will be mandatory to include the `INSTALLMENT` chargeType</property-description>").optional(),
  "splits": z.array(z.object({ "walletId": z.string().describe("Asaas wallet identifier that will receive the transfer"), "fixedValue": z.number().describe("Fixed amount to be transferred to the account when the payment is received").optional(), "percentageValue": z.number().describe("Percentage of the net value of the charge to be transferred when received").optional(), "totalFixedValue": z.number().describe("(Instalments only). Amount that will be split relative to the total amount that will be paid in installments.").optional() }).describe("Split Settings")).describe("Split Settings").optional()
}