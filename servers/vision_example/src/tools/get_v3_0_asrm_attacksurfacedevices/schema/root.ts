import { z } from "zod"

export const inputParamsSchema = {
  "orderBy": z.string().max(128).describe("The field by which the results are sorted.\n\nTo display records in ascending or descending order, add the phrase `asc` or `desc` after the parameter name.\n\nAvailable values: \n* `latestRiskScore`\n* `deviceName`\n* `asc` - Ascending order\n* `desc` - Descending order\n\nDefault: `latestRiskScore desc`\n").optional(),
  "top": z.union([z.literal(10), z.literal(50), z.literal(100), z.literal(200), z.literal(500), z.literal(1000)]).describe("The number of records displayed on a page. \n\nDefault: `100`\n").optional(),
  "lastDetectedStartDateTime": z.string().datetime({ offset: true }).max(128).describe("The start time of the data retrieval range, in ISO 8601 format, based on the `lastDetectDateTime` field.\n\nDefault: The earliest available value.\n").optional(),
  "lastDetectedEndDateTime": z.string().datetime({ offset: true }).max(128).describe("The end time of the data retrieval range, represented in ISO 8601 format, based on the `lastDetectDateTime` field.\n\nDefault: The time you make the request.\n").optional(),
  "firstSeenStartDateTime": z.string().datetime({ offset: true }).max(128).describe("The start time of the data retrieval range, in ISO 8601 format, based on the `firstSeenDateTime` field.\n\nDefault: The earliest available value.\n").optional(),
  "firstSeenEndDateTime": z.string().datetime({ offset: true }).max(128).describe("The end time of the data retrieval range, in ISO 8601 format, based on the `firstSeenDateTime` field.\n\nDefault: The time you make the request.\n").optional(),
  "TMV1-Filter": z.string().max(1024).describe("Filter for retrieving a subset of the device information list.\n\nSupported fields:\n\n|Field|Description|Supported values|\n|-----|-----------|----------------|\n|deviceName|Device name|Any value|\n|id| The ID of the device on the Trend Vision One platform.|Any value|\n|ip| The IP addresses of the device|Any value|\n|deviceType| Whether a device can be assessed. You can only include one device type per query| `Can be assessed`, `Cannot be assessed`, `With managed agents`, `Unmanaged device` |\n|latestRiskScore|The most recent Risk Score of the device|Any value|\n|criticality    |The criticality of the device             | `high`, `medium`, `low` |\n|osPlatform     |Operating system of the device        | `Android`, `Linux`, `macOS`, `Windows`, `Other`  |\n|lastUser       |The last user who signed in to the device|Any value|\n|installedAgents|The agents installed on the device| The values in the \"installedAgents\" field when the request is successful.|\n|discoveredBy|The data sources that discovered the device| The values in the \"discoveredBy\" field when the request is successful.|\n|assetCustomTagIds|The tag ID of each asset in `assetCustomTags`| Any value in field.|\n\nSupported operators:\n\n|Operator|Description|Notes|\n|-----|-----------|----------------|\n|`eq`|Operator 'equal to'| Not applicable to `discoveredBy` |\n|`and`|Operator 'and'| - |\n|`or`|Operator 'or'| - |\n|`not`|Operator 'not'| - |\n|`()`|Symbols for grouping operands| - |\n|`gt`|Operator 'greater than'|Only applicable to 'latestRiskScore'|\n|`ge`|Operator 'greater than or equal'|Only applicable to 'latestRiskScore'|\n|`le`|Operator 'less than or equal'|Only applicable to 'latestRiskScore'|\n|`lt`|Operator 'less than'|Only applicable to 'latestRiskScore'|\n\nAdditional functions:\n\n|Function|Description|Notes|\n|-----|-----------|----------------|\n|startswith()|Determines if the specified string begins with the specified characters|Only applicable to `deviceName` and `lastUser`|\n|hassubset()|Checks if the array contains a subset|Applicable to `discoveredBy`, `installedAgents`, `assetCustomTagIds` and `ip` only|\n").optional()
}