import { z } from "zod"

export const inputParamsSchema = {
  "id": z.string().max(19).describe("Task ID"),
  "top": z.union([z.literal(10), z.literal(20), z.literal(50), z.literal(100)]).describe("The number of items to return in the result set. Default is 10.\n\nNote:\n  - **Only supported for a task that runs a customizable playbook. Otherwise it will return an 400 error.**\n").optional(),
  "orderBy": z.string().max(100).describe("\nSpecifies the field by which the results are sorted.\n\nData is displayed in descending order by default.\n\nSupported fields and operators:\n* 'lastActionDateTime'\n* asc - Ascending order\n* desc - Descending order\n\nNote:\n  - **Only supported for a task that runs a customizable playbook. Otherwise it will return an 400 error.**\n  - You can use multiple fields, separated by commas, to sort the retrieved results.\n").optional(),
  "TMV1-Filter": z.string().max(1024).describe("Filter for retrieving a subset of results.\n\nSupported fields:\n\n|Field|Description|Supported values|\n|-----|-----------|----------------|\n|`id`|The ID of action |Any value|\n|`workflowNodeId`|The ID of workflow node|Any value|\n|`target`|The name of target|Any value|\n|`status`|The status of action|`succeeded`, `partiallySucceeded`, `failed`, `running`, `pendingApproval`, `approved`, `rejected`, `timeout`, `noAction`|\n\nSupported operators:\n\n|Operator|Description|Notes|\n|-----|-----------|----------------|\n|`eq`|Operator 'equal to'| - |\n|`and`|Operator 'and'| - |\n|`or`|Operator 'or'| - |\n|`not`|Operator 'not'| - |\n|`( )`|Symbols for grouping operands with their correct operator| - |\n\nAdditional functions:\n\n|Function|Description|Notes|\n|-----|-----------|----------------|\n|`contains()`|Allows you to search for a specified string in a field|Only applicable to 'target'|\n\nNote:\n  - **Only supported for a task that runs a customizable playbook. Otherwise it will return an 400 error.**\n  - Include this parameter in every request that generates paginated output.\n").optional()
}