import { z } from "zod"

export const inputParamsSchema = {
  "orderBy": z.string().max(30).describe("The parameter that allows you to sort the retrieved search results in ascending or descending order. If no order is specified, the results are shown in ascending order. \n\nSupported fields and operators:\n* 'riskLevel'\n* 'lastModifiedDateTime'\n* 'expiredDateTime'\n* 'asc' - Ascending order\n* 'desc' - Descending order\n").optional(),
  "startDateTime": z.string().datetime({ offset: true }).describe("The timestamp in ISO 8601 format.").describe("The timestamp in ISO 8601 format that indicates the start of the data retrieval time range. If no value is specified, 'startDateTime' defaults to the earliest available value for 'lastModifiedDateTime'.\n").optional(),
  "endDateTime": z.string().datetime({ offset: true }).describe("The timestamp in ISO 8601 format.").describe("The timestamp in ISO 8601 format that indicates the end of the data retrieval time range. If no value is specified, 'endDateTime' defaults to the time the request is made.\n").optional(),
  "top": z.union([z.literal(50), z.literal(100), z.literal(200)]).describe("The number of records displayed on a page").optional(),
  "TMV1-Filter": z.string().max(4000).describe("The filter for retrieving a subset of the Suspicious Object List. Supported fields and operators:\n* 'type' - The type of a suspicious object. Possible values: url, domain, senderMailAddress, ip, fileSha1, fileSha256.\n* 'url' - Suspicious URL.\n* 'domain' - Suspicious domain name.\n* 'ip' - Suspicious IP address.\n* 'senderMailAddress' - Suspicious email address.\n* 'fileSha1' - SHA1 hash associated to a suspicious file.\n* 'fileSha256' - SHA256 hash associated to a suspicious file.\n* 'scanAction' - Action that connected products apply after detecting a suspicious object. Possible values: block, log\n* 'riskLevel' - Risk level of a suspicious object. Possible values: high, medium, low\n* 'eq' - Abbreviation of the operator \"equal to\"\n* 'and' - Operator \"and\"\n* 'or' - Operator \"or\"\n* 'not' - Operator \"not\"\n* '( )' - Symbols for grouping operands with their correct operator.\n").optional()
}