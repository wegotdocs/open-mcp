import { z } from "zod"

export const inputParamsSchema = {
  "mitigation": z.literal("log").describe("The mitigation or action to apply to the secret event type."),
  "schedule": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `schedule` to the tool, first call the tool `expandSchema` with \"/properties/secretScan/properties/schedule\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The schedule for the Runtime Secret Scan. If the schedule is not configured, the scheduled scan is disabled, and the cron configuration is empty.</property-description>").optional(),
  "excludedPaths": z.array(z.string()).describe("The list of file paths excluded from Runtime Secret Scans. You can use wildcards to match multiple files or directories. For example:\n\n|   Exclusion target   |   File path pattern   |   Excluded files                                      |   Files not excluded                         |\n| ------------------ | ---------------------- | ----------------------------------------------------- | --------------------------------------------- |\n| Folders            | /safe_folder/*         | /safe_folder/config.txt/safe_folder/config/config.txt | safe_folder2/configtxt/safe_folder2/config/config.txt |\n| Files              | /folder?/*/config.json | /folder/config.json/folder1/subfolder/config.json     | /folder99/config.json                         |\n| File extensions    | /folder/**/config.*     | /folder/config.json/folder/subfolder/config.txt       | /folder/config/folder/subfolder/myconfig.json |").optional()
}