import { z } from "zod"

export const inputParamsSchema = {
  "id": z.string().max(36).describe("The unique identifier of the exception"),
  "name": z.string().max(256).describe("Name of the custom exception").optional(),
  "description": z.string().max(2048).describe("Description of the custom exception").optional(),
  "targetEntities": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `targetEntities` to the tool, first call the tool `expandSchema` with \"/properties/targetEntities\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The locations of the objects or events excluded from detections.\n\nYou can define up to 10 targets. If you specify multiple targets, the rule is triggered when all targets are matched.\n\nDefault: All targets\n</property-description>").optional(),
  "event": z.object({ "category": z.literal("ENDPOINT_ACTIVITY").describe("Event type"), "id": z.enum(["TELEMETRY_PROCESS","TELEMETRY_FILE","TELEMETRY_CONNECTION","TELEMETRY_DNS","TELEMETRY_REGISTRY","TELEMETRY_ACCOUNT","TELEMETRY_INTERNET","TELEMETRY_MODIFIED_PROCESS","TELEMETRY_WINDOWS_HOOK","TELEMETRY_WINDOWS_EVENT","TELEMETRY_AMSI","TELEMETRY_WMI","TELEMETRY_MEMORY","TELEMETRY_BM","TELEMETRY_APP","TELEMETRY_SYSTEM_EVENT"]).describe("The unique identifier of an event type"), "subId": z.array(z.enum(["TELEMETRY_PROCESS_OPEN","TELEMETRY_PROCESS_CREATE","TELEMETRY_PROCESS_TERMINATE","TELEMETRY_PROCESS_LOAD_IMAGE","TELEMETRY_PROCESS_EXECUTE","TELEMETRY_PROCESS_CONNECT","TELEMETRY_PROCESS_TRACME","TELEMETRY_FILE_CREATE","TELEMETRY_FILE_OPEN","TELEMETRY_FILE_DELETE","TELEMETRY_FILE_SET_SECURITY","TELEMETRY_FILE_COPY","TELEMETRY_FILE_MOVE","TELEMETRY_FILE_CLOSE","TELEMETRY_FILE_MODIFY_TIMESTAMP","TELEMETRY_FILE_MODIFY","TELEMETRY_FILE_SET_ATTRIBUTES","TELEMETRY_FILE_ENUMERATE","TELEMETRY_CONNECTION_CONNECT","TELEMETRY_CONNECTION_LISTEN","TELEMETRY_CONNECTION_CONNECT_INBOUND","TELEMETRY_CONNECTION_CONNECT_OUTBOUND","TELEMETRY_DNS_QUERY","TELEMETRY_REGISTRY_CREATE","TELEMETRY_REGISTRY_SET","TELEMETRY_REGISTRY_DELETE","TELEMETRY_REGISTRY_RENAME","TELEMETRY_REGISTRY_ENUMERATE","TELEMETRY_REGISTRY_ENUMERATEVALUE","TELEMETRY_REGISTRY_QUERYVALUE","TELEMETRY_REGISTRY_SAVE","TELEMETRY_ACCOUNT_ADD","TELEMETRY_ACCOUNT_DELETE","TELEMETRY_ACCOUNT_IMPERSONATE","TELEMETRY_ACCOUNT_MODIFY","TELEMETRY_INTERNET_OPEN","TELEMETRY_INTERNET_CONNECT","TELEMETRY_INTERNET_DOWNLOAD","TELEMETRY_MODIFIED_PROCESS_CREATE_REMOTETHREAD","TELEMETRY_MODIFIED_PROCESS_WRITE_MEMORY","TELEMETRY_MODIFIED_PROCESS_WRITE_PROCESS","TELEMETRY_MODIFIED_PROCESS_READ_PROCESS","TELEMETRY_MODIFIED_PROCESS_WRITE_PROCESS_NAME","TELEMETRY_WINDOWS_HOOK_SET","TELEMETRY_AMSI_EXECUTE","TELEMETRY_MEMORY_MODIFY","TELEMETRY_MEMORY_MODIFY_PERMISSION","TELEMETRY_MEMORY_READ","TELEMETRY_BM_INVOKE","TELEMETRY_BM_INVOKE_API","TELEMETRY_APP_START","TELEMETRY_APP_STOP","TELEMETRY_APP_INSTALL","TELEMETRY_APP_UNINSTALL","TELEMETRY_SYSTEM_EVENT_ENABLE","TELEMETRY_SYSTEM_EVENT_DISABLE"])).describe("The secondary event identifier of an event type") }).optional(),
  "criteria": z.array(z.object({ "fieldType": z.literal("file_md5").describe("The type of match criteria"), "fieldName": z.enum(["parentFileHashMd5","processFileHashMd5","objectFileHashMd5","srcFileHashMd5","processPayloadFileHashMd5","parentPayloadFileHashMd5","attachmentFileHashMd5"]).describe("The field match criteria uses"), "fieldValues": z.array(z.string().describe("The value of the field. \n\nYou can specify up to 20 values. Values cannot exceed 2048 characters.\n\nSupported values: MD5 hashes with the following format: `^[A-Fa-f0-9]{32}{
  "id": z.string().max(36).describe("The unique identifier of the exception"),
  "name": z.string().max(256).describe("Name of the custom exception").optional(),
  "description": z.string().max(2048).describe("Description of the custom exception").optional(),
  "targetEntities": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `targetEntities` to the tool, first call the tool `expandSchema` with \"/properties/targetEntities\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The locations of the objects or events excluded from detections.\n\nYou can define up to 10 targets. If you specify multiple targets, the rule is triggered when all targets are matched.\n\nDefault: All targets\n</property-description>").optional(),
  "event": z.object({ "category": z.literal("ENDPOINT_ACTIVITY").describe("Event type"), "id": z.enum(["TELEMETRY_PROCESS","TELEMETRY_FILE","TELEMETRY_CONNECTION","TELEMETRY_DNS","TELEMETRY_REGISTRY","TELEMETRY_ACCOUNT","TELEMETRY_INTERNET","TELEMETRY_MODIFIED_PROCESS","TELEMETRY_WINDOWS_HOOK","TELEMETRY_WINDOWS_EVENT","TELEMETRY_AMSI","TELEMETRY_WMI","TELEMETRY_MEMORY","TELEMETRY_BM","TELEMETRY_APP","TELEMETRY_SYSTEM_EVENT"]).describe("The unique identifier of an event type"), "subId": z.array(z.enum(["TELEMETRY_PROCESS_OPEN","TELEMETRY_PROCESS_CREATE","TELEMETRY_PROCESS_TERMINATE","TELEMETRY_PROCESS_LOAD_IMAGE","TELEMETRY_PROCESS_EXECUTE","TELEMETRY_PROCESS_CONNECT","TELEMETRY_PROCESS_TRACME","TELEMETRY_FILE_CREATE","TELEMETRY_FILE_OPEN","TELEMETRY_FILE_DELETE","TELEMETRY_FILE_SET_SECURITY","TELEMETRY_FILE_COPY","TELEMETRY_FILE_MOVE","TELEMETRY_FILE_CLOSE","TELEMETRY_FILE_MODIFY_TIMESTAMP","TELEMETRY_FILE_MODIFY","TELEMETRY_FILE_SET_ATTRIBUTES","TELEMETRY_FILE_ENUMERATE","TELEMETRY_CONNECTION_CONNECT","TELEMETRY_CONNECTION_LISTEN","TELEMETRY_CONNECTION_CONNECT_INBOUND","TELEMETRY_CONNECTION_CONNECT_OUTBOUND","TELEMETRY_DNS_QUERY","TELEMETRY_REGISTRY_CREATE","TELEMETRY_REGISTRY_SET","TELEMETRY_REGISTRY_DELETE","TELEMETRY_REGISTRY_RENAME","TELEMETRY_REGISTRY_ENUMERATE","TELEMETRY_REGISTRY_ENUMERATEVALUE","TELEMETRY_REGISTRY_QUERYVALUE","TELEMETRY_REGISTRY_SAVE","TELEMETRY_ACCOUNT_ADD","TELEMETRY_ACCOUNT_DELETE","TELEMETRY_ACCOUNT_IMPERSONATE","TELEMETRY_ACCOUNT_MODIFY","TELEMETRY_INTERNET_OPEN","TELEMETRY_INTERNET_CONNECT","TELEMETRY_INTERNET_DOWNLOAD","TELEMETRY_MODIFIED_PROCESS_CREATE_REMOTETHREAD","TELEMETRY_MODIFIED_PROCESS_WRITE_MEMORY","TELEMETRY_MODIFIED_PROCESS_WRITE_PROCESS","TELEMETRY_MODIFIED_PROCESS_READ_PROCESS","TELEMETRY_MODIFIED_PROCESS_WRITE_PROCESS_NAME","TELEMETRY_WINDOWS_HOOK_SET","TELEMETRY_AMSI_EXECUTE","TELEMETRY_MEMORY_MODIFY","TELEMETRY_MEMORY_MODIFY_PERMISSION","TELEMETRY_MEMORY_READ","TELEMETRY_BM_INVOKE","TELEMETRY_BM_INVOKE_API","TELEMETRY_APP_START","TELEMETRY_APP_STOP","TELEMETRY_APP_INSTALL","TELEMETRY_APP_UNINSTALL","TELEMETRY_SYSTEM_EVENT_ENABLE","TELEMETRY_SYSTEM_EVENT_DISABLE"])).describe("The secondary event identifier of an event type") }).optional(),
  "criteria": \n")) })).max(10).describe("The objects or events excluded from detections.\n\nEach exception can have up to 10 criteria. If you specify multiple entries, the custom exception is triggered when all entries are matched.\n").optional()
}