{
  "type": "object",
  "properties": {
    "id": {
      "description": "Unique identifier for Prompt.",
      "type": "string",
      "title": "Prompt ID"
    },
    "log_id": {
      "description": "Unique identifier for the Log.",
      "type": "string",
      "title": "Log ID"
    },
    "output": {
      "type": "string",
      "title": "Model output",
      "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
    },
    "created_at": {
      "type": "string",
      "format": "date-time",
      "title": "Created at",
      "description": "User defined timestamp for when the log was created. "
    },
    "error": {
      "type": "string",
      "title": "Error",
      "description": "Error message if the log is an error."
    },
    "provider_latency": {
      "type": "number",
      "title": "Log latency",
      "description": "Duration of the logged event in seconds."
    },
    "stdout": {
      "type": "string",
      "title": "Standard Output",
      "description": "Captured log and debug statements."
    },
    "provider_request": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `provider_request` to the tool, first call the tool `expandSchema` with \"/properties/provider_request\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Raw request sent to provider.</property-description>",
      "additionalProperties": true
    },
    "provider_response": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `provider_response` to the tool, first call the tool `expandSchema` with \"/properties/provider_response\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Raw response received the provider.</property-description>",
      "additionalProperties": true
    },
    "inputs": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `inputs` to the tool, first call the tool `expandSchema` with \"/properties/inputs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The inputs passed to the prompt template.</property-description>",
      "additionalProperties": true
    },
    "source": {
      "type": "string",
      "title": "Source",
      "description": "Identifies where the model was called from."
    },
    "metadata": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `metadata` to the tool, first call the tool `expandSchema` with \"/properties/metadata\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Any additional metadata to record.</property-description>",
      "additionalProperties": true
    },
    "start_time": {
      "type": "string",
      "format": "date-time",
      "title": "Start time",
      "description": "When the logged event started."
    },
    "end_time": {
      "type": "string",
      "format": "date-time",
      "title": "End time",
      "description": "When the logged event ended."
    },
    "log_status": {
      "type": "string"
    }
  },
  "required": [
    "id",
    "log_id"
  ]
}