import { z } from "zod"

export const inputParamsSchema = {
  "version_id": z.string().describe("ID of the specific Dataset version to base the created Version on. Only used when `action` is `\"add\"` or `\"remove\"`.").optional(),
  "environment": z.string().describe("Name of the Environment identifying a deployed Version to base the created Version on. Only used when `action` is `\"add\"` or `\"remove\"`.").optional(),
  "include_datapoints": z.boolean().describe("If set to `true`, include all Datapoints in the response. Defaults to `false`. Consider using the paginated List Datapoints endpoint instead.").optional(),
  "path": z.string().describe("Path of the Dataset, including the name. This locates the Dataset in the Humanloop filesystem and is used as as a unique identifier. For example: `folder/name` or just `name`.").optional(),
  "id": z.string().describe("ID for an existing Dataset.").optional(),
  "datapoints": z.array(z.object({ "inputs": z.record(z.string()).describe("The inputs to the prompt template."), "messages": z.array(z.object({ "content": z.union([z.string(), z.array(z.union([z.object({ "type": z.literal("text"), "text": z.string().describe("The message's text content.") }), z.object({ "type": z.literal("image_url"), "image_url": z.string() })]))]).nullable().describe("The content of the message.").optional(), "name": z.string().nullable().describe("Optional name of the message author.").optional(), "tool_call_id": z.string().nullable().describe("Tool call that this message is responding to.").optional(), "role": z.string(), "tool_calls": z.array(z.object({ "id": z.string(), "type": z.literal("function").describe("The type of tool to call."), "function": z.object({ "name": z.string(), "arguments": z.string().optional() }).describe("A function tool to be called by the model where user owns runtime.") }).describe("A tool call to be made.")).nullable().describe("A list of tool calls requested by the assistant.").optional() })).describe("List of chat messages to provide to the model.").optional(), "target": z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean(), z.array(z.any()), z.record(z.any())])).describe("Object with criteria necessary to evaluate generations with this Datapoint. This is passed in as an argument to Evaluators when used in an Evaluation.").optional() })).describe("The Datapoints to create this Dataset version with. Modify the `action` field to determine how these Datapoints are used."),
  "action": z.string().optional(),
  "attributes": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `attributes` to the tool, first call the tool `expandSchema` with \"/properties/attributes\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Additional fields to describe the Dataset. Helpful to separate Dataset versions from each other with details on how they were created or used.</property-description>").optional(),
  "version_name": z.string().describe("Unique name for the Dataset version. Version names must be unique for a given Dataset.").optional(),
  "version_description": z.string().describe("Description of the version, e.g., the changes made in this version.").optional()
}