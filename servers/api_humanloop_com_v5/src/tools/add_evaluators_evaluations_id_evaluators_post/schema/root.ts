import { z } from "zod"

export const inputParamsSchema = {
  "id": z.string().describe("Unique identifier for Evaluation."),
  "evaluators": z.array(z.union([z.object({ "version_id": z.string().describe("Unique identifier for the Version."), "orchestrated": z.boolean().describe("Whether the Evaluator is orchestrated by Humanloop. Default is `True`. If `False`, a log for the Evaluator should be submitted by the user via the API.") }).describe("Base model for specifying an Evaluator for an Evaluation."), z.object({ "environment": z.string().describe("If provided, the Version deployed to this Environment is used. If not provided, the Version deployed to the default Environment is used.").optional(), "id": z.string().describe("Unique identifier for the File."), "orchestrated": z.boolean().describe("Whether the Evaluator is orchestrated by Humanloop. Default is `True`. If `False`, a log for the Evaluator should be submitted by the user via the API.") }).describe("Base model for specifying an Evaluator for an Evaluation."), z.object({ "environment": z.string().describe("If provided, the Version deployed to this Environment is used. If not provided, the Version deployed to the default Environment is used.").optional(), "path": z.string().describe("Path identifying a File. Provide this to specify a File."), "orchestrated": z.boolean().describe("Whether the Evaluator is orchestrated by Humanloop. Default is `True`. If `False`, a log for the Evaluator should be submitted by the user via the API.") }).describe("Base model for specifying an Evaluator for an Evaluation.")])).describe("The Evaluators to add to this Evaluation.")
}