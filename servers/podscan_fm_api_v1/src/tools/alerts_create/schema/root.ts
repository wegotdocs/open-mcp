import { z } from "zod"

export const inputParams = {
  "team": z.string().describe("The ID of the team as a string"),
  "alert_name": z.string().describe("Name of the alert, mostly for reference in the UI and notification emails"),
  "prompt_filters": z.array(z.string()).describe("A list of strings to scan for, with wildcard (`word*`), negation (`word NOT unwanted_word`), and phrase (`\"word word\"`) support\nHas to be between 1 and 10 items."),
  "alert_enabled": z.boolean().describe("Whether the alert should run or be paused. `true` or `false`.").optional(),
  "notification_email": z.union([z.string().email().describe("An email address to send a notification to when a new mention is found. Defaults to your account's email or the team's email if set."), z.null().describe("An email address to send a notification to when a new mention is found. Defaults to your account's email or the team's email if set.")]).describe("An email address to send a notification to when a new mention is found. Defaults to your account's email or the team's email if set.").optional(),
  "notification_summary_enabled": z.boolean().describe("Whether to send a summary of the alert's mentions instead of one email per mention. `true` or `false`.").optional(),
  "notification_summary_frequency": z.union([z.string().max(255).describe("How often to send a summary of the alert's mentions. `daily`, `weekly`, or `monthly`."), z.null().describe("How often to send a summary of the alert's mentions. `daily`, `weekly`, or `monthly`.")]).describe("How often to send a summary of the alert's mentions. `daily`, `weekly`, or `monthly`.").optional(),
  "webhook_enabled": z.boolean().describe("Whether to send a POST request to a URL when a new mention is found. `true` or `false`.").optional(),
  "webhook_url": z.union([z.string().url().describe("A URL to send a POST request to when a new mention is found. The request will contain a JSON object with the mention's details."), z.null().describe("A URL to send a POST request to when a new mention is found. The request will contain a JSON object with the mention's details.")]).describe("A URL to send a POST request to when a new mention is found. The request will contain a JSON object with the mention's details.").optional(),
  "prompt_question_enabled": z.boolean().describe("Whether to ask an AI-answered question of teh transcript when a new mention is found. `true` or `false`. Defaults to `false`.").optional(),
  "prompt_question": z.union([z.string().describe("The Yes/No question to ask the AI when a new mention is found. Only used if `prompt_question_enabled` is `true`."), z.null().describe("The Yes/No question to ask the AI when a new mention is found. Only used if `prompt_question_enabled` is `true`.")]).describe("The Yes/No question to ask the AI when a new mention is found. Only used if `prompt_question_enabled` is `true`.").optional(),
  "restrict_to_category_ids": z.union([z.string().describe("A comma-separated list of category IDs to restrict the alert to. If not set, the alert will scan all categories."), z.null().describe("A comma-separated list of category IDs to restrict the alert to. If not set, the alert will scan all categories.")]).describe("A comma-separated list of category IDs to restrict the alert to. If not set, the alert will scan all categories.").optional(),
  "ignore_category_ids": z.union([z.string().describe("A comma-separated list of category IDs to ignore for the alert. If not set, the alert will ignore no categories."), z.null().describe("A comma-separated list of category IDs to ignore for the alert. If not set, the alert will ignore no categories.")]).describe("A comma-separated list of category IDs to ignore for the alert. If not set, the alert will ignore no categories.").optional(),
  "restrict_to_podcast_ids": z.union([z.string().describe("A comma-separated list of podcast IDs to restrict the alert to. If not set, the alert will scan all podcasts."), z.null().describe("A comma-separated list of podcast IDs to restrict the alert to. If not set, the alert will scan all podcasts.")]).describe("A comma-separated list of podcast IDs to restrict the alert to. If not set, the alert will scan all podcasts.").optional(),
  "ignore_podcast_ids": z.union([z.string().describe("A comma-separated list of podcast IDs to ignore for the alert. If not set, the alert will ignore no podcasts."), z.null().describe("A comma-separated list of podcast IDs to ignore for the alert. If not set, the alert will ignore no podcasts.")]).describe("A comma-separated list of podcast IDs to ignore for the alert. If not set, the alert will ignore no podcasts.").optional()
}