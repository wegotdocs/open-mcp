{
  "type": "object",
  "properties": {
    "activity_base_info": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `activity_base_info` to the tool, first call the tool `expandSchema` with \"/properties/activity_base_info\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "activity_id": {
      "description": "活动id",
      "example": "2016042700826004508401111111",
      "type": "string"
    },
    "merchant_access_mode": {
      "description": "商户接入模式",
      "example": "AGENCY_MODE",
      "type": "string"
    },
    "out_biz_no": {
      "description": "外部业务单号，用作幂等控制。 幂等作用： 参数不变的情况下，再次请求返回与上一次相同的结果。",
      "example": "20170101000001654bb46ba",
      "type": "string"
    },
    "publish_end_time": {
      "description": "券发放结束时间。格式为：yyyy-MM-dd HH:mm:ss",
      "example": "2017-01-29 23:59:59",
      "type": "string"
    },
    "voucher_available_scope_info": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `voucher_available_scope_info` to the tool, first call the tool `expandSchema` with \"/properties/voucher_available_scope_info\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "voucher_send_mode_info": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `voucher_send_mode_info` to the tool, first call the tool `expandSchema` with \"/properties/voucher_send_mode_info\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "voucher_use_rule": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `voucher_use_rule` to the tool, first call the tool `expandSchema` with \"/properties/voucher_use_rule\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "voucher_use_rule_info": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `voucher_use_rule_info` to the tool, first call the tool `expandSchema` with \"/properties/voucher_use_rule_info\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    }
  },
  "required": []
}