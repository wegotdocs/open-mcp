import { z } from "zod"

export const inputParams = {
  "basic_config": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `basic_config` to the tool, first call the tool `expandSchema` with \"/properties/basic_config\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "ext_config": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `ext_config` to the tool, first call the tool `expandSchema` with \"/properties/ext_config\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "obligation_config": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `obligation_config` to the tool, first call the tool `expandSchema` with \"/properties/obligation_config\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "open_config": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `open_config` to the tool, first call the tool `expandSchema` with \"/properties/open_config\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "quit_config": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `quit_config` to the tool, first call the tool `expandSchema` with \"/properties/quit_config\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "right_config": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `right_config` to the tool, first call the tool `expandSchema` with \"/properties/right_config\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "settlement_config": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `settlement_config` to the tool, first call the tool `expandSchema` with \"/properties/settlement_config\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional()
}