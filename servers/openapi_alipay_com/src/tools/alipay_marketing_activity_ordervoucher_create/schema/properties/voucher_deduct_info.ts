import { z } from "zod"

export const inputParams = {
  "customer_define_voucher_info": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `customer_define_voucher_info` to the tool, first call the tool `expandSchema` with \"/properties/voucher_deduct_info/properties/customer_define_voucher_info\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "discount_voucher_info": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `discount_voucher_info` to the tool, first call the tool `expandSchema` with \"/properties/voucher_deduct_info/properties/discount_voucher_info\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "exchange_voucher_info": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `exchange_voucher_info` to the tool, first call the tool `expandSchema` with \"/properties/voucher_deduct_info/properties/exchange_voucher_info\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "fix_voucher_info": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `fix_voucher_info` to the tool, first call the tool `expandSchema` with \"/properties/voucher_deduct_info/properties/fix_voucher_info\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "special_voucher_info": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `special_voucher_info` to the tool, first call the tool `expandSchema` with \"/properties/voucher_deduct_info/properties/special_voucher_info\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "voucher_type": z.string().describe("券类型。").optional()
}