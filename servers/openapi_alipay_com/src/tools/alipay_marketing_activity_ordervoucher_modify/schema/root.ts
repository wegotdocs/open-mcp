import { z } from "zod"

export const inputParams = {
  "activity_id": z.string().describe("活动id1"),
  "activity_base_info": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `activity_base_info` to the tool, first call the tool `expandSchema` with \"/properties/activity_base_info\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "activity_name": z.string().describe("活动名称。").optional(),
  "customer_guide": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `customer_guide` to the tool, first call the tool `expandSchema` with \"/properties/customer_guide\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "merchant_access_mode": z.string().describe("商户接入模式").optional(),
  "out_biz_no": z.string().describe("外部业务单号，用作幂等控制。\t幂等作用：\t参数不变的情况下，再次请求返回与上一次相同的结果。").optional(),
  "publish_end_time": z.string().describe("券发放结束时间。该值为空表示不修改\t格式为：yyyy-MM-dd HH:mm:ss").optional(),
  "publish_start_time": z.string().describe("券发放开始时间。 格式为：yyyy-MM-dd HH:mm:ss").optional(),
  "voucher_available_scope_info": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `voucher_available_scope_info` to the tool, first call the tool `expandSchema` with \"/properties/voucher_available_scope_info\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "voucher_available_scope_modify_type": z.string().describe("可用范围修改类型。").optional(),
  "voucher_customer_guide_info": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `voucher_customer_guide_info` to the tool, first call the tool `expandSchema` with \"/properties/voucher_customer_guide_info\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "voucher_display_info": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `voucher_display_info` to the tool, first call the tool `expandSchema` with \"/properties/voucher_display_info\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "voucher_display_pattern_info": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `voucher_display_pattern_info` to the tool, first call the tool `expandSchema` with \"/properties/voucher_display_pattern_info\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "voucher_send_mode_info": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `voucher_send_mode_info` to the tool, first call the tool `expandSchema` with \"/properties/voucher_send_mode_info\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "voucher_send_rule": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `voucher_send_rule` to the tool, first call the tool `expandSchema` with \"/properties/voucher_send_rule\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "voucher_use_rule": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `voucher_use_rule` to the tool, first call the tool `expandSchema` with \"/properties/voucher_use_rule\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "voucher_use_rule_info": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `voucher_use_rule_info` to the tool, first call the tool `expandSchema` with \"/properties/voucher_use_rule_info\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional()
}