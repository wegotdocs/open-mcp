import { z } from "zod"

export const inputParams = {
  "consult_mode": z.string().describe("费控咨询模式，默认为0。").optional(),
  "currency": z.string().describe("该字段用于管控制度下发放的资产币种，不填写默认为人民币，设置该字段后，制度下手工发放的资产币种均为设置值。").optional(),
  "effective_end_date": z.string().describe("制度生效结束时间").optional(),
  "effective_start_date": z.string().describe("制度生效起始时间").optional(),
  "enterprise_id": z.string().describe("企业id").optional(),
  "expense_type": z.string().describe("费用类型").optional(),
  "institution_desc": z.string().describe("制度描述").optional(),
  "institution_name": z.string().describe("制度名称").optional(),
  "institution_scope_info": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `institution_scope_info` to the tool, first call the tool `expandSchema` with \"/properties/institution_scope_info\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "issue_rule_info_list": z.array(z.object({ "effective_period": z.string().describe("生效时间段").optional(), "invalid_mode": z.number().int().describe("累计类型，默认为0\t可选值：0（不可累计）、1（可累计）、2（累计天数）、3（累计到指定日期）").optional(), "invalid_mode_value": z.string().describe("累计类型值").optional(), "issue_amount_value": z.string().describe("发放金额，单位元").optional(), "issue_end_date": z.string().describe("发放规则有效结束时间").optional(), "issue_rule_id": z.string().describe("发放规则id").optional(), "issue_rule_name": z.string().describe("发放规则名称").optional(), "issue_start_date": z.string().describe("发放规则有效起始时间").optional(), "issue_type": z.string().describe("发放类型").optional(), "outer_source_id": z.string().describe("外部发放规则id").optional(), "quota_type": z.string().describe("额度类型").optional(), "share_mode": z.number().int().describe("是否可转赠").optional(), "target_id": z.string().describe("目标id").optional(), "target_type": z.string().describe("发放规则归属的目标类型").optional() })).describe("发放规则列表").optional(),
  "outer_source_id": z.string().describe("外部唯一标识，可用于防止重复创建").optional(),
  "standard_info_list": z.array(z.object({ "asset_share_source_info": z.object({ "share_mode": z.string().describe("当前规则可用的资产来源类型，搭配source_id_list使用。").optional(), "source_id_list": z.array(z.string()).describe("资产共享来源id列表，与share_mode配合设置，如果share_mode为INSTITUTION，该值则填写制度id列表").optional() }).optional(), "consume_mode": z.string().describe("消费模式，不填为默认模式，枚举值：COUPON_ONLY（仅支持点券）\tCOUPON_AND_CAP（支持点券+余额）\tDEFAULT（默认模式）\t点券：消费时找员工的点券，没有或者用完了不可付；\t点券+余额：消费时找员工的点券，没有找员工的余额，没有或者用完了不可付。\t默认：有给员工设置员工余额以员工余额为准，用完为止。否则只受规则里的限额和企业账户资金上限管控；").optional(), "expense_type_sub_category": z.string().describe("费用类型子类").optional(), "open_rule_id": z.string().describe("开票规则id，可通过接口alipay.ebpp.invoice.enterpriseconsume.enterpriseopenrule.create 创建并得到开票规则ID").optional(), "outer_source_id": z.string().describe("外部使用规则id，制度内使用规则该字段不允许重复").optional(), "payment_policy": z.string().describe("支付策略 当笔消费金额大于规则可用余额时，用于控制支付策略，该字段缺省时采取因公账户和个人账户组合支付策略").optional(), "personal_qrcode_mode": z.number().int().describe("个人收款码转账是否支持因公付，默认为0。可选值：0（不支持）、1（支持）").optional(), "standard_condition_info_list": z.array(z.object({ "rule_factor": z.string().describe("条件类型").optional(), "rule_id": z.string().describe("费控条件ID").optional(), "rule_name": z.string().describe("费控条件名称").optional(), "rule_value": z.string().describe("费控条件值").optional() })).describe("使用规则条件列表").optional(), "standard_desc": z.string().describe("使用规则描述(敏感词校验)").optional(), "standard_id": z.string().describe("制度ID（创建使用规则时非必填）").optional(), "standard_name": z.string().describe("规则名称").optional() })).describe("使用规则列表").optional()
}