{
  "type": "object",
  "properties": {
    "idOrName": {
      "description": "The unique project identifier or the project name",
      "example": "prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB",
      "type": "string"
    },
    "teamId": {
      "description": "The Team identifier to perform the request on behalf of.",
      "type": "string"
    },
    "slug": {
      "description": "The Team slug to perform the request on behalf of.",
      "type": "string"
    },
    "autoExposeSystemEnvs": {
      "type": "boolean"
    },
    "autoAssignCustomDomains": {
      "type": "boolean"
    },
    "autoAssignCustomDomainsUpdatedBy": {
      "type": "string"
    },
    "buildCommand": {
      "description": "The build command for this project. When `null` is used this value will be automatically detected",
      "maxLength": 256,
      "type": "string",
      "nullable": true
    },
    "commandForIgnoringBuildStep": {
      "maxLength": 256,
      "type": "string",
      "nullable": true
    },
    "customerSupportCodeVisibility": {
      "description": "Specifies whether customer support can see git source for a deployment",
      "type": "boolean"
    },
    "devCommand": {
      "description": "The dev command for this project. When `null` is used this value will be automatically detected",
      "maxLength": 256,
      "type": "string",
      "nullable": true
    },
    "directoryListing": {
      "type": "boolean"
    },
    "framework": {
      "description": "The framework that is being used for this project. When `null` is used no framework is selected",
      "enum": [
        null,
        "blitzjs",
        "nextjs",
        "gatsby",
        "remix",
        "react-router",
        "astro",
        "hexo",
        "eleventy",
        "docusaurus-2",
        "docusaurus",
        "preact",
        "solidstart-1",
        "solidstart",
        "dojo",
        "ember",
        "vue",
        "scully",
        "ionic-angular",
        "angular",
        "polymer",
        "svelte",
        "sveltekit",
        "sveltekit-1",
        "ionic-react",
        "create-react-app",
        "gridsome",
        "umijs",
        "sapper",
        "saber",
        "stencil",
        "nuxtjs",
        "redwoodjs",
        "hugo",
        "jekyll",
        "brunch",
        "middleman",
        "zola",
        "hydrogen",
        "vite",
        "vitepress",
        "vuepress",
        "parcel",
        "fasthtml",
        "sanity-v3",
        "sanity",
        "storybook"
      ],
      "type": "string",
      "nullable": true
    },
    "gitForkProtection": {
      "description": "Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed",
      "type": "boolean"
    },
    "gitLFS": {
      "description": "Specifies whether Git LFS is enabled for this project.",
      "type": "boolean"
    },
    "installCommand": {
      "description": "The install command for this project. When `null` is used this value will be automatically detected",
      "maxLength": 256,
      "type": "string",
      "nullable": true
    },
    "name": {
      "description": "The desired name for the project",
      "example": "a-project-name",
      "type": "string",
      "maxLength": 100
    },
    "nodeVersion": {
      "enum": [
        "22.x",
        "20.x",
        "18.x",
        "16.x",
        "14.x",
        "12.x",
        "10.x"
      ],
      "type": "string"
    },
    "outputDirectory": {
      "description": "The output directory of the project. When `null` is used this value will be automatically detected",
      "maxLength": 256,
      "type": "string",
      "nullable": true
    },
    "previewDeploymentsDisabled": {
      "description": "Specifies whether preview deployments are disabled for this project.",
      "type": "boolean",
      "nullable": true
    },
    "publicSource": {
      "description": "Specifies whether the source code and logs of the deployments for this project should be public or not",
      "type": "boolean",
      "nullable": true
    },
    "rootDirectory": {
      "description": "The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root",
      "maxLength": 256,
      "type": "string",
      "nullable": true
    },
    "serverlessFunctionRegion": {
      "description": "The region to deploy Serverless Functions in this project",
      "maxLength": 4,
      "type": "string",
      "nullable": true
    },
    "serverlessFunctionZeroConfigFailover": {
      "description": "Specifies whether Zero Config Failover is enabled for this project.",
      "anyOf": [
        {
          "type": "boolean"
        }
      ]
    },
    "skewProtectionBoundaryAt": {
      "description": "Deployments created before this absolute datetime have Skew Protection disabled. Value is in milliseconds since epoch to match \\\"createdAt\\\" fields.",
      "minimum": 0,
      "type": "integer"
    },
    "skewProtectionMaxAge": {
      "description": "Deployments created before this rolling window have Skew Protection disabled. Value is in seconds to match \\\"revalidate\\\" fields.",
      "minimum": 0,
      "type": "integer"
    },
    "sourceFilesOutsideRootDirectory": {
      "description": "Indicates if there are source files outside of the root directory",
      "type": "boolean"
    },
    "enablePreviewFeedback": {
      "description": "Opt-in to preview toolbar on the project level",
      "type": "boolean",
      "nullable": true
    },
    "enableProductionFeedback": {
      "description": "Opt-in to production toolbar on the project level",
      "type": "boolean",
      "nullable": true
    },
    "enableAffectedProjectsDeployments": {
      "description": "Opt-in to skip deployments when there are no changes to the root directory and its dependencies",
      "type": "boolean"
    },
    "oidcTokenConfig": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `oidcTokenConfig` to the tool, first call the tool `expandSchema` with \"/properties/oidcTokenConfig\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>OpenID Connect JSON Web Token generation configuration.</property-description>",
      "additionalProperties": true
    },
    "passwordProtection": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `passwordProtection` to the tool, first call the tool `expandSchema` with \"/properties/passwordProtection\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Allows to protect project deployments with a password</property-description>",
      "additionalProperties": true
    },
    "ssoProtection": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `ssoProtection` to the tool, first call the tool `expandSchema` with \"/properties/ssoProtection\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team</property-description>",
      "additionalProperties": true
    },
    "trustedIps": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `trustedIps` to the tool, first call the tool `expandSchema` with \"/properties/trustedIps\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Restricts access to deployments based on the incoming request IP address</property-description>",
      "additionalProperties": true
    },
    "optionsAllowlist": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `optionsAllowlist` to the tool, first call the tool `expandSchema` with \"/properties/optionsAllowlist\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Specify a list of paths that should not be protected by Deployment Protection to enable Cors preflight requests</property-description>",
      "additionalProperties": true
    }
  },
  "required": [
    "idOrName"
  ]
}