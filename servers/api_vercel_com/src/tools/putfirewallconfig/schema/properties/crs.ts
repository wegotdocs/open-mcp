import { z } from "zod"

export const inputParams = {
  "sd": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `sd` to the tool, first call the tool `expandSchema` with \"/properties/crs/properties/sd\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "ma": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `ma` to the tool, first call the tool `expandSchema` with \"/properties/crs/properties/ma\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "lfi": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `lfi` to the tool, first call the tool `expandSchema` with \"/properties/crs/properties/lfi\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "rfi": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `rfi` to the tool, first call the tool `expandSchema` with \"/properties/crs/properties/rfi\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "rce": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `rce` to the tool, first call the tool `expandSchema` with \"/properties/crs/properties/rce\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "php": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `php` to the tool, first call the tool `expandSchema` with \"/properties/crs/properties/php\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "gen": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `gen` to the tool, first call the tool `expandSchema` with \"/properties/crs/properties/gen\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "xss": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `xss` to the tool, first call the tool `expandSchema` with \"/properties/crs/properties/xss\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "sqli": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `sqli` to the tool, first call the tool `expandSchema` with \"/properties/crs/properties/sqli\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "sf": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `sf` to the tool, first call the tool `expandSchema` with \"/properties/crs/properties/sf\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "java": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `java` to the tool, first call the tool `expandSchema` with \"/properties/crs/properties/java\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional()
}