import { z } from "zod"

export const inputParams = {
  "projectId": z.string(),
  "teamId": z.string().describe("The Team identifier to perform the request on behalf of.").optional(),
  "slug": z.string().describe("The Team slug to perform the request on behalf of.").optional(),
  "firewallEnabled": z.boolean(),
  "managedRules": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `managedRules` to the tool, first call the tool `expandSchema` with \"/properties/managedRules\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "crs": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `crs` to the tool, first call the tool `expandSchema` with \"/properties/crs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "rules": z.array(z.object({ "id": z.string().optional(), "name": z.string().max(160), "description": z.string().max(256).optional(), "active": z.boolean(), "conditionGroup": z.array(z.object({ "conditions": z.array(z.object({ "type": z.enum(["host","path","method","header","query","cookie","target_path","raw_path","ip_address","region","protocol","scheme","environment","user_agent","geo_continent","geo_country","geo_country_region","geo_city","geo_as_number","ja4_digest","ja3_digest","rate_limit_api_id"]), "op": z.enum(["re","eq","neq","ex","nex","inc","ninc","pre","suf","sub","gt","gte","lt","lte"]), "neg": z.boolean().optional(), "key": z.string().optional(), "value": z.union([z.string(), z.array(z.string()).max(75), z.number()]).optional() }).strict()).max(65) }).strict()).max(25), "action": z.object({ "mitigate": z.object({ "action": z.enum(["log","challenge","deny","bypass","rate_limit","redirect"]), "rateLimit": z.union([z.object({ "algo": z.enum(["fixed_window","token_bucket"]), "window": z.number(), "limit": z.number(), "keys": z.array(z.string()), "action": z.union([z.enum(["log","challenge","deny","rate_limit"]), z.null()]).optional() }).strict(), z.null()]).optional(), "redirect": z.union([z.object({ "location": z.string(), "permanent": z.boolean() }).strict(), z.null()]).optional(), "actionDuration": z.string().nullable().optional(), "bypassSystem": z.boolean().nullable().optional() }).strict().optional() }).strict() }).strict()).optional(),
  "ips": z.array(z.object({ "id": z.string().optional(), "hostname": z.string(), "ip": z.string(), "notes": z.string().optional(), "action": z.enum(["deny","challenge","log","bypass"]) }).strict()).optional()
}