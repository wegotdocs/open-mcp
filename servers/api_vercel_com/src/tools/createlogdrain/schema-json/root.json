{
  "type": "object",
  "properties": {
    "teamId": {
      "description": "The Team identifier to perform the request on behalf of.",
      "type": "string"
    },
    "slug": {
      "description": "The Team slug to perform the request on behalf of.",
      "type": "string"
    },
    "name": {
      "description": "The name of the log drain",
      "example": "My first log drain",
      "maxLength": 100,
      "pattern": "^[A-z0-9_ -]+$",
      "type": "string"
    },
    "projectIds": {
      "minItems": 1,
      "maxItems": 50,
      "type": "array",
      "items": {
        "pattern": "^[a-zA-z0-9_]+$",
        "type": "string"
      }
    },
    "secret": {
      "description": "A secret to sign log drain notification headers so a consumer can verify their authenticity",
      "example": "a1Xsfd325fXcs",
      "maxLength": 100,
      "pattern": "^[A-z0-9_ -]+$",
      "type": "string"
    },
    "deliveryFormat": {
      "description": "The delivery log format",
      "example": "json",
      "enum": [
        "json",
        "ndjson",
        "syslog"
      ]
    },
    "url": {
      "description": "The url where you will receive logs. The protocol must be `https://` or `http://` when type is `json` and `ndjson`, and `syslog+tls:` or `syslog:` when the type is `syslog`.",
      "example": "https://example.com/log-drain",
      "format": "uri",
      "pattern": "^(https?|syslog\\\\+tls|syslog)://",
      "type": "string"
    },
    "sources": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "string",
        "enum": [
          "static",
          "lambda",
          "build",
          "edge",
          "external",
          "firewall"
        ]
      },
      "minItems": 1
    },
    "headers": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `headers` to the tool, first call the tool `expandSchema` with \"/properties/headers\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Headers to be sent together with the request</property-description>",
      "additionalProperties": true
    },
    "environments": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "string",
        "enum": [
          "preview",
          "production"
        ]
      },
      "minItems": 1
    }
  },
  "required": [
    "name",
    "url"
  ]
}