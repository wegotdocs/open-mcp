{
  "type": "object",
  "properties": {
    "uid": {
      "description": "The ID of the member.",
      "type": "string",
      "example": "ndfasllgPyCtREAqxxdyFKb"
    },
    "confirmed": {
      "type": "boolean",
      "enum": [
        true
      ],
      "description": "Accept a user who requested access to the team.",
      "example": true
    },
    "role": {
      "type": "string",
      "description": "The role in the team of the member.",
      "default": [
        "MEMBER",
        "VIEWER"
      ],
      "example": [
        "MEMBER",
        "VIEWER"
      ]
    },
    "projects": {
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "role",
          "projectId"
        ],
        "properties": {
          "projectId": {
            "type": "string",
            "maxLength": 256,
            "example": "prj_ndlgr43fadlPyCtREAqxxdyFK",
            "description": "The ID of the project."
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "PROJECT_VIEWER",
              "PROJECT_DEVELOPER",
              null
            ],
            "example": "ADMIN",
            "description": "The project role of the member that will be added. \\\"null\\\" will remove this project level role.",
            "nullable": true
          }
        }
      }
    },
    "joinedFrom": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `joinedFrom` to the tool, first call the tool `expandSchema` with \"/properties/joinedFrom\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    }
  },
  "required": [
    "uid"
  ]
}