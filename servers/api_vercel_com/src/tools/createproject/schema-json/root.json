{
  "type": "object",
  "properties": {
    "teamId": {
      "description": "The Team identifier to perform the request on behalf of.",
      "type": "string"
    },
    "slug": {
      "description": "The Team slug to perform the request on behalf of.",
      "type": "string"
    },
    "buildCommand": {
      "description": "The build command for this project. When `null` is used this value will be automatically detected",
      "maxLength": 256,
      "type": "string",
      "nullable": true
    },
    "commandForIgnoringBuildStep": {
      "maxLength": 256,
      "type": "string",
      "nullable": true
    },
    "devCommand": {
      "description": "The dev command for this project. When `null` is used this value will be automatically detected",
      "maxLength": 256,
      "type": "string",
      "nullable": true
    },
    "environmentVariables": {
      "description": "Collection of ENV Variables the Project will use",
      "items": {
        "properties": {
          "key": {
            "description": "Name of the ENV variable",
            "type": "string"
          },
          "target": {
            "description": "Deployment Target or Targets in which the ENV variable will be used",
            "anyOf": [
              {
                "enum": [
                  "production",
                  "preview",
                  "development"
                ]
              }
            ]
          },
          "gitBranch": {
            "description": "If defined, the git branch of the environment variable (must have target=preview)",
            "type": "string",
            "maxLength": 250
          },
          "type": {
            "description": "Type of the ENV variable",
            "enum": [
              "system",
              "secret",
              "encrypted",
              "plain",
              "sensitive"
            ],
            "type": "string"
          },
          "value": {
            "description": "Value for the ENV variable",
            "type": "string"
          }
        },
        "required": [
          "key",
          "value",
          "target"
        ],
        "type": "object"
      },
      "type": "array"
    },
    "framework": {
      "description": "The framework that is being used for this project. When `null` is used no framework is selected",
      "enum": [
        null,
        "blitzjs",
        "nextjs",
        "gatsby",
        "remix",
        "react-router",
        "astro",
        "hexo",
        "eleventy",
        "docusaurus-2",
        "docusaurus",
        "preact",
        "solidstart-1",
        "solidstart",
        "dojo",
        "ember",
        "vue",
        "scully",
        "ionic-angular",
        "angular",
        "polymer",
        "svelte",
        "sveltekit",
        "sveltekit-1",
        "ionic-react",
        "create-react-app",
        "gridsome",
        "umijs",
        "sapper",
        "saber",
        "stencil",
        "nuxtjs",
        "redwoodjs",
        "hugo",
        "jekyll",
        "brunch",
        "middleman",
        "zola",
        "hydrogen",
        "vite",
        "vitepress",
        "vuepress",
        "parcel",
        "fasthtml",
        "sanity-v3",
        "sanity",
        "storybook"
      ]
    },
    "gitRepository": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `gitRepository` to the tool, first call the tool `expandSchema` with \"/properties/gitRepository\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed</property-description>",
      "additionalProperties": true
    },
    "installCommand": {
      "description": "The install command for this project. When `null` is used this value will be automatically detected",
      "maxLength": 256,
      "type": "string",
      "nullable": true
    },
    "name": {
      "description": "The desired name for the project",
      "example": "a-project-name",
      "type": "string",
      "maxLength": 100
    },
    "outputDirectory": {
      "description": "The output directory of the project. When `null` is used this value will be automatically detected",
      "maxLength": 256,
      "type": "string",
      "nullable": true
    },
    "publicSource": {
      "description": "Specifies whether the source code and logs of the deployments for this project should be public or not",
      "type": "boolean",
      "nullable": true
    },
    "rootDirectory": {
      "description": "The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root",
      "maxLength": 256,
      "type": "string",
      "nullable": true
    },
    "serverlessFunctionRegion": {
      "description": "The region to deploy Serverless Functions in this project",
      "maxLength": 4,
      "type": "string",
      "nullable": true
    },
    "serverlessFunctionZeroConfigFailover": {
      "description": "Specifies whether Zero Config Failover is enabled for this project.",
      "anyOf": [
        {
          "type": "boolean"
        }
      ]
    },
    "oidcTokenConfig": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `oidcTokenConfig` to the tool, first call the tool `expandSchema` with \"/properties/oidcTokenConfig\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>OpenID Connect JSON Web Token generation configuration.</property-description>",
      "additionalProperties": true
    },
    "enableAffectedProjectsDeployments": {
      "description": "Opt-in to skip deployments when there are no changes to the root directory and its dependencies",
      "type": "boolean"
    }
  },
  "required": [
    "name"
  ]
}