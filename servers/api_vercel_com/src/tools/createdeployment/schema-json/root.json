{
  "type": "object",
  "properties": {
    "forceNew": {
      "description": "Forces a new deployment even if there is a previous similar deployment",
      "enum": [
        "0",
        "1"
      ]
    },
    "skipAutoDetectionConfirmation": {
      "description": "Allows to skip framework detection so the API would not fail to ask for confirmation",
      "enum": [
        "0",
        "1"
      ]
    },
    "teamId": {
      "description": "The Team identifier to perform the request on behalf of.",
      "type": "string"
    },
    "slug": {
      "description": "The Team slug to perform the request on behalf of.",
      "type": "string"
    },
    "customEnvironmentSlugOrId": {
      "description": "Deploy to a custom environment, which will override the default environment",
      "type": "string"
    },
    "deploymentId": {
      "description": "An deployment id for an existing deployment to redeploy",
      "type": "string"
    },
    "files": {
      "description": "A list of objects with the files to be deployed",
      "items": {
        "anyOf": [
          {
            "additionalProperties": false,
            "description": "Used in the case you want to inline a file inside the request",
            "properties": {
              "data": {
                "description": "The file content, it could be either a `base64` (useful for images, etc.) of the files or the plain content for source code",
                "type": "string"
              },
              "encoding": {
                "description": "The file content encoding, it could be either a base64 (useful for images, etc.) of the files or the plain text for source code.",
                "enum": [
                  "base64",
                  "utf-8"
                ]
              },
              "file": {
                "description": "The file name including the whole path",
                "example": "folder/file.js",
                "type": "string"
              }
            },
            "required": [
              "file",
              "data"
            ],
            "title": "InlinedFile",
            "type": "object"
          }
        ]
      },
      "type": "array"
    },
    "gitMetadata": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `gitMetadata` to the tool, first call the tool `expandSchema` with \"/properties/gitMetadata\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Populates initial git metadata for different git providers.</property-description>",
      "additionalProperties": true
    },
    "gitSource": {
      "description": "Defines the Git Repository source to be deployed. This property can not be used in combination with `files`.",
      "anyOf": [
        {
          "properties": {
            "ref": {
              "type": "string"
            },
            "repoId": {
              "anyOf": [
                {
                  "type": "number"
                }
              ]
            },
            "sha": {
              "type": "string"
            },
            "type": {
              "enum": [
                "github"
              ],
              "type": "string"
            }
          },
          "required": [
            "type",
            "ref",
            "repoId"
          ],
          "type": "object"
        },
        {
          "properties": {
            "org": {
              "type": "string"
            },
            "ref": {
              "type": "string"
            },
            "repo": {
              "type": "string"
            },
            "sha": {
              "type": "string"
            },
            "type": {
              "enum": [
                "github"
              ],
              "type": "string"
            }
          },
          "required": [
            "type",
            "ref",
            "org",
            "repo"
          ],
          "type": "object"
        },
        {
          "properties": {
            "projectId": {
              "anyOf": [
                {
                  "type": "number"
                }
              ]
            },
            "ref": {
              "type": "string"
            },
            "sha": {
              "type": "string"
            },
            "type": {
              "enum": [
                "gitlab"
              ],
              "type": "string"
            }
          },
          "required": [
            "type",
            "ref",
            "projectId"
          ],
          "type": "object"
        },
        {
          "properties": {
            "ref": {
              "type": "string"
            },
            "repoUuid": {
              "type": "string"
            },
            "sha": {
              "type": "string"
            },
            "type": {
              "enum": [
                "bitbucket"
              ],
              "type": "string"
            },
            "workspaceUuid": {
              "type": "string"
            }
          },
          "required": [
            "type",
            "ref",
            "repoUuid"
          ],
          "type": "object"
        },
        {
          "properties": {
            "owner": {
              "type": "string"
            },
            "ref": {
              "type": "string"
            },
            "sha": {
              "type": "string"
            },
            "slug": {
              "type": "string"
            },
            "type": {
              "enum": [
                "bitbucket"
              ],
              "type": "string"
            }
          },
          "required": [
            "type",
            "ref",
            "owner",
            "slug"
          ],
          "type": "object"
        }
      ]
    },
    "meta": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `meta` to the tool, first call the tool `expandSchema` with \"/properties/meta\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>An object containing the deployment's metadata. Multiple key-value pairs can be attached to a deployment</property-description>",
      "additionalProperties": true
    },
    "monorepoManager": {
      "description": "The monorepo manager that is being used for this deployment. When `null` is used no monorepo manager is selected",
      "type": "string",
      "nullable": true
    },
    "name": {
      "description": "A string with the project name used in the deployment URL",
      "example": "my-instant-deployment",
      "type": "string"
    },
    "project": {
      "description": "The target project identifier in which the deployment will be created. When defined, this parameter overrides name",
      "example": "my-deployment-project",
      "type": "string"
    },
    "projectSettings": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `projectSettings` to the tool, first call the tool `expandSchema` with \"/properties/projectSettings\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Project settings that will be applied to the deployment. It is required for the first deployment of a project and will be saved for any following deployments</property-description>",
      "additionalProperties": true
    },
    "target": {
      "description": "Either not defined, `staging`, `production`, or a custom environment identifier. If `staging`, a staging alias in the format `<project>-<team>.vercel.app` will be assigned. If `production`, any aliases defined in `alias` will be assigned. If omitted, the target will be `preview`.",
      "type": "string",
      "example": "production"
    },
    "withLatestCommit": {
      "description": "When `true` and `deploymentId` is passed in, the sha from the previous deployment's `gitSource` is removed forcing the latest commit to be used.",
      "type": "boolean"
    }
  },
  "required": [
    "name"
  ]
}