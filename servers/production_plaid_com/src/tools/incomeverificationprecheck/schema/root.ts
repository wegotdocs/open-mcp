import { z } from "zod"

export const inputParamsSchema = {
  "client_id": z.string().describe("Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.").optional(),
  "secret": z.string().describe("Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.").optional(),
  "user": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `user` to the tool, first call the tool `expandSchema` with \"/properties/user\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Information about the user whose eligibility is being evaluated.</property-description>").optional(),
  "employer": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `employer` to the tool, first call the tool `expandSchema` with \"/properties/employer\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Information about the end user's employer</property-description>").optional(),
  "payroll_institution": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `payroll_institution` to the tool, first call the tool `expandSchema` with \"/properties/payroll_institution\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Information about the end user's payroll institution</property-description>").optional(),
  "transactions_access_tokens": z.array(z.string().describe("The access token associated with the Item data is being requested for.")).describe("An array of access tokens corresponding to Items belonging to the user whose eligibility is being checked. Note that if the Items specified here are not already initialized with `transactions`, providing them in this field will cause these Items to be initialized with (and billed for) the Transactions product.").optional(),
  "us_military_info": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `us_military_info` to the tool, first call the tool `expandSchema` with \"/properties/us_military_info\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Data about military info in the income verification precheck.</property-description>").optional()
}