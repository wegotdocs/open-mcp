import { z } from "zod"

export const inputParamsSchema = {
  "dba": z.string().describe("The business name of the originator."),
  "tax_id": z.string().min(1).describe("The tax ID of the originator."),
  "credit_usage_configuration": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `credit_usage_configuration` to the tool, first call the tool `expandSchema` with \"/properties/originator_diligence/properties/credit_usage_configuration\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Specifies the originator's expected usage of credits. For all dollar amounts, use a decimal string with two digits of precision e.g. \"10.00\". This field is required if the originator is expected to process credit transfers.</property-description>").optional(),
  "debit_usage_configuration": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `debit_usage_configuration` to the tool, first call the tool `expandSchema` with \"/properties/originator_diligence/properties/debit_usage_configuration\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Specifies the originator's expected usage of debits. For all dollar amounts, use a decimal string with two digits of precision e.g. \"10.00\". This field is required if the originator is expected to process debit transfers.</property-description>").optional(),
  "address": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `address` to the tool, first call the tool `expandSchema` with \"/properties/originator_diligence/properties/address\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The originator's address.</property-description>"),
  "website": z.string().describe("The website of the originator."),
  "naics_code": z.string().min(6).max(6).describe("The NAICS code of the originator."),
  "funding_account": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `funding_account` to the tool, first call the tool `expandSchema` with \"/properties/originator_diligence/properties/funding_account\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The originator's funding account, linked with Plaid Link or `/transfer/migrate_account`.</property-description>")
}