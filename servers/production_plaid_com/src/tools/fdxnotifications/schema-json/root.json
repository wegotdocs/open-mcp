{
  "type": "object",
  "properties": {
    "notificationId": {
      "type": "string",
      "description": "Id of notification"
    },
    "type": {
      "type": "string",
      "title": "Notification Type",
      "enum": [
        "CONSENT_REVOKED",
        "CONSENT_UPDATED",
        "CUSTOM",
        "SERVICE",
        "BALANCE",
        "PLANNED_OUTAGE"
      ],
      "description": "Type of Notification"
    },
    "sentOn": {
      "title": "Timestamp",
      "description": "ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)",
      "type": "string",
      "format": "date-time",
      "example": "2021-07-15T14:46:41.375Z"
    },
    "category": {
      "type": "string",
      "title": "Notification Category",
      "enum": [
        "SECURITY",
        "MAINTENANCE",
        "FRAUD",
        "CONSENT",
        "NEW_DATA"
      ],
      "description": "Category of Notification"
    },
    "severity": {
      "type": "string",
      "title": "Notification Severity",
      "enum": [
        "EMERGENCY",
        "ALERT",
        "WARNING",
        "NOTICE",
        "INFO"
      ],
      "description": "Severity level of notification"
    },
    "priority": {
      "type": "string",
      "title": "Notification Priority",
      "description": "Priority of notification",
      "enum": [
        "HIGH",
        "MEDIUM",
        "LOW"
      ]
    },
    "publisher": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `publisher` to the tool, first call the tool `expandSchema` with \"/properties/publisher\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>FDX Participant - an entity or person that is a part of a FDX API transaction</property-description>",
      "additionalProperties": true
    },
    "subscriber": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `subscriber` to the tool, first call the tool `expandSchema` with \"/properties/subscriber\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>FDX Participant - an entity or person that is a part of a FDX API transaction</property-description>",
      "additionalProperties": true
    },
    "notificationPayload": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `notificationPayload` to the tool, first call the tool `expandSchema` with \"/properties/notificationPayload\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Custom key-value pairs payload for a notification</property-description>",
      "additionalProperties": true
    },
    "url": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `url` to the tool, first call the tool `expandSchema` with \"/properties/url\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>REST application constraint (Hypermedia As The Engine Of Application State)</property-description>",
      "additionalProperties": true
    }
  },
  "required": [
    "notificationId",
    "type",
    "sentOn",
    "category",
    "notificationPayload"
  ]
}