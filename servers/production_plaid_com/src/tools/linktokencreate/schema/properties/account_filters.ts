import { z } from "zod"

export const inputParamsSchema = {
  "depository": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `depository` to the tool, first call the tool `expandSchema` with \"/properties/account_filters/properties/depository\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>A filter to apply to `depository`-type accounts</property-description>").optional(),
  "credit": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `credit` to the tool, first call the tool `expandSchema` with \"/properties/account_filters/properties/credit\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>A filter to apply to `credit`-type accounts</property-description>").optional(),
  "loan": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `loan` to the tool, first call the tool `expandSchema` with \"/properties/account_filters/properties/loan\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>A filter to apply to `loan`-type accounts</property-description>").optional(),
  "investment": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `investment` to the tool, first call the tool `expandSchema` with \"/properties/account_filters/properties/investment\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>A filter to apply to `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier).</property-description>").optional(),
  "other": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `other` to the tool, first call the tool `expandSchema` with \"/properties/account_filters/properties/other\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>A filter to apply to `other`-type accounts</property-description>").optional()
}