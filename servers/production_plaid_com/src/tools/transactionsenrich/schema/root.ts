import { z } from "zod"

export const inputParamsSchema = {
  "client_id": z.string().describe("Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.").optional(),
  "secret": z.string().describe("Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.").optional(),
  "account_type": z.string().describe("The account type for the requested transactions (either `depository` or `credit`)."),
  "transactions": z.array(z.object({ "id": z.string().describe("A unique ID for the transaction used to help you tie data back to your systems."), "client_user_id": z.string().describe("A unique user id used to group transactions for a given user, as a unique identifier from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_user_id.").optional(), "client_account_id": z.string().describe("A unique account id used to group transactions for a given account, as a unique identifier from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_account_id.").optional(), "account_type": z.string().describe("The account type associated with the transaction. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).").optional(), "account_subtype": z.string().describe("The account subtype associated with the transaction. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).").optional(), "description": z.string().describe("The raw description of the transaction. If you have location data in available an unstructured format, it may be appended to the `description` field."), "amount": z.number().describe("The absolute value of the transaction (>= 0). When testing Enrich, note that `amount` data should be realistic. Unrealistic or inaccurate `amount` data may result in reduced quality output."), "direction": z.enum(["INFLOW","OUTFLOW"]).describe("The direction of the transaction from the perspective of the account holder:\n\n`OUTFLOW` - Includes outgoing transfers, purchases, and fees. (Typically represented as a negative value on checking accounts and debit cards and a positive value on credit cards.)\n\n`INFLOW` - Includes incoming transfers, refunds, and income. (Typically represented as a positive value on checking accounts and debit cards and a negative value on credit cards.)"), "iso_currency_code": z.string().describe("The ISO-4217 currency code of the transaction e.g. USD."), "location": z.object({ "country": z.string().describe("The country where the transaction occurred.").optional(), "region": z.string().describe("The region or state where the transaction occurred.").optional(), "city": z.string().describe("The city where the transaction occurred.").optional(), "address": z.string().describe("The street address where the transaction occurred.").optional(), "postal_code": z.string().describe("The postal code where the transaction occurred.").optional() }).catchall(z.any()).describe("A representation of where a transaction took place.\n\nUse this field to pass in structured location information you may have about your transactions. Providing location data is optional but can increase result quality. If you have unstructured location information, it may be appended to the `description` field.").optional(), "mcc": z.string().describe("Merchant category codes (MCCs) are four-digit numbers that describe a merchant's primary business activities.").optional(), "date_posted": z.string().date().describe("The date the transaction posted, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format.").optional() }).catchall(z.any()).describe("A client-provided transaction for Plaid to enrich.")).describe("An array of transaction objects to be enriched by Plaid. Maximum of 100 transactions per request."),
  "options": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `options` to the tool, first call the tool `expandSchema` with \"/properties/options\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>An optional object to be used with the request.</property-description>").optional()
}