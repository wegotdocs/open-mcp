import { z } from "zod"

export const inputParamsSchema = {
  "advanced_security": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `advanced_security` to the tool, first call the tool `expandSchema` with \"/properties/security_and_analysis/properties/advanced_security\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see \"[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security).\"</property-description>").optional(),
  "code_security": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `code_security` to the tool, first call the tool `expandSchema` with \"/properties/security_and_analysis/properties/code_security\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Use the `status` property to enable or disable GitHub Code Security for this repository.</property-description>").optional(),
  "secret_scanning": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `secret_scanning` to the tool, first call the tool `expandSchema` with \"/properties/security_and_analysis/properties/secret_scanning\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Use the `status` property to enable or disable secret scanning for this repository. For more information, see \"[About secret scanning](/code-security/secret-security/about-secret-scanning).\"</property-description>").optional(),
  "secret_scanning_push_protection": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `secret_scanning_push_protection` to the tool, first call the tool `expandSchema` with \"/properties/security_and_analysis/properties/secret_scanning_push_protection\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see \"[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning).\"</property-description>").optional(),
  "secret_scanning_ai_detection": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `secret_scanning_ai_detection` to the tool, first call the tool `expandSchema` with \"/properties/security_and_analysis/properties/secret_scanning_ai_detection\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Use the `status` property to enable or disable secret scanning AI detection for this repository. For more information, see \"[Responsible detection of generic secrets with AI](https://docs.github.com/code-security/secret-scanning/using-advanced-secret-scanning-and-push-protection-features/generic-secret-detection/responsible-ai-generic-secrets).\"</property-description>").optional(),
  "secret_scanning_non_provider_patterns": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `secret_scanning_non_provider_patterns` to the tool, first call the tool `expandSchema` with \"/properties/security_and_analysis/properties/secret_scanning_non_provider_patterns\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Use the `status` property to enable or disable secret scanning non-provider patterns for this repository. For more information, see \"[Supported secret scanning patterns](/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets).\"</property-description>").optional()
}