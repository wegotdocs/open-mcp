{
  "type": "object",
  "properties": {
    "enterprise": {
      "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
      "type": "string"
    },
    "configuration_id": {
      "description": "The unique identifier of the code security configuration.",
      "type": "integer"
    },
    "name": {
      "type": "string",
      "description": "The name of the code security configuration. Must be unique across the enterprise."
    },
    "description": {
      "type": "string",
      "description": "A description of the code security configuration",
      "maxLength": 255
    },
    "advanced_security": {
      "type": "string",
      "description": "The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.",
      "enum": [
        "enabled",
        "disabled",
        "code_security",
        "secret_protection"
      ]
    },
    "dependency_graph": {
      "type": "string",
      "description": "The enablement status of Dependency Graph",
      "enum": [
        "enabled",
        "disabled",
        "not_set"
      ]
    },
    "dependency_graph_autosubmit_action": {
      "type": "string",
      "description": "The enablement status of Automatic dependency submission",
      "enum": [
        "enabled",
        "disabled",
        "not_set"
      ]
    },
    "dependency_graph_autosubmit_action_options": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `dependency_graph_autosubmit_action_options` to the tool, first call the tool `expandSchema` with \"/properties/dependency_graph_autosubmit_action_options\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Feature options for Automatic dependency submission</property-description>",
      "additionalProperties": true
    },
    "dependabot_alerts": {
      "type": "string",
      "description": "The enablement status of Dependabot alerts",
      "enum": [
        "enabled",
        "disabled",
        "not_set"
      ]
    },
    "dependabot_security_updates": {
      "type": "string",
      "description": "The enablement status of Dependabot security updates",
      "enum": [
        "enabled",
        "disabled",
        "not_set"
      ]
    },
    "code_scanning_default_setup": {
      "type": "string",
      "description": "The enablement status of code scanning default setup",
      "enum": [
        "enabled",
        "disabled",
        "not_set"
      ]
    },
    "code_scanning_default_setup_options": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `code_scanning_default_setup_options` to the tool, first call the tool `expandSchema` with \"/properties/code_scanning_default_setup_options\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Feature options for code scanning default setup</property-description>",
      "additionalProperties": true
    },
    "code_scanning_delegated_alert_dismissal": {
      "type": "string",
      "description": "The enablement status of code scanning delegated alert dismissal",
      "enum": [
        "enabled",
        "disabled",
        "not_set"
      ],
      "default": "disabled"
    },
    "secret_scanning": {
      "type": "string",
      "description": "The enablement status of secret scanning",
      "enum": [
        "enabled",
        "disabled",
        "not_set"
      ]
    },
    "secret_scanning_push_protection": {
      "type": "string",
      "description": "The enablement status of secret scanning push protection",
      "enum": [
        "enabled",
        "disabled",
        "not_set"
      ]
    },
    "secret_scanning_validity_checks": {
      "type": "string",
      "description": "The enablement status of secret scanning validity checks",
      "enum": [
        "enabled",
        "disabled",
        "not_set"
      ]
    },
    "secret_scanning_non_provider_patterns": {
      "type": "string",
      "description": "The enablement status of secret scanning non-provider patterns",
      "enum": [
        "enabled",
        "disabled",
        "not_set"
      ]
    },
    "secret_scanning_generic_secrets": {
      "type": "string",
      "description": "The enablement status of Copilot secret scanning",
      "enum": [
        "enabled",
        "disabled",
        "not_set"
      ],
      "default": "disabled"
    },
    "secret_scanning_delegated_alert_dismissal": {
      "type": "string",
      "description": "The enablement status of secret scanning delegated alert dismissal",
      "enum": [
        "enabled",
        "disabled",
        "not_set"
      ],
      "default": "disabled"
    },
    "private_vulnerability_reporting": {
      "type": "string",
      "description": "The enablement status of private vulnerability reporting",
      "enum": [
        "enabled",
        "disabled",
        "not_set"
      ]
    },
    "enforcement": {
      "type": "string",
      "description": "The enforcement status for a security configuration",
      "enum": [
        "enforced",
        "unenforced"
      ]
    }
  },
  "required": [
    "enterprise",
    "configuration_id"
  ]
}