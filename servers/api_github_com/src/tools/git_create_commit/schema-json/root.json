{
  "type": "object",
  "properties": {
    "owner": {
      "description": "The account owner of the repository. The name is not case sensitive.",
      "type": "string"
    },
    "repo": {
      "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
      "type": "string"
    },
    "message": {
      "type": "string",
      "description": "The commit message"
    },
    "tree": {
      "type": "string",
      "description": "The SHA of the tree object this commit points to"
    },
    "parents": {
      "type": "array",
      "description": "The full SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.",
      "items": {
        "type": "string"
      }
    },
    "author": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `author` to the tool, first call the tool `expandSchema` with \"/properties/author\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.</property-description>",
      "additionalProperties": true
    },
    "committer": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `committer` to the tool, first call the tool `expandSchema` with \"/properties/committer\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.</property-description>",
      "additionalProperties": true
    },
    "signature": {
      "type": "string",
      "description": "The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits."
    }
  },
  "required": [
    "owner",
    "repo",
    "message",
    "tree"
  ]
}