import { z } from "zod"

export const inputParamsSchema = {
  "actions": z.enum(["read","write"]).describe("The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.").optional(),
  "administration": z.enum(["read","write"]).describe("The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.").optional(),
  "checks": z.enum(["read","write"]).describe("The level of permission to grant the access token for checks on code.").optional(),
  "codespaces": z.enum(["read","write"]).describe("The level of permission to grant the access token to create, edit, delete, and list Codespaces.").optional(),
  "contents": z.enum(["read","write"]).describe("The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.").optional(),
  "dependabot_secrets": z.enum(["read","write"]).describe("The level of permission to grant the access token to manage Dependabot secrets.").optional(),
  "deployments": z.enum(["read","write"]).describe("The level of permission to grant the access token for deployments and deployment statuses.").optional(),
  "environments": z.enum(["read","write"]).describe("The level of permission to grant the access token for managing repository environments.").optional(),
  "issues": z.enum(["read","write"]).describe("The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.").optional(),
  "metadata": z.enum(["read","write"]).describe("The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.").optional(),
  "packages": z.enum(["read","write"]).describe("The level of permission to grant the access token for packages published to GitHub Packages.").optional(),
  "pages": z.enum(["read","write"]).describe("The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.").optional(),
  "pull_requests": z.enum(["read","write"]).describe("The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.").optional(),
  "repository_custom_properties": z.enum(["read","write"]).describe("The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.").optional(),
  "repository_hooks": z.enum(["read","write"]).describe("The level of permission to grant the access token to manage the post-receive hooks for a repository.").optional(),
  "repository_projects": z.enum(["read","write","admin"]).describe("The level of permission to grant the access token to manage repository projects, columns, and cards.").optional(),
  "secret_scanning_alerts": z.enum(["read","write"]).describe("The level of permission to grant the access token to view and manage secret scanning alerts.").optional(),
  "secrets": z.enum(["read","write"]).describe("The level of permission to grant the access token to manage repository secrets.").optional(),
  "security_events": z.enum(["read","write"]).describe("The level of permission to grant the access token to view and manage security events like code scanning alerts.").optional(),
  "single_file": z.enum(["read","write"]).describe("The level of permission to grant the access token to manage just a single file.").optional(),
  "statuses": z.enum(["read","write"]).describe("The level of permission to grant the access token for commit statuses.").optional(),
  "vulnerability_alerts": z.enum(["read","write"]).describe("The level of permission to grant the access token to manage Dependabot alerts.").optional(),
  "workflows": z.literal("write").describe("The level of permission to grant the access token to update GitHub Actions workflow files.").optional(),
  "members": z.enum(["read","write"]).describe("The level of permission to grant the access token for organization teams and members.").optional(),
  "organization_administration": z.enum(["read","write"]).describe("The level of permission to grant the access token to manage access to an organization.").optional(),
  "organization_custom_roles": z.enum(["read","write"]).describe("The level of permission to grant the access token for custom repository roles management.").optional(),
  "organization_custom_org_roles": z.enum(["read","write"]).describe("The level of permission to grant the access token for custom organization roles management.").optional(),
  "organization_custom_properties": z.enum(["read","write","admin"]).describe("The level of permission to grant the access token for custom property management.").optional(),
  "organization_copilot_seat_management": z.literal("write").describe("The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change.").optional(),
  "organization_announcement_banners": z.enum(["read","write"]).describe("The level of permission to grant the access token to view and manage announcement banners for an organization.").optional(),
  "organization_events": z.literal("read").describe("The level of permission to grant the access token to view events triggered by an activity in an organization.").optional(),
  "organization_hooks": z.enum(["read","write"]).describe("The level of permission to grant the access token to manage the post-receive hooks for an organization.").optional(),
  "organization_personal_access_tokens": z.enum(["read","write"]).describe("The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.").optional(),
  "organization_personal_access_token_requests": z.enum(["read","write"]).describe("The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.").optional(),
  "organization_plan": z.literal("read").describe("The level of permission to grant the access token for viewing an organization's plan.").optional(),
  "organization_projects": z.enum(["read","write","admin"]).describe("The level of permission to grant the access token to manage organization projects and projects public preview (where available).").optional(),
  "organization_packages": z.enum(["read","write"]).describe("The level of permission to grant the access token for organization packages published to GitHub Packages.").optional(),
  "organization_secrets": z.enum(["read","write"]).describe("The level of permission to grant the access token to manage organization secrets.").optional(),
  "organization_self_hosted_runners": z.enum(["read","write"]).describe("The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.").optional(),
  "organization_user_blocking": z.enum(["read","write"]).describe("The level of permission to grant the access token to view and manage users blocked by the organization.").optional(),
  "team_discussions": z.enum(["read","write"]).describe("The level of permission to grant the access token to manage team discussions and related comments.").optional(),
  "email_addresses": z.enum(["read","write"]).describe("The level of permission to grant the access token to manage the email addresses belonging to a user.").optional(),
  "followers": z.enum(["read","write"]).describe("The level of permission to grant the access token to manage the followers belonging to a user.").optional(),
  "git_ssh_keys": z.enum(["read","write"]).describe("The level of permission to grant the access token to manage git SSH keys.").optional(),
  "gpg_keys": z.enum(["read","write"]).describe("The level of permission to grant the access token to view and manage GPG keys belonging to a user.").optional(),
  "interaction_limits": z.enum(["read","write"]).describe("The level of permission to grant the access token to view and manage interaction limits on a repository.").optional(),
  "profile": z.literal("write").describe("The level of permission to grant the access token to manage the profile settings belonging to a user.").optional(),
  "starring": z.enum(["read","write"]).describe("The level of permission to grant the access token to list and manage repositories a user is starring.").optional()
}