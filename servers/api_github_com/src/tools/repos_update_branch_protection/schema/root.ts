import { z } from "zod"

export const inputParamsSchema = {
  "owner": z.string().describe("The account owner of the repository. The name is not case sensitive."),
  "repo": z.string().describe("The name of the repository without the `.git` extension. The name is not case sensitive."),
  "branch": z.string().describe("The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql)."),
  "required_status_checks": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `required_status_checks` to the tool, first call the tool `expandSchema` with \"/properties/required_status_checks\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Require status checks to pass before merging. Set to `null` to disable.</property-description>"),
  "enforce_admins": z.boolean().nullable().describe("Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable."),
  "required_pull_request_reviews": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `required_pull_request_reviews` to the tool, first call the tool `expandSchema` with \"/properties/required_pull_request_reviews\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Require at least one approving review on a pull request, before merging. Set to `null` to disable.</property-description>"),
  "restrictions": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `restrictions` to the tool, first call the tool `expandSchema` with \"/properties/restrictions\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.</property-description>"),
  "required_linear_history": z.boolean().describe("Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see \"[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)\" in the GitHub Help documentation.").optional(),
  "allow_force_pushes": z.boolean().nullable().describe("Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation.\"").optional(),
  "allow_deletions": z.boolean().describe("Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation.").optional(),
  "block_creations": z.boolean().describe("If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`.").optional(),
  "required_conversation_resolution": z.boolean().describe("Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.").optional(),
  "lock_branch": z.boolean().describe("Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.").optional(),
  "allow_fork_syncing": z.boolean().describe("Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.").optional()
}