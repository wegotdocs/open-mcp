import { z } from "zod"

export const inputParamsSchema = {
  "ID": z.string().describe("ID is the identifier of the object.").readonly().optional(),
  "alerts": z.array(z.object({ "alertDefinition": z.string().describe("The name of the alert definition that triggered the alert event."), "alertDefinitionNamespace": z.string().describe("The namespace of the alert definition.").optional(), "principal": z.object({ "IP": z.string().describe("The source IP address of the request.").optional(), "app": z.object({ "component": z.string().describe("The component of the application request.").optional(), "labels": z.array(z.string()).describe("The list of labels attached to an application request.").optional(), "name": z.string().describe("The name of the application.").optional() }).describe("Describes the principal information of an application.").optional(), "authType": z.enum(["Certificate","UserToken","AppToken","Hostname","Token","ComponentToken","External"]).describe("The type of authentication.").optional(), "claims": z.array(z.string()).describe("List of claims extracted from the user query.").optional(), "team": z.string().describe("The team that was used to authorize the request.").optional(), "tokenName": z.string().describe("The name of the token, if any.").optional(), "type": z.enum(["User","App","External"]).describe("The type of principal."), "user": z.object({ "name": z.string().describe("Identification bit that will be used to identify the origin of the request.").optional() }).describe("Describes the principal information of a user.").optional() }).describe("Describe the principal."), "provider": z.string().describe("The provider used that the alert came from.").optional(), "timestamp": z.string().datetime({ offset: true }).describe("When the alert event was raised.").readonly().optional() }).describe("Represents an alert event raised by a policy.")).describe("List of alerts that got raised during the policy resolution.").optional(),
  "annotations": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `annotations` to the tool, first call the tool `expandSchema` with \"/properties/annotations\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Annotations attached to the log.</property-description>").optional(),
  "client": z.string().describe("The client used to send the request.").optional(),
  "clientVersion": z.string().describe("The version of the client used to send the request.").optional(),
  "decision": z.enum(["Deny","Allow","Ask","Bypassed","ForbiddenUser","Skipped"]).describe("Tell what was the decision about the data.").optional(),
  "destination": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `destination` to the tool, first call the tool `expandSchema` with \"/properties/destination\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Represents the destination that this request was made to.</property-description>").optional(),
  "extractions": z.array(z.object({ "PIIs": z.record(z.any()).describe("The PIIs found during classification.\n\nThe current list can be obtained through the analyzers API by searching for\ndetector groups 'PIIs' accross all analyzers.\n\nExample of PIIs detected: aba_routing_number, address, bank_account,\nbitcoin_wallet, credit_card, driver_license, email_address, itin_number,\nlocation, medical_license, money_amount, passport_number, person, phone_number,\nssn.\n\nIf a key is not present in the map that implies that entity was not detected. If\nan entity is detected then the value is a score. Here's how to interpret the\nscores:\n  - confidence: 'low', 0 < score <0.33\n  - confidence: 'medium', 0.33 <= score < 0.66\n  - confidence: 'high', 0.66 <= score <= 1.").optional(), "annotations": z.record(z.any()).describe("Annotations attached to the extraction.").optional(), "categories": z.array(z.object({ "group": z.string().describe("The group of data.\n\nThe current list can be obtained through the analyzers API by searching for\ndetector groups in the 'Modality' analyzer group.\n\nExample of group: application, archive, audio, code, document, executable, font,\nimage, text, unknown, video."), "type": z.string().describe("The type of data.\n\nThe current list can be obtained through the analyzers API by searching for\ndetector names in the 'Modality' analyzer group.\n\nExample of type: 3dsm, 3gp, 3mf, ace, ada, ai, apk, applebplist, appleplist, ar,\narc, arj, asc, asf, asm, asp, au, autohotkey, autoit, avi, avif, awk, ax, batch,\nbazel, bcad, bib, bmp, bpg, brainfuck, brf, bzip, bzip3, c, cab, cat, cdf, chm,\nclojure, cmake, cobol, coff, coffeescript, com, cpl, cpp, crt, crx, cs, csproj,\ncss, csv, dart, deb, dex, dey, dicom, diff, django, dll, dm, dmg, dmigd,\ndmscript, doc, dockerfile, docx, dotx, dwg, dxf, dylib, elf, elixir, emf, eml,\nepub, erb, erlang, exe, flac, flv, fortran, fpx, gemfile, gemspec, gif,\ngitattributes, gitmodules, gleam, go, gradle, groovy, gzip, h, h5, handlebars,\nhaskell, hcl, heif, hlp, hpp, hta, htaccess, html, hwp, icns, ico, ics,\nignorefile, ini, internetshortcut, ipynb, iso, jar, java, javabytecode,\njavascript, jinja, jng, jnlp, jp2, jpeg, json, jsonl, jsx, julia, jxl, ko,\nkotlin, latex, lha, license, lisp, lnk, lock, lua, lz, lz4, m3u, m4, macho,\nmakefile, markdown, matlab, mht, midi, mkv, mp3, mp4, mpegts, mscompress, msi,\nmsix, mui, mum, npy, npz, objectivec, ocaml, ocx, odex, odin, odp, ods, odt,\nogg, one, onnx, otf, outlook, pascal, pcap, pdb, pdf, pebin, pem, perl, php,\npickle, png, po, postscript, powershell, ppt, pptx, prolog, proteindb, proto,\npsd, python, pythonbytecode, pytorch, qoi, qt, r, randomascii, rar, rdf, rlib,\nrll, rpm, rst, rtf, ruby, rust, scala, scheme, scr, scss, sevenzip, sgml, shell,\nsmali, snap, so, solidity, sql, sqlite, squashfs, srt, stlbinary, stltext, sum,\nsvg, swf, swift, symlinktext, sys, tar, tcl, textproto, tga, thumbsdb, tiff,\ntoml, torrent, tsv, tsx, ttf, twig, txt, txtascii, txtutf16, txtutf8,\ntypescript, vba, vbe, vcxproj, verilog, vhdl, visio, vtt, vue, wad, wasm, wav,\nwebm, webp, webtemplate, winregistry, wma, wmf, wmv, woff, woff2, xar, xcf, xls,\nxlsb, xlsx, xml, xpi, xz, yaml, yara, zig, zip, zlibstream, zst.") }).describe("Represents the modality of a some data.")).describe("The categories are remapping of the modalities in a more human friendly way.").optional(), "confidentiality": z.number().describe("The level of general confidentiality of the input.").optional(), "customDataSets": z.record(z.any()).describe("The custom data sets found during classification.").optional(), "customDataTypes": z.record(z.any()).describe("The custom data types found during classification.\n\nIf a key is not present in the map that implies that entity was not detected. If\nan entity is detected then the value is a score. Here's how to interpret the\nscores:\n  - confidence: 'low', 0 < score <0.33\n  - confidence: 'medium', 0.33 <= score < 0.66\n  - confidence: 'high', 0.66 <= score <= 1.").optional(), "data": z.string().describe("The data extracted.").optional(), "detections": z.array(z.object({ "end": z.number().int().describe("The end position of the detection in the original data.").optional(), "key": z.string().describe("The key that is used in the name's place, If empty, a sequence of X's are used.").optional(), "name": z.string().describe("The name of the detection.").optional(), "redacted": z.boolean().describe("If true this detection has been redacted.").optional(), "redactedEnd": z.number().int().describe("The end position of the detection in the redacted data.").optional(), "redactedStart": z.number().int().describe("The start position of the detection in the redacted data.").optional(), "score": z.number().describe("The confidence score of the detection.").optional(), "start": z.number().int().describe("The start position of the detection in the original data.").optional(), "type": z.enum(["Keyword","PII","Secret","CDT"]).describe("The type of detection.").optional() }).describe("Represents a textual detection done by policy.")).describe("The textual detections found while applying policies.").optional(), "exploits": z.record(z.any()).describe("The various exploits attempts.\n\nThe current list can be obtained through the analyzers API by searching for\ndetector groups 'Exploits' accross all analyzers.\n\nExample of exploits detected: jailbreak, prompt_injection, malicious_url.\n\nIf a key is not present in the map that implies that entity was not detected. If\nan entity is detected then the value is a score. Here's how to interpret the\nscores:\n  - confidence: 'low', 0 < score <0.33\n  - confidence: 'medium', 0.33 <= score < 0.66\n  - confidence: 'high', 0.66 <= score <= 1.").optional(), "hash": z.string().describe("The hash of the extraction.").optional(), "intent": z.record(z.any()).describe("The estimated intent embodied into the text.\n\nThe current list can be obtained through the analyzers API by searching for\ndetector groups 'Intent' accross all analyzers.\n\nExample of intent detected: explain, outline, summarize, write.\n\nIf a key is not present in the map that implies that entity was not detected. If\nan entity is detected then the value is a score. Here's how to interpret the\nscores:\n  - confidence: 'low', 0 < score <0.33\n  - confidence: 'medium', 0.33 <= score < 0.66\n  - confidence: 'high', 0.66 <= score <= 1.").optional(), "internal": z.boolean().describe("If true, this extraction is for internal use only. This can be used by agentic\nsystems to mark an extraction as internal only as opposed to user facing.").optional(), "isFile": z.boolean().describe("If true, the data of the extraction is a file.").optional(), "isStored": z.boolean().describe("If true, indicates that the file has been stored.").optional(), "keywords": z.record(z.any()).describe("The keywords found during classification.\n\nIf a key is not present in the map that implies that entity was not detected. If\nan entity is detected then the value is a score. Here's how to interpret the\nscores:\n  - confidence: 'low', 0 < score <0.33\n  - confidence: 'medium', 0.33 <= score < 0.66\n  - confidence: 'high', 0.66 <= score <= 1.").optional(), "label": z.string().describe("A means of distinguishing what was extracted, such as prompt, input file or\ncode.").optional(), "languages": z.record(z.any()).describe("The language of the classification.\n\nThe current list can be obtained through the analyzers API by searching for\ndetector groups 'Languages' accross all analyzers.\n\nExample of languages: chinese, english, french, german, gibberish, japanese,\nrussian, spanish.\n\nIf a key is not present in the map that implies that entity was not detected. If\nan entity is detected then the value is a score. Here's how to interpret the\nscores:\n  - confidence: 'low', 0 < score <0.33\n  - confidence: 'medium', 0.33 <= score < 0.66\n  - confidence: 'high', 0.66 <= score <= 1.").optional(), "luaID": z.string().describe("An internal field for lua code. it is ignored by the API.").optional(), "malcontents": z.record(z.any()).describe("The various malcontents attempts.\n\nThe current list can be obtained through the analyzers API by searching for\ndetector groups 'Malcontents' accross all analyzers.\n\nExample of malcontents: biased, harmful, toxic.\n\nIf a key is not present in the map that implies that entity was not detected. If\nan entity is detected then the value is a score. Here's how to interpret the\nscores:\n  - confidence: 'low', 0 < score <0.33\n  - confidence: 'medium', 0.33 <= score < 0.66\n  - confidence: 'high', 0.66 <= score <= 1.").optional(), "modalities": z.array(z.object({ "group": z.string().describe("The group of data.\n\nThe current list can be obtained through the analyzers API by searching for\ndetector groups in the 'Modality' analyzer group.\n\nExample of group: application, archive, audio, code, document, executable, font,\nimage, text, unknown, video."), "type": z.string().describe("The type of data.\n\nThe current list can be obtained through the analyzers API by searching for\ndetector names in the 'Modality' analyzer group.\n\nExample of type: 3dsm, 3gp, 3mf, ace, ada, ai, apk, applebplist, appleplist, ar,\narc, arj, asc, asf, asm, asp, au, autohotkey, autoit, avi, avif, awk, ax, batch,\nbazel, bcad, bib, bmp, bpg, brainfuck, brf, bzip, bzip3, c, cab, cat, cdf, chm,\nclojure, cmake, cobol, coff, coffeescript, com, cpl, cpp, crt, crx, cs, csproj,\ncss, csv, dart, deb, dex, dey, dicom, diff, django, dll, dm, dmg, dmigd,\ndmscript, doc, dockerfile, docx, dotx, dwg, dxf, dylib, elf, elixir, emf, eml,\nepub, erb, erlang, exe, flac, flv, fortran, fpx, gemfile, gemspec, gif,\ngitattributes, gitmodules, gleam, go, gradle, groovy, gzip, h, h5, handlebars,\nhaskell, hcl, heif, hlp, hpp, hta, htaccess, html, hwp, icns, ico, ics,\nignorefile, ini, internetshortcut, ipynb, iso, jar, java, javabytecode,\njavascript, jinja, jng, jnlp, jp2, jpeg, json, jsonl, jsx, julia, jxl, ko,\nkotlin, latex, lha, license, lisp, lnk, lock, lua, lz, lz4, m3u, m4, macho,\nmakefile, markdown, matlab, mht, midi, mkv, mp3, mp4, mpegts, mscompress, msi,\nmsix, mui, mum, npy, npz, objectivec, ocaml, ocx, odex, odin, odp, ods, odt,\nogg, one, onnx, otf, outlook, pascal, pcap, pdb, pdf, pebin, pem, perl, php,\npickle, png, po, postscript, powershell, ppt, pptx, prolog, proteindb, proto,\npsd, python, pythonbytecode, pytorch, qoi, qt, r, randomascii, rar, rdf, rlib,\nrll, rpm, rst, rtf, ruby, rust, scala, scheme, scr, scss, sevenzip, sgml, shell,\nsmali, snap, so, solidity, sql, sqlite, squashfs, srt, stlbinary, stltext, sum,\nsvg, swf, swift, symlinktext, sys, tar, tcl, textproto, tga, thumbsdb, tiff,\ntoml, torrent, tsv, tsx, ttf, twig, txt, txtascii, txtutf16, txtutf8,\ntypescript, vba, vbe, vcxproj, verilog, vhdl, visio, vtt, vue, wad, wasm, wav,\nwebm, webp, webtemplate, winregistry, wma, wmf, wmv, woff, woff2, xar, xcf, xls,\nxlsb, xlsx, xml, xpi, xz, yaml, yara, zig, zip, zlibstream, zst.") }).describe("Represents the modality of a some data.")).describe("The modalities of data detected in the data.").optional(), "relevance": z.number().describe("The level of general organization relevance of the input.\n\nIf a key is not present in the map that implies that entity was not detected. If\nan entity is detected then the value is a score. Here's how to interpret the\nscores:\n  - confidence: 'low', 0 < score <0.33\n  - confidence: 'medium', 0.33 <= score < 0.66\n  - confidence: 'high', 0.66 <= score <= 1.").optional(), "secrets": z.record(z.any()).describe("The secrets found during classification.\n\nThe current list can be obtained through the analyzers API by searching for\ndetector groups 'Secrets' accross all analyzers.\n\nExample of secrets: adafruit, alibaba, anthropic, apideck, apify, atlassian,\naws_secret_key, buildkite, checkout, clickuppersonal, contentfulpersonalaccess,\ncredentials, database_url_with_credentials, databricks, denodeploy, dfuse,\ndigitalocean, discord_webhook, docker_hub, doppler, dropbox, endorlabs,\nfleetbase, flutterwave, frameio, freshdesk, fullstory, github, gitlab,\ngocardless, google_api, grafana, groq, huggingface, intra42, jwt, klaviyo,\nlaunchdarkly, linearapi, locationiq, mailchimp, mailgun, mapbox, maxmind,\nmicrosoft_teams_webhook, nightfall, notion, npm, openai, otp_auth_url, pagarme,\npaystack, planetscale, planetscaledb, portainer, posthog, postman, prefect,\nprivate_key, pubnub_publish, pubnub_subscribe, pulumi, ramp, razorpay, readme,\nrechargepayments, replicate, rubygems, salesforce, sendgrid, sendinblue,\nshopify, slack_access, slack_bot, slack_refresh, slack_user, slack_webhook,\nslack_workflow_webhook, sourcegraph, sourcegraphcody, squareapp, squareup,\nstripe, supabase, tailscale, tines_webhook, trufflehog, twilio, ubidots,\nvoiceflow, web_url_with_credentials, zapierwebhook.\n\nIf a key is not present in the map that implies that entity was not detected. If\nan entity is detected then the value is a score. Here's how to interpret the\nscores:\n  - confidence: 'low', 0 < score <0.33\n  - confidence: 'medium', 0.33 <= score < 0.66\n  - confidence: 'high', 0.66 <= score <= 1.").optional(), "topics": z.record(z.any()).describe("The topic of the classification.\n\nThe current list can be obtained through the analyzers API, with the following\nconditions:\n  1. Includes all analyzers EXCEPT those in the 'Modality' group\n  2. Includes all analyzer detectors EXCEPT those in these groups:\n    - 'Secrets'\n    - 'Exploits'\n    - 'Intent'\n    - 'PIIs'\n    - 'Malcontents'\n\nExample of topics: category/enterprise, category/healthcare, category/medical,\ncategory/personal, contains/blank_image, contains/certificate_signing_request,\ncontains/database_url, contains/handwritten_text, contains/printed_text,\ncontains/public_key, contains/ssh_public_key, contains/web_url,\ndecoded/base32_data, decoded/base58_data, decoded/base64_data,\ndecoded/base64_url_data, decoded/base85_data, decoded/hexadecimal_data,\ndecoded/puny_code_data, decoded/quoted_printable_data,\ndecoded/url_encoding_data, department/compliance, department/cybersecurity,\ndepartment/finance, department/human_resources,\ndepartment/information_technology, department/legal, department/logistics,\ndepartment/marketing, department/performance_evaluation,\ndepartment/product_management, department/project_management, department/sales,\ndepartment/strategy, department/support, depict/check, depict/code,\ndepict/document, depict/unclassified, depict/whiteboard, domain/commercial,\ndomain/development, domain/financial, domain/general, domain/regulatory,\ndomain/workforce, extracted/csv_cell_content, extracted/document_text_content,\nextracted/handwritten_text_content, extracted/pdf_text_content,\nextracted/pptx_text_content, extracted/spreadsheet_text_content,\nextracted/typed_text_content, timeframe/current_year, timeframe/future,\ntimeframe/last_year, timeframe/next_year, timeframe/past,\ntranscribed/audio_text_content.\n\nIf a key is not present in the map that implies that entity was not detected. If\nan entity is detected then the value is a score. Here's how to interpret the\nscores:\n  - confidence: 'low', 0 < score <0.33\n  - confidence: 'medium', 0.33 <= score < 0.66\n  - confidence: 'high', 0.66 <= score <= 1.").optional() }).describe("Represents the extracted information to log.")).describe("The extractions to log.").optional(),
  "hash": z.string().describe("The hash of the input.").optional(),
  "importHash": z.string().describe("The hash of the structure used to compare with new import version.").optional(),
  "importLabel": z.string().describe("The user-defined import label that allows the system to group resources from the\nsame import operation.").optional(),
  "latency": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `latency` to the tool, first call the tool `expandSchema` with \"/properties/latency\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Holds information about latencies introduced by Apex.</property-description>").optional(),
  "namespace": z.string().describe("The namespace of the object.").readonly().optional(),
  "pipelineName": z.string().describe("The name of the particular pipeline that extracted the text.").optional(),
  "principal": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `principal` to the tool, first call the tool `expandSchema` with \"/properties/principal\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Describe the principal.</property-description>"),
  "provider": z.string().describe("the provider to use.").optional(),
  "reasons": z.array(z.string()).describe("The various reasons returned by the policy engine.").optional(),
  "summary": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `summary` to the tool, first call the tool `expandSchema` with \"/properties/summary\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Represents the summary of the extractions.</property-description>").optional(),
  "time": z.string().datetime({ offset: true }).describe("Set the time of the message request.").optional(),
  "trace": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `trace` to the tool, first call the tool `expandSchema` with \"/properties/trace\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Holds all references to a trace.</property-description>").optional(),
  "type": z.enum(["Input","Output"]).describe("The type of text.").optional()
}