import { z } from "zod"

export const inputParamsSchema = {
  "ID": z.string().describe("ID is the identifier of the object.").readonly().optional(),
  "alertDefinition": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `alertDefinition` to the tool, first call the tool `expandSchema` with \"/properties/alertDefinition\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Represents a definition of an alert.</property-description>").optional(),
  "alertDefinitionName": z.string().describe("The name identifier of the alert definition that triggered the alert."),
  "alertEvents": z.array(z.object({ "alertDefinition": z.string().describe("The name of the alert definition that triggered the alert event."), "alertDefinitionNamespace": z.string().describe("The namespace of the alert definition.").optional(), "principal": z.object({ "IP": z.string().describe("The source IP address of the request.").optional(), "app": z.object({ "component": z.string().describe("The component of the application request.").optional(), "labels": z.array(z.string()).describe("The list of labels attached to an application request.").optional(), "name": z.string().describe("The name of the application.").optional() }).describe("Describes the principal information of an application.").optional(), "authType": z.enum(["Certificate","UserToken","AppToken","Hostname","Token","ComponentToken","External"]).describe("The type of authentication.").optional(), "claims": z.array(z.string()).describe("List of claims extracted from the user query.").optional(), "team": z.string().describe("The team that was used to authorize the request.").optional(), "tokenName": z.string().describe("The name of the token, if any.").optional(), "type": z.enum(["User","App","External"]).describe("The type of principal."), "user": z.object({ "name": z.string().describe("Identification bit that will be used to identify the origin of the request.").optional() }).describe("Describes the principal information of a user.").optional() }).describe("Describe the principal."), "provider": z.string().describe("The provider used that the alert came from.").optional(), "timestamp": z.string().datetime({ offset: true }).describe("When the alert event was raised.").readonly().optional() }).describe("Represents an alert event raised by a policy.")).describe("The events related to the alert.").readonly().optional(),
  "counter": z.number().int().describe("The number of times the alert was raised."),
  "createTime": z.string().datetime({ offset: true }).describe("Creation date of the object.").readonly().optional(),
  "end": z.string().datetime({ offset: true }).describe("When the alert was last raised."),
  "namespace": z.string().describe("The namespace of the object.").readonly().optional(),
  "start": z.string().datetime({ offset: true }).describe("When the alert was first raised."),
  "updateTime": z.string().datetime({ offset: true }).describe("Last update date of the object.").readonly().optional()
}