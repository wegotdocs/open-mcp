import { z } from "zod"

export const inputParamsSchema = {
  "operation": z.string().optional(),
  "Id": z.string().describe("Unique identifier for this object. Sort order is ASC by default.").optional(),
  "Line": z.array(z.object({ "Id": z.string().describe("Unique identifier for this object. Sort order is ASC by default.").optional(), "DetailType": z.literal("DepositLineDetail").optional(), "DepositLineDetail": z.object({ "AccountRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "PaymentMethodRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "ClassRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "CheckNum": z.string().describe("The check number of the deposit line.").optional(), "TaxCodeRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "TxnType": z.enum(["APCreditCard","ARRefundCreditCard","Bill","BillPaymentCheck","BuildAssembly","CarryOver","Charge","Check","CreditMemo","Deposit","EFPLiabilityCheck","EFTBillPayment","EFTRefund","Estimate","InventoryAdjustment","InventoryTransfer","Invoice","ItemReceipt","JournalEntry"]).describe("The type of transaction. Valid values include Payment, SalesReceipt, and JournalEntry.").optional(), "Entity": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "Project": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "Description": z.string().describe("A description of the deposit line").optional() }).optional(), "Amount": z.number().describe("The amount of the deposit line.").optional(), "ProjectRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "Description": z.string().describe("A description of the deposit line").optional(), "LineNum": z.number().describe("The line number of the deposit line.").optional(), "LinkedTxn": z.array(z.object({ "TxnId": z.string().describe("Transaction Id of the related transaction.").optional(), "TxnType": z.string().describe("Transaction type of the linked object.").optional(), "TxnLineId": z.string().describe("Required for Deposit and Bill entities. -The line number of a specific line of the linked transaction. - If supplied, the TxnId and TxnType attributes of the linked transaction must also be populated.").optional() })).describe("Zero or more related transactions to this Deposit object. The following linked relationships are supported- Links to Estimate and TimeActivity objects can be established directly to this Deposit object with UI or with the API. Create, Read, Update, and Query operations are avaialble at the API level for these types of links. Only one link can be made to an Estimate. Progress Invoicing is not supported via the API. Links to expenses incurred on behalf of the customer are returned in the response with LinkedTxn.TxnType set to ReimburseCharge, ChargeCredit or StatementCharge corresponding to billable customer expenses of type Cash, Delayed Credit, and Delayed Charge, respectively. Links to these types of transactions are established within the QuickBooks UI, only, and are available as read-only at the API level. Links to payments applied to an Deposit object are returned in the response with LinkedTxn.TxnType set to Payment. Links to Payment transactions are established within the QuickBooks UI, only, and are available as read-only at the API level. Use LinkedTxn.TxnId as the ID in a separate read request for the specific resource to retrieve details of the linked object.").optional() })).describe("Individual line items of a transaction. Valid Line types include SalesItemLine, GroupLine, DescriptionOnlyLine (also used for inline Subtotal lines), DiscountLine and SubTotalLine (used for the overall transaction)").optional(),
  "SyncToken": z.string().describe("Version number of the object. It is used to lock an object for use by one app at a time. As soon as an application modifies an object, its SyncToken is incremented. Attempts to modify an object specifying an older SyncToken fails. Only the latest version of the object is maintained by QuickBooks Online.").optional(),
  "CurrencyRef": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `CurrencyRef` to the tool, first call the tool `expandSchema` with \"/properties/CurrencyRef\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Reference to the currency in which all amounts on the associated transaction are expressed. This must be defined if multicurrency is enabled for the company. Multicurrency is enabled for the company if Preferences.MultiCurrencyEnabled is set to true. Read more about multicurrency support here. Applicable if multicurrency is enabled for the company.</property-description>").optional(),
  "PrivateNote": z.string().describe("User entered, organization-private note about the transaction. This note does not appear on the invoice to the customer. This field maps to the Statement Memo field on the Invoice form in the QuickBooks Online UI.").optional(),
  "DepositToAccountRef": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `DepositToAccountRef` to the tool, first call the tool `expandSchema` with \"/properties/DepositToAccountRef\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Reference type</property-description>").optional(),
  "TxnDate": z.string().describe("The date entered by the user when this transaction occurred. yyyy/MM/dd is the valid date format. For posting transactions, this is the posting date that affects the financial statements. If the date is not supplied, the current date on the server is used. Sort order is ASC by default.").optional(),
  "TxnSource": z.string().describe("Used internally to specify originating source of a credit card transaction.").optional(),
  "DepartmentRef": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `DepartmentRef` to the tool, first call the tool `expandSchema` with \"/properties/DepartmentRef\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Reference type</property-description>").optional()
}