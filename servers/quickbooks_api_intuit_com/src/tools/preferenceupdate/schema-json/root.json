{
  "type": "object",
  "properties": {
    "AccountingInfoPrefs": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `AccountingInfoPrefs` to the tool, first call the tool `expandSchema` with \"/properties/AccountingInfoPrefs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "CurrencyPrefs": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `CurrencyPrefs` to the tool, first call the tool `expandSchema` with \"/properties/CurrencyPrefs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "EmailMessagesPrefs": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `EmailMessagesPrefs` to the tool, first call the tool `expandSchema` with \"/properties/EmailMessagesPrefs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "Id": {
      "type": "string",
      "example": "1"
    },
    "MetaData": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `MetaData` to the tool, first call the tool `expandSchema` with \"/properties/MetaData\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "OtherPrefs": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `OtherPrefs` to the tool, first call the tool `expandSchema` with \"/properties/OtherPrefs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "ProductAndServicesPrefs": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `ProductAndServicesPrefs` to the tool, first call the tool `expandSchema` with \"/properties/ProductAndServicesPrefs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "ReportPrefs": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `ReportPrefs` to the tool, first call the tool `expandSchema` with \"/properties/ReportPrefs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "SalesFormsPrefs": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `SalesFormsPrefs` to the tool, first call the tool `expandSchema` with \"/properties/SalesFormsPrefs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "SyncToken": {
      "type": "string",
      "example": "4"
    },
    "TaxPrefs": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `TaxPrefs` to the tool, first call the tool `expandSchema` with \"/properties/TaxPrefs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "TimeTrackingPrefs": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `TimeTrackingPrefs` to the tool, first call the tool `expandSchema` with \"/properties/TimeTrackingPrefs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "VendorAndPurchasesPrefs": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `VendorAndPurchasesPrefs` to the tool, first call the tool `expandSchema` with \"/properties/VendorAndPurchasesPrefs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "domain": {
      "type": "string",
      "example": "QBO"
    },
    "sparse": {
      "type": "boolean",
      "example": false
    }
  },
  "required": []
}