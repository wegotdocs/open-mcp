import { z } from "zod"

export const inputParamsSchema = {
  "AccountingInfoPrefs": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `AccountingInfoPrefs` to the tool, first call the tool `expandSchema` with \"/properties/AccountingInfoPrefs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "CurrencyPrefs": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `CurrencyPrefs` to the tool, first call the tool `expandSchema` with \"/properties/CurrencyPrefs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "EmailMessagesPrefs": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `EmailMessagesPrefs` to the tool, first call the tool `expandSchema` with \"/properties/EmailMessagesPrefs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "Id": z.string().optional(),
  "MetaData": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `MetaData` to the tool, first call the tool `expandSchema` with \"/properties/MetaData\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "OtherPrefs": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `OtherPrefs` to the tool, first call the tool `expandSchema` with \"/properties/OtherPrefs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "ProductAndServicesPrefs": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `ProductAndServicesPrefs` to the tool, first call the tool `expandSchema` with \"/properties/ProductAndServicesPrefs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "ReportPrefs": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `ReportPrefs` to the tool, first call the tool `expandSchema` with \"/properties/ReportPrefs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "SalesFormsPrefs": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `SalesFormsPrefs` to the tool, first call the tool `expandSchema` with \"/properties/SalesFormsPrefs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "SyncToken": z.string().optional(),
  "TaxPrefs": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `TaxPrefs` to the tool, first call the tool `expandSchema` with \"/properties/TaxPrefs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "TimeTrackingPrefs": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `TimeTrackingPrefs` to the tool, first call the tool `expandSchema` with \"/properties/TimeTrackingPrefs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "VendorAndPurchasesPrefs": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `VendorAndPurchasesPrefs` to the tool, first call the tool `expandSchema` with \"/properties/VendorAndPurchasesPrefs\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "domain": z.string().optional(),
  "sparse": z.boolean().optional()
}