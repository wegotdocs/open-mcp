import { z } from "zod"

export const inputParamsSchema = {
  "operation": z.string().optional(),
  "Id": z.string().describe("Unique identifier for this object. Sort order is ASC by default.").optional(),
  "TxnDate": z.string().describe("Transaction Date").optional(),
  "SyncToken": z.string().describe("Version number of the object. It is used to lock the object for use by one app at a time.").optional(),
  "domain": z.string().describe("Domain of the class.").optional(),
  "PrintStatus": z.string().describe("Print status of the credit memo.").optional(),
  "TotalAmt": z.number().describe("Total amount of the credit memo.").optional(),
  "ClassRef": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `ClassRef` to the tool, first call the tool `expandSchema` with \"/properties/ClassRef\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Reference type</property-description>").optional(),
  "SalesTermRef": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `SalesTermRef` to the tool, first call the tool `expandSchema` with \"/properties/SalesTermRef\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Reference type</property-description>").optional(),
  "CustomerRef": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `CustomerRef` to the tool, first call the tool `expandSchema` with \"/properties/CustomerRef\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Reference type</property-description>").optional(),
  "DocNumber": z.string().describe("Document number of the credit memo.").optional(),
  "PrivateNote": z.string().describe("Private note of the credit memo.").optional(),
  "CustomerMemo": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `CustomerMemo` to the tool, first call the tool `expandSchema` with \"/properties/CustomerMemo\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Customer memo of the credit memo.</property-description>").optional(),
  "PaymentMethodRef": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `PaymentMethodRef` to the tool, first call the tool `expandSchema` with \"/properties/PaymentMethodRef\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Reference type</property-description>").optional(),
  "ShipAddr": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `ShipAddr` to the tool, first call the tool `expandSchema` with \"/properties/ShipAddr\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Physical address</property-description>").optional(),
  "DepartmentRef": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `DepartmentRef` to the tool, first call the tool `expandSchema` with \"/properties/DepartmentRef\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Reference type</property-description>").optional(),
  "EmailStatus": z.string().describe("Email status of the credit memo.").optional(),
  "BillAddr": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `BillAddr` to the tool, first call the tool `expandSchema` with \"/properties/BillAddr\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Physical address</property-description>").optional(),
  "HomeBalance": z.number().describe("Home balance of the credit memo.").optional(),
  "RemainingCredit": z.number().describe("Remaining credit of the credit memo.").optional(),
  "RecurDataRef": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `RecurDataRef` to the tool, first call the tool `expandSchema` with \"/properties/RecurDataRef\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Reference type</property-description>").optional(),
  "TaxExemptionRef": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `TaxExemptionRef` to the tool, first call the tool `expandSchema` with \"/properties/TaxExemptionRef\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Reference type</property-description>").optional(),
  "Balance": z.number().describe("Balance of the credit memo.").optional(),
  "HomeTotalAmt": z.number().describe("Home total amount of the credit memo.").optional(),
  "Line": z.array(z.object({ "Id": z.string().describe("Unique identifier for this object. Sort order is ASC by default.").optional(), "Amount": z.number().describe("The total amount of the line item. This is the quantity multiplied by the unit price.").optional(), "Description": z.string().describe("A description of the line item.").optional(), "DetailType": z.enum(["SalesItemLineDetail","GroupLineDetail","DescriptionOnly","DiscountLineDetail","SubTotalLineDetail"]).describe("The type of detail for the line item. Valid values include SalesItemLineDetail.").optional(), "GroupLineDetail": z.object({ "Quantity": z.number().describe("The quantity of the item.").optional(), "Line": z.array(z.object({ "Id": z.string().describe("Unique identifier for this object. Sort order is ASC by default.").optional(), "Amount": z.number().describe("The total amount of the line item. This is the quantity multiplied by the unit price.").optional(), "Description": z.string().describe("A description of the line item.").optional(), "DetailType": z.enum(["SalesItemLineDetail","GroupLineDetail","DescriptionOnly","DiscountLineDetail","SubTotalLineDetail"]).describe("The type of detail for the line item. Valid values include SalesItemLineDetail.").optional(), "GroupLineDetail": z.object({ "Quantity": z.number().describe("The quantity of the item.").optional(), "Line": z.array(z.object({ "Id": z.string().describe("Unique identifier for this object. Sort order is ASC by default.").optional(), "Amount": z.number().describe("The total amount of the line item. This is the quantity multiplied by the unit price.").optional(), "Description": z.string().describe("A description of the line item.").optional(), "DetailType": z.enum(["SalesItemLineDetail","GroupLineDetail","DescriptionOnly","DiscountLineDetail","SubTotalLineDetail"]).describe("The type of detail for the line item. Valid values include SalesItemLineDetail.").optional(), "GroupLineDetail": z.object({ "Quantity": z.number().describe("The quantity of the item.").optional(), "Line": z.array(z.object({ "Id": z.string().describe("Unique identifier for this object. Sort order is ASC by default.").optional(), "Amount": z.number().describe("The total amount of the line item. This is the quantity multiplied by the unit price.").optional(), "Description": z.string().describe("A description of the line item.").optional(), "DetailType": z.enum(["SalesItemLineDetail","GroupLineDetail","DescriptionOnly","DiscountLineDetail","SubTotalLineDetail"]).describe("The type of detail for the line item. Valid values include SalesItemLineDetail.").optional(), "GroupLineDetail": z.object({ "Quantity": z.number().describe("The quantity of the item.").optional(), "Line": z.array(z.object({ "Id": z.string().describe("Unique identifier for this object. Sort order is ASC by default.").optional(), "Amount": z.number().describe("The total amount of the line item. This is the quantity multiplied by the unit price.").optional(), "Description": z.string().describe("A description of the line item.").optional(), "DetailType": z.enum(["SalesItemLineDetail","GroupLineDetail","DescriptionOnly","DiscountLineDetail","SubTotalLineDetail"]).describe("The type of detail for the line item. Valid values include SalesItemLineDetail.").optional(), "GroupLineDetail": z.object({ "Quantity": z.number().describe("The quantity of the item.").optional(), "Line": z.array(z.object({ "Id": z.string().describe("Unique identifier for this object. Sort order is ASC by default.").optional(), "Amount": z.number().describe("The total amount of the line item. This is the quantity multiplied by the unit price.").optional(), "Description": z.string().describe("A description of the line item.").optional(), "DetailType": z.enum(["SalesItemLineDetail","GroupLineDetail","DescriptionOnly","DiscountLineDetail","SubTotalLineDetail"]).describe("The type of detail for the line item. Valid values include SalesItemLineDetail.").optional(), "GroupLineDetail": z.object({ "Quantity": z.string().optional(), "Line": z.string().optional(), "GroupItemRef": z.string().optional() }).optional(), "SalesItemLineDetail": z.object({ "Qty": z.string().optional(), "UnitPrice": z.string().optional(), "ItemRef": z.string().optional(), "ClassRef": z.string().optional() }).optional(), "DiscountLineDetail": z.object({ "ClassRef": z.string().optional(), "TaxCodeRef": z.string().optional(), "DiscountAccountRef": z.string().optional(), "PercentBased": z.string().optional(), "DiscountPercent": z.string().optional() }).optional() }).describe("Reference type")).describe("Individual line items of a transaction. Valid Line types include SalesItemLine, GroupLine, DescriptionOnlyLine (also used for inline Subtotal lines), DiscountLine and SubTotalLine (used for the overall transaction)").optional(), "GroupItemRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional() }).optional(), "SalesItemLineDetail": z.object({ "Qty": z.number().describe("The quantity of the item.").optional(), "UnitPrice": z.number().describe("The price of a single unit of the item.").optional(), "ItemRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "ClassRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional() }).optional(), "DiscountLineDetail": z.object({ "ClassRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "TaxCodeRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "DiscountAccountRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "PercentBased": z.boolean().describe("If true, the discount is a percentage of the total amount. If false, the discount is a fixed amount.").optional(), "DiscountPercent": z.number().describe("The percentage of the discount. This field is required if PercentBased is true.").optional() }).optional() }).describe("Reference type")).describe("Individual line items of a transaction. Valid Line types include SalesItemLine, GroupLine, DescriptionOnlyLine (also used for inline Subtotal lines), DiscountLine and SubTotalLine (used for the overall transaction)").optional(), "GroupItemRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional() }).optional(), "SalesItemLineDetail": z.object({ "Qty": z.number().describe("The quantity of the item.").optional(), "UnitPrice": z.number().describe("The price of a single unit of the item.").optional(), "ItemRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "ClassRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional() }).optional(), "DiscountLineDetail": z.object({ "ClassRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "TaxCodeRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "DiscountAccountRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "PercentBased": z.boolean().describe("If true, the discount is a percentage of the total amount. If false, the discount is a fixed amount.").optional(), "DiscountPercent": z.number().describe("The percentage of the discount. This field is required if PercentBased is true.").optional() }).optional() }).describe("Reference type")).describe("Individual line items of a transaction. Valid Line types include SalesItemLine, GroupLine, DescriptionOnlyLine (also used for inline Subtotal lines), DiscountLine and SubTotalLine (used for the overall transaction)").optional(), "GroupItemRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional() }).optional(), "SalesItemLineDetail": z.object({ "Qty": z.number().describe("The quantity of the item.").optional(), "UnitPrice": z.number().describe("The price of a single unit of the item.").optional(), "ItemRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "ClassRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional() }).optional(), "DiscountLineDetail": z.object({ "ClassRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "TaxCodeRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "DiscountAccountRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "PercentBased": z.boolean().describe("If true, the discount is a percentage of the total amount. If false, the discount is a fixed amount.").optional(), "DiscountPercent": z.number().describe("The percentage of the discount. This field is required if PercentBased is true.").optional() }).optional() }).describe("Reference type")).describe("Individual line items of a transaction. Valid Line types include SalesItemLine, GroupLine, DescriptionOnlyLine (also used for inline Subtotal lines), DiscountLine and SubTotalLine (used for the overall transaction)").optional(), "GroupItemRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional() }).optional(), "SalesItemLineDetail": z.object({ "Qty": z.number().describe("The quantity of the item.").optional(), "UnitPrice": z.number().describe("The price of a single unit of the item.").optional(), "ItemRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "ClassRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional() }).optional(), "DiscountLineDetail": z.object({ "ClassRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "TaxCodeRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "DiscountAccountRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "PercentBased": z.boolean().describe("If true, the discount is a percentage of the total amount. If false, the discount is a fixed amount.").optional(), "DiscountPercent": z.number().describe("The percentage of the discount. This field is required if PercentBased is true.").optional() }).optional() }).describe("Reference type")).describe("Individual line items of a transaction. Valid Line types include SalesItemLine, GroupLine, DescriptionOnlyLine (also used for inline Subtotal lines), DiscountLine and SubTotalLine (used for the overall transaction)").optional(), "GroupItemRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional() }).optional(), "SalesItemLineDetail": z.object({ "Qty": z.number().describe("The quantity of the item.").optional(), "UnitPrice": z.number().describe("The price of a single unit of the item.").optional(), "ItemRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "ClassRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional() }).optional(), "DiscountLineDetail": z.object({ "ClassRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "TaxCodeRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "DiscountAccountRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "PercentBased": z.boolean().describe("If true, the discount is a percentage of the total amount. If false, the discount is a fixed amount.").optional(), "DiscountPercent": z.number().describe("The percentage of the discount. This field is required if PercentBased is true.").optional() }).optional() }).describe("Reference type")).describe("Individual line items of a transaction. Valid Line types include SalesItemLine, GroupLine, DescriptionOnlyLine (also used for inline Subtotal lines), DiscountLine and SubTotalLine (used for the overall transaction)").optional()
}