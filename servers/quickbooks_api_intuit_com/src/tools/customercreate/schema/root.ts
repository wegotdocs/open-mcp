import { z } from "zod"

export const inputParamsSchema = {
  "operation": z.string().optional(),
  "Id": z.string().describe("Unique identifier for this object. Sort order is ASC by default.").optional(),
  "SyncToken": z.string().describe("Version number of the object. It is used to lock an object for use by one app at a time. As soon as an application modifies an object, its SyncToken is incremented. Attempts to modify an object specifying an older SyncToken fails. Only the latest version of the object is maintained by QuickBooks Online.").optional(),
  "DisplayName": z.string().describe("The name of the person or organization as displayed. Must be unique across all Customer, Vendor, and Employee objects. Cannot be removed with sparse update. If not supplied, the system generates DisplayName by concatenating customer name components supplied in the request from the following list- Title, GivenName, MiddleName, FamilyName, and Suffix.").optional(),
  "Title": z.string().describe("Title of the person. This tag supports i18n, all locales. The DisplayName attribute or at least one of Title, GivenName, MiddleName, FamilyName, or Suffix attributes is required.").optional(),
  "GivenName": z.string().describe("Given name or first name of a person. The DisplayName attribute or at least one of Title, GivenName, MiddleName, FamilyName, or Suffix attributes is required.").optional(),
  "MiddleName": z.string().describe("Middle name of the person. The person can have zero or more middle names. The DisplayName attribute or at least one of Title, GivenName, MiddleName, FamilyName, or Suffix attributes is required.").optional(),
  "Suffix": z.string().describe("Suffix of the name. For example, Jr. The DisplayName attribute or at least one of Title, GivenName, MiddleName, FamilyName, or Suffix attributes is required.").optional(),
  "FamilyName": z.string().describe("Family name or the last name of the person. The DisplayName attribute or at least one of Title, GivenName, MiddleName, FamilyName, or Suffix attributes is required.").optional(),
  "PrimaryEmailAddr": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `PrimaryEmailAddr` to the tool, first call the tool `expandSchema` with \"/properties/PrimaryEmailAddr\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Primary email address.</property-description>").optional(),
  "ResaleNum": z.string().describe("Resale number or some additional info about the customer.").optional(),
  "SecondaryTaxIdentifier": z.string().describe("Also called UTR No. in ( UK ) , CST Reg No. ( IN ) also represents the tax registration number of the Person or Organization. This value is masked in responses, exposing only last five characters. For example, the ID of 123-45-6789 is returned as XXXXXX56789.").optional(),
  "ARAccountRef": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `ARAccountRef` to the tool, first call the tool `expandSchema` with \"/properties/ARAccountRef\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Identifies the accounts receivable account to be used for this customer. Each customer must have his own AR account. Applicable for France companies, only. Available when endpoint is evoked with the minorversion=3 query parameter. Query the Account name list resource to determine the appropriate Account object for this reference, where Account.AccountType=Accounts Receivable. Use Account.Id and Account.Name from that object for ARAccountRef.value and ARAccountRef.name, respectively.</property-description>").optional(),
  "DefaultTaxCodeRef": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `DefaultTaxCodeRef` to the tool, first call the tool `expandSchema` with \"/properties/DefaultTaxCodeRef\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Reference to a default tax code associated with this Customer object. Reference is valid if Customer.Taxable is set to true; otherwise, it is ignored. If automated sales tax is enabled (Preferences.TaxPrefs.PartnerTaxEnabled is set to true) the default tax code is set by the system and can not be overridden. Query the TaxCode name list resource to determine the appropriate TaxCode object for this reference. Use TaxCode.Id and TaxCode.Name from that object for DefaultTaxCodeRef.value and DefaultTaxCodeRef.name, respectively.</property-description>").optional(),
  "PreferredDeliveryMethod": z.string().describe("Preferred delivery method. Values are Print, Email, or None.").optional(),
  "GSTIN": z.string().describe("GSTIN is an identification number assigned to every GST registered business.").optional(),
  "SalesTermRef": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `SalesTermRef` to the tool, first call the tool `expandSchema` with \"/properties/SalesTermRef\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Reference to a SalesTerm associated with this Customer object. Query the Term name list resource to determine the appropriate Term object for this reference. Use Term.Id and Term.Name from that object for SalesTermRef.value and SalesTermRef.name, respectively.</property-description>").optional(),
  "CustomerTypeRef": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `CustomerTypeRef` to the tool, first call the tool `expandSchema` with \"/properties/CustomerTypeRef\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Reference to the customer type assigned to a customer. This field is only returned if the customer is assigned a customer type.</property-description>").optional(),
  "Fax": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `Fax` to the tool, first call the tool `expandSchema` with \"/properties/Fax\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Fax number.</property-description>").optional(),
  "BillWithParent": z.boolean().describe("If true, this Customer object is billed with its parent. If false, or null the customer is not to be billed with its parent. This attribute is valid only if this entity is a Job or sub Customer.").optional(),
  "Mobile": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `Mobile` to the tool, first call the tool `expandSchema` with \"/properties/Mobile\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Primary phone number.</property-description>").optional(),
  "PrimaryPhone": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `PrimaryPhone` to the tool, first call the tool `expandSchema` with \"/properties/PrimaryPhone\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Mobile phone number.</property-description>").optional(),
  "AlternatePhone": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `AlternatePhone` to the tool, first call the tool `expandSchema` with \"/properties/AlternatePhone\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Alternate phone number.</property-description>").optional(),
  "MetaData": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `MetaData` to the tool, first call the tool `expandSchema` with \"/properties/MetaData\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Descriptive information about the entity. The MetaData values are set by Data Services and are read only for all applications.</property-description>").optional(),
  "ParentRef": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `ParentRef` to the tool, first call the tool `expandSchema` with \"/properties/ParentRef\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>A reference to a Customer object that is the immediate parent of the Sub-Customer/Job in the hierarchical Customer:Job list. Required for the create operation if this object is a sub-customer or Job. Query the Customer name list resource to determine the appropriate Customer object for this reference. Use Customer.Id and Customer.DisplayName from that object for ParentRef.value and ParentRef.name, respectively.</property-description>").optional(),
  "WebAddr": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `WebAddr` to the tool, first call the tool `expandSchema` with \"/properties/WebAddr\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Website address.</property-description>").optional(),
  "ShipAddr": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `ShipAddr` to the tool, first call the tool `expandSchema` with \"/properties/ShipAddr\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Default shipping address. If a physical address is updated from within the transaction object, the QuickBooks Online API flows individual address components differently into the Line elements of the transaction response then when the transaction was first created- Line1 and Line2 elements are populated with the customer name and company name. Original Line1 through Line 5 contents, City, SubDivisionCode, and PostalCode flow into Line3 through Line5as a free format strings.</property-description>").optional(),
  "PaymentMethodRef": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `PaymentMethodRef` to the tool, first call the tool `expandSchema` with \"/properties/PaymentMethodRef\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Reference to a PaymentMethod associated with this Customer object. Query the PaymentMethod name list resource to determine the appropriate PaymentMethod object for this reference. Use PaymentMethod.Id and PaymentMethod.Name from that object for PaymentMethodRef.value and PaymentMethodRef.name, respectively.</property-description>").optional(),
  "BillAddr": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `BillAddr` to the tool, first call the tool `expandSchema` with \"/properties/BillAddr\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Default billing address. If a physical address is updated from within the transaction object, the QuickBooks Online API flows individual address components differently into the Line elements of the transaction response then when the transaction was first created- Line1 and Line2 elements are populated with the customer name and company name. Original Line1 through Line 5 contents, City, SubDivisionCode, and PostalCode flow into Line3 through Line5as a free format strings.</property-description>").optional(),
  "Job": z.boolean().describe("If true, this is a Job or sub-customer. If false or null, this is a top level customer, not a Job or sub-customer.").optional(),
  "BalanceWithJobs": z.number().describe("Cumulative open balance amount for the Customer (or Job) and all its sub-jobs. Cannot be written to QuickBooks.").optional(),
  "OpenBalanceDate": z.string().describe("Date of the Open Balance for the create operation. Write-on-create.").optional(),
  "Taxable": z.boolean().describe("If true, transactions for this customer are taxable. Default behavior with minor version 10 and above- true, if DefaultTaxCodeRef is defined or false if TaxExemptionReasonId is set.").optional(),
  "Notes": z.string().describe("Free form text describing the Customer.").optional(),
  "Active": z.boolean().describe("If true, this entity is currently enabled for use by QuickBooks. If there is an amount in Customer.Balance when setting this Customer object to inactive through the QuickBooks UI, a CreditMemo balancing transaction is created for the amount.").optional(),
  "CompanyName": z.string().describe("The name of the company associated with the person or organization.").optional(),
  "Balance": z.number().describe("Specifies the open balance amount or the amount unpaid by the customer. For the create operation, this represents the opening balance for the customer. When returned in response to the query request it represents the current open balance (unpaid amount) for that customer. Write-on-create.").optional(),
  "IsProject": z.boolean().describe("If true, indicates this is a Project.").optional(),
  "Source": z.string().describe("The Source type of the transactions created by QuickBooks Commerce. Valid values include  QBCommerce").optional(),
  "PrimaryTaxIdentifier": z.string().describe("Also called Tax Reg. No in ( UK ) , ( CA ) , ( IN ) , ( AU ) represents the tax ID of the Person or Organization. This value is masked in responses, exposing only last five characters. For example, the ID of 123-45-6789 is returned as XXXXXX56789.").optional(),
  "GSTRegistrationType": z.string().describe("For the filing of GSTR, transactions need to be classified depending on the type of customer to whom the sale is done. To facilitate this, we have introduced a new field as 'GST registration type'. Possible values are listed below- GST_REG_REG GST registered- Regular. Customer who has a business which is registered under GST and has a GSTIN (doesn’t include customers registered under composition scheme, as an SEZ or as EOU's, STP's EHTP's etc.). GST_REG_COMP GST registered-Composition. Customer who has a business which is registered under the composition scheme of GST and has a GSTIN. GST_UNREG GST unregistered. Customer who has a business which is not registered under GST and does not have a GSTIN. CONSUMER Consumer. Customer who is not registered under GST and is the final consumer of the service or product sold. OVERSEAS Overseas. Customer who has a business which is located out of India. SEZ SEZ. Customer who has a business which is registered under GST, has a GSTIN and is located in a SEZ or is a SEZ Developer. DEEMED Deemed exports- EOU's, STP's EHTP's etc. Customer who has a business which is registered under GST and falls in the category of companies (EOU's, STP's EHTP's etc.), to which supplies are made they are termed as deemed exports.").optional(),
  "PrintOnCheckName": z.string().describe("Name of the person or organization as printed on a check. If not provided, this is populated from DisplayName. Constraints- Cannot be removed with sparse update.").optional(),
  "FullyQualifiedName": z.string().describe("Fully qualified name of the object. The fully qualified name prepends the topmost parent, followed by each sub element separated by colons. Takes the form of Customer:Job:Sub-job. System generated. Limited to 5 levels.").optional(),
  "Level": z.number().int().describe("Specifies the level of the hierarchy in which the entity is located. Zero specifies the top level of the hierarchy; anything above will be level with respect to the parent. Constraints:up to 5 levels").optional(),
  "TaxExemptionReasonId": z.string().describe("The tax exemption reason associated with this customer object. Applicable if automated sales tax is enabled (Preferences.TaxPrefs.PartnerTaxEnabled is set to true) for the company. Set TaxExemptionReasonId to one of the following- - Id   Reason 1.  Federal government 2.   State government 3.   Local government 4.   Tribal government 5.   Charitable organization 6.   Religious organization 7.   Educational organization 8.   Hospital 9.  Resale 10. Direct pay permit 11. Multiple points of use 12. Direct mail 13. Agricultural production 14. Industrial production / manufacturing 15. Foreign diplomat").optional()
}