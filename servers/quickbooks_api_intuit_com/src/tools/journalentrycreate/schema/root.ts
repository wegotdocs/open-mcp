import { z } from "zod"

export const inputParamsSchema = {
  "operation": z.string().optional(),
  "Id": z.string().describe("Unique identifier for this object. Sort order is ASC by default.").optional(),
  "SyncToken": z.string().describe("Version number of the object. It is used to lock the object for use by one app at a time.").optional(),
  "createDate": z.string().describe("Date and time when the journal entry was created.").optional(),
  "Line": z.array(z.object({ "Id": z.string().describe("Unique identifier for this object. Sort order is ASC by default.").optional(), "Description": z.string().describe("Description of the line item.").optional(), "Amount": z.number().describe("Total amount of the line item.").optional(), "DetailType": z.string().describe("Detail type of the line item.").optional(), "LineNum": z.number().describe("Line number of the line item.").optional(), "JournalEntryLineDetail": z.object({ "PostingType": z.string().describe("Posting type").optional(), "AccountRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "Entity": z.object({ "Type": z.enum(["Vendor","Employee","Customer"]).describe("Type of the entity.").optional(), "EntityRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional() }).describe("Entity type").optional(), "ClassRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "DepartmentRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "TaxCodeRef": z.object({ "value": z.string().describe("The ID for the referenced object as found in the Id field of the object payload. The context is set by the type of reference and is specific to the QuickBooks company file.").optional(), "name": z.string().describe("An identifying name for the object being referenced by value and is derived from the field that holds the common name of that object. This varies by context and specific type of object referenced. For example, references to a Customer object use Customer.DisplayName to populate this field. Optionally returned in responses, implementation dependent.").optional() }).describe("Reference type").optional(), "TaxAmount": z.number().describe("Tax amount of the line item.").optional() }).optional() })).describe("List of line items in the journal entry.").optional(),
  "DocNumber": z.string().describe("Document number of the journal entry.").optional(),
  "PrivateNote": z.string().describe("Private note of the journal entry.").optional(),
  "TxnDate": z.string().describe("Transaction date of the journal entry.").optional(),
  "TaxRateRef": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `TaxRateRef` to the tool, first call the tool `expandSchema` with \"/properties/TaxRateRef\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Reference type</property-description>").optional(),
  "TotalAmt": z.number().describe("Total amount of the journal entry.").optional(),
  "MetaData": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `MetaData` to the tool, first call the tool `expandSchema` with \"/properties/MetaData\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Descriptive information about the object. The MetaData values are set by Data Services and are read only for all applications.</property-description>").optional()
}