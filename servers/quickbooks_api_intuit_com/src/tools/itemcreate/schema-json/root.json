{
  "type": "object",
  "properties": {
    "minorversion": {
      "type": "string",
      "example": "1",
      "default": "73"
    },
    "operation": {
      "type": "string",
      "example": "delete"
    },
    "Id": {
      "type": "string",
      "description": "Unique identifier for this object. Sort order is ASC by default."
    },
    "QtyOnHand": {
      "type": "number",
      "description": "Quantity on hand of the item."
    },
    "InvStartDate": {
      "type": "string",
      "description": "Start date of the inventory."
    },
    "IncomeAccountRef": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `IncomeAccountRef` to the tool, first call the tool `expandSchema` with \"/properties/IncomeAccountRef\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Reference type</property-description>",
      "additionalProperties": true
    },
    "Type": {
      "type": "string",
      "description": "Type of the item."
    },
    "AssetAccountRef": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `AssetAccountRef` to the tool, first call the tool `expandSchema` with \"/properties/AssetAccountRef\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Reference type</property-description>",
      "additionalProperties": true
    },
    "ExpenseAccountRef": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `ExpenseAccountRef` to the tool, first call the tool `expandSchema` with \"/properties/ExpenseAccountRef\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Reference type</property-description>",
      "additionalProperties": true
    },
    "SyncToken": {
      "type": "string",
      "description": "Version number of the object. It is used to lock the object for use by one app at a time."
    },
    "Sku": {
      "type": "string",
      "description": "SKU of the item."
    },
    "FullyQualifiedName": {
      "type": "string",
      "description": "Fully qualified name of the item."
    },
    "Name": {
      "type": "string",
      "description": "Name of the item."
    },
    "Description": {
      "type": "string",
      "description": "Description of the item."
    },
    "Active": {
      "type": "boolean",
      "description": "Whether the item is active."
    },
    "domain": {
      "type": "string",
      "description": "Domain of the item."
    },
    "TrackQtyOnHand": {
      "type": "boolean",
      "description": "Whether to track quantity on hand."
    },
    "UnitPrice": {
      "type": "number",
      "description": "Unit price of the item."
    },
    "MetaData": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `MetaData` to the tool, first call the tool `expandSchema` with \"/properties/MetaData\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Descriptive information about the object. The MetaData values are set by Data Services and are read only for all applications.</property-description>",
      "additionalProperties": true
    }
  },
  "required": []
}