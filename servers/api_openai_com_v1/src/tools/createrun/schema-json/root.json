{
  "type": "object",
  "properties": {
    "thread_id": {
      "description": "The ID of the thread to run.",
      "type": "string"
    },
    "include[]": {
      "description": "A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "step_details.tool_calls[*].file_search.results[*].content"
        ]
      }
    },
    "assistant_id": {
      "description": "The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.",
      "type": "string"
    },
    "model": {
      "description": "The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.",
      "example": "gpt-4o",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "string",
          "enum": [
            "o3-mini",
            "o3-mini-2025-01-31",
            "o1",
            "o1-2024-12-17",
            "gpt-4o",
            "gpt-4o-2024-11-20",
            "gpt-4o-2024-08-06",
            "gpt-4o-2024-05-13",
            "gpt-4o-mini",
            "gpt-4o-mini-2024-07-18",
            "gpt-4.5-preview",
            "gpt-4.5-preview-2025-02-27",
            "gpt-4-turbo",
            "gpt-4-turbo-2024-04-09",
            "gpt-4-0125-preview",
            "gpt-4-turbo-preview",
            "gpt-4-1106-preview",
            "gpt-4-vision-preview",
            "gpt-4",
            "gpt-4-0314",
            "gpt-4-0613",
            "gpt-4-32k",
            "gpt-4-32k-0314",
            "gpt-4-32k-0613",
            "gpt-3.5-turbo",
            "gpt-3.5-turbo-16k",
            "gpt-3.5-turbo-0613",
            "gpt-3.5-turbo-1106",
            "gpt-3.5-turbo-0125",
            "gpt-3.5-turbo-16k-0613"
          ]
        }
      ],
      "x-oaiTypeLabel": "string",
      "nullable": true
    },
    "reasoning_effort": {
      "type": "string",
      "enum": [
        "low",
        "medium",
        "high"
      ],
      "default": "medium",
      "nullable": true,
      "description": "**o-series models only** \n\nConstrains effort on reasoning for \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n"
    },
    "instructions": {
      "description": "Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.",
      "type": "string",
      "nullable": true
    },
    "additional_instructions": {
      "description": "Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.",
      "type": "string",
      "nullable": true
    },
    "additional_messages": {
      "description": "Adds additional messages to the thread before creating the run.",
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "user",
              "assistant"
            ],
            "description": "The role of the entity that is creating the message. Allowed values include:\n- `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.\n- `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.\n"
          },
          "content": {
            "x-oaiExpandable": true,
            "anyOf": [
              {
                "type": "string",
                "description": "The text contents of the message.",
                "title": "Text content"
              }
            ]
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "file_id": {
                  "type": "string",
                  "description": "The ID of the file to attach to the message."
                },
                "tools": {
                  "description": "The tools to add this file to.",
                  "type": "array",
                  "items": {
                    "x-oaiExpandable": true,
                    "anyOf": [
                      {
                        "type": "object",
                        "title": "Code interpreter tool",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of tool being defined: `code_interpreter`",
                            "enum": [
                              "code_interpreter"
                            ],
                            "x-stainless-const": true
                          }
                        },
                        "required": [
                          "type"
                        ]
                      }
                    ]
                  }
                }
              }
            },
            "description": "A list of files attached to the message, and the tools they should be added to.",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
            "additionalProperties": {
              "type": "string"
            },
            "x-oaiTypeLabel": "map",
            "nullable": true
          }
        }
      },
      "nullable": true
    },
    "tools": {
      "description": "Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.",
      "nullable": true,
      "type": "array",
      "maxItems": 20,
      "items": {
        "x-oaiExpandable": true,
        "anyOf": [
          {
            "type": "object",
            "title": "Code interpreter tool",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of tool being defined: `code_interpreter`",
                "enum": [
                  "code_interpreter"
                ],
                "x-stainless-const": true
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      }
    },
    "metadata": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `metadata` to the tool, first call the tool `expandSchema` with \"/properties/metadata\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n</property-description>",
      "additionalProperties": true
    },
    "temperature": {
      "type": "number",
      "minimum": 0,
      "maximum": 2,
      "default": 1,
      "example": 1,
      "nullable": true,
      "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n"
    },
    "top_p": {
      "type": "number",
      "minimum": 0,
      "maximum": 1,
      "default": 1,
      "example": 1,
      "nullable": true,
      "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
    },
    "stream": {
      "type": "boolean",
      "nullable": true,
      "description": "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n"
    },
    "max_prompt_tokens": {
      "type": "integer",
      "nullable": true,
      "description": "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n",
      "minimum": 256
    },
    "max_completion_tokens": {
      "type": "integer",
      "nullable": true,
      "description": "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n",
      "minimum": 256
    },
    "truncation_strategy": {
      "type": "string"
    },
    "tool_choice": {
      "type": "string"
    },
    "parallel_tool_calls": {
      "description": "Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.",
      "type": "boolean",
      "default": true
    },
    "response_format": {
      "nullable": true,
      "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
      "x-oaiExpandable": true,
      "anyOf": [
        {
          "type": "string",
          "description": "`auto` is the default value\n",
          "enum": [
            "auto"
          ],
          "x-stainless-const": true
        }
      ]
    }
  },
  "required": [
    "thread_id",
    "assistant_id"
  ]
}