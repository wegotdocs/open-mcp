{
  "type": "object",
  "properties": {
    "id": {
      "description": "Device identifier",
      "type": "integer",
      "format": "int32"
    },
    "displayName": {
      "type": "string",
      "description": "Display name (User assigned)"
    },
    "userData": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `userData` to the tool, first call the tool `expandSchema` with \"/properties/userData\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Custom attributes</property-description>",
      "additionalProperties": true
    },
    "nodeRoleId": {
      "type": "integer",
      "description": "Node Role identifier",
      "format": "int32"
    },
    "policyId": {
      "type": "integer",
      "description": "Assigned policy ID (overrides organization policy mapping, or reverts to organization policy if Null)",
      "format": "int32"
    },
    "organizationId": {
      "type": "integer",
      "description": "Organization identifier",
      "format": "int32"
    },
    "locationId": {
      "type": "integer",
      "description": "Location identifier",
      "format": "int32"
    },
    "warranty": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `warranty` to the tool, first call the tool `expandSchema` with \"/properties/warranty\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Warranty Info</property-description>",
      "additionalProperties": true
    }
  },
  "required": [
    "id"
  ]
}