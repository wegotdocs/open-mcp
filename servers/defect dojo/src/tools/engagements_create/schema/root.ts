import { z } from "zod"

export const inputParamsSchema = {
  "tags": z.array(z.string().min(1)).optional(),
  "name": z.string().max(300).nullable().optional(),
  "description": z.string().max(2000).nullable().optional(),
  "version": z.string().max(100).nullable().describe("Version of the product the engagement tested.").optional(),
  "first_contacted": z.string().date().nullable().optional(),
  "target_start": z.string().date(),
  "target_end": z.string().date(),
  "reason": z.string().max(2000).nullable().optional(),
  "tracker": z.string().url().max(200).nullable().describe("Link to epic or ticket system with changes to version.").optional(),
  "test_strategy": z.string().url().max(200).nullable().optional(),
  "threat_model": z.boolean().optional(),
  "api_test": z.boolean().optional(),
  "pen_test": z.boolean().optional(),
  "check_list": z.boolean().optional(),
  "status": z.union([z.literal("Not Started"), z.literal("Blocked"), z.literal("Cancelled"), z.literal("Completed"), z.literal("In Progress"), z.literal("On Hold"), z.literal("Waiting for Resource"), z.literal(null)]).nullable().describe("* `Not Started` - Not Started\n* `Blocked` - Blocked\n* `Cancelled` - Cancelled\n* `Completed` - Completed\n* `In Progress` - In Progress\n* `On Hold` - On Hold\n* `Waiting for Resource` - Waiting for Resource").optional(),
  "engagement_type": z.union([z.literal("Interactive"), z.literal("CI/CD"), z.literal(null)]).nullable().describe("* `Interactive` - Interactive\n* `CI/CD` - CI/CD").optional(),
  "build_id": z.string().max(150).nullable().describe("Build ID of the product the engagement tested.").optional(),
  "commit_hash": z.string().max(150).nullable().describe("Commit hash from repo").optional(),
  "branch_tag": z.string().max(150).nullable().describe("Tag or branch of the product the engagement tested.").optional(),
  "source_code_management_uri": z.string().url().max(600).nullable().describe("Resource link to source code").optional(),
  "deduplication_on_engagement": z.boolean().describe("If enabled deduplication will only mark a finding in this engagement as duplicate of another finding if both findings are in this engagement. If disabled, deduplication is on the product level.").optional(),
  "lead": z.number().int().nullable().optional(),
  "requester": z.number().int().nullable().optional(),
  "preset": z.number().int().nullable().describe("Settings and notes for performing this engagement.").optional(),
  "report_type": z.number().int().nullable().optional(),
  "product": z.number().int(),
  "build_server": z.number().int().nullable().describe("Build server responsible for CI/CD test").optional(),
  "source_code_management_server": z.number().int().nullable().describe("Source code server for CI/CD test").optional(),
  "orchestration_engine": z.number().int().nullable().describe("Orchestration service responsible for CI/CD test").optional()
}