import { z } from "zod"

export const inputParamsSchema = {
  "business_criticality": z.string().optional(),
  "created": z.union([z.literal(1), z.literal(2), z.literal(3), z.literal(4), z.literal(5), z.literal(6), z.literal(7), z.literal(null)]).nullable().describe("* `None` - Any date\n* `1` - Today\n* `2` - Past 7 days\n* `3` - Past 30 days\n* `4` - Past 90 days\n* `5` - Current month\n* `6` - Current year\n* `7` - Past year").optional(),
  "description": z.string().optional(),
  "external_audience": z.boolean().optional(),
  "has_tags": z.boolean().describe("Has tags").optional(),
  "id": z.array(z.number().int()).describe("Multiple values may be separated by commas.").optional(),
  "internet_accessible": z.boolean().optional(),
  "lifecycle": z.string().optional(),
  "limit": z.number().int().describe("Number of results to return per page.").optional(),
  "name": z.string().optional(),
  "name_exact": z.string().optional(),
  "not_tag": z.string().describe("Not Tag name contains").optional(),
  "not_tags": z.array(z.string()).describe("Comma separated list of exact tags not present on product").optional(),
  "o": z.array(z.enum(["-business_criticality","-created","-external_audience","-id","-internet_accessible","-lifecycle","-name","-origin","-platform","-prod_numeric_grade","-prod_type","-prod_type__name","-product_manager","-product_manager__first_name","-product_manager__last_name","-revenue","-team_manager","-team_manager__first_name","-team_manager__last_name","-technical_contact","-technical_contact__first_name","-technical_contact__last_name","-tid","-updated","-user_records","business_criticality","created","external_audience","id","internet_accessible","lifecycle","name","origin","platform","prod_numeric_grade","prod_type","prod_type__name","product_manager","product_manager__first_name","product_manager__last_name","revenue","team_manager","team_manager__first_name","team_manager__last_name","technical_contact","technical_contact__first_name","technical_contact__last_name","tid","updated","user_records"])).describe("Ordering\n\n* `id` - Id\n* `-id` - Id (descending)\n* `tid` - Tid\n* `-tid` - Tid (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `created` - Created\n* `-created` - Created (descending)\n* `prod_numeric_grade` - Prod numeric grade\n* `-prod_numeric_grade` - Prod numeric grade (descending)\n* `business_criticality` - Business criticality\n* `-business_criticality` - Business criticality (descending)\n* `platform` - Platform\n* `-platform` - Platform (descending)\n* `lifecycle` - Lifecycle\n* `-lifecycle` - Lifecycle (descending)\n* `origin` - Origin\n* `-origin` - Origin (descending)\n* `revenue` - Revenue\n* `-revenue` - Revenue (descending)\n* `external_audience` - External audience\n* `-external_audience` - External audience (descending)\n* `internet_accessible` - Internet accessible\n* `-internet_accessible` - Internet accessible (descending)\n* `product_manager` - Product manager\n* `-product_manager` - Product manager (descending)\n* `product_manager__first_name` - Product manager  first name\n* `-product_manager__first_name` - Product manager  first name (descending)\n* `product_manager__last_name` - Product manager  last name\n* `-product_manager__last_name` - Product manager  last name (descending)\n* `technical_contact` - Technical contact\n* `-technical_contact` - Technical contact (descending)\n* `technical_contact__first_name` - Technical contact  first name\n* `-technical_contact__first_name` - Technical contact  first name (descending)\n* `technical_contact__last_name` - Technical contact  last name\n* `-technical_contact__last_name` - Technical contact  last name (descending)\n* `team_manager` - Team manager\n* `-team_manager` - Team manager (descending)\n* `team_manager__first_name` - Team manager  first name\n* `-team_manager__first_name` - Team manager  first name (descending)\n* `team_manager__last_name` - Team manager  last name\n* `-team_manager__last_name` - Team manager  last name (descending)\n* `prod_type` - Prod type\n* `-prod_type` - Prod type (descending)\n* `prod_type__name` - Prod type  name\n* `-prod_type__name` - Prod type  name (descending)\n* `updated` - Updated\n* `-updated` - Updated (descending)\n* `user_records` - User records\n* `-user_records` - User records (descending)").optional(),
  "offset": z.number().int().describe("The initial index from which to return the results.").optional(),
  "origin": z.string().optional(),
  "outside_of_sla": z.number().optional(),
  "platform": z.string().optional(),
  "prefetch": z.array(z.enum(["authorization_groups","members","prod_type","product_manager","regulations","sla_configuration","team_manager","technical_contact"])).describe("List of fields for which to prefetch model instances and add those to the response").optional(),
  "prod_numeric_grade": z.array(z.number().int()).describe("Multiple values may be separated by commas.").optional(),
  "prod_type": z.array(z.number().int()).describe("Multiple values may be separated by commas.").optional(),
  "product_manager": z.array(z.number().int()).describe("Multiple values may be separated by commas.").optional(),
  "regulations": z.array(z.number().int()).describe("Multiple values may be separated by commas.").optional(),
  "revenue": z.number().optional(),
  "tag": z.string().describe("Tag name contains").optional(),
  "tags": z.array(z.string()).describe("Comma separated list of exact tags (uses OR for multiple values)").optional(),
  "tags__and": z.array(z.string()).describe("Comma separated list of exact tags to match with an AND expression").optional(),
  "team_manager": z.array(z.number().int()).describe("Multiple values may be separated by commas.").optional(),
  "technical_contact": z.array(z.number().int()).describe("Multiple values may be separated by commas.").optional(),
  "tid": z.array(z.number().int()).describe("Multiple values may be separated by commas.").optional(),
  "updated": z.union([z.literal(1), z.literal(2), z.literal(3), z.literal(4), z.literal(5), z.literal(6), z.literal(7), z.literal(null)]).nullable().describe("* `None` - Any date\n* `1` - Today\n* `2` - Past 7 days\n* `3` - Past 30 days\n* `4` - Past 90 days\n* `5` - Current month\n* `6` - Current year\n* `7` - Past year").optional(),
  "user_records": z.array(z.number().int()).describe("Multiple values may be separated by commas.").optional()
}