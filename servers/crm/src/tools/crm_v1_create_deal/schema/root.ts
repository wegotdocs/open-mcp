import { z } from "zod"

export const inputParamsSchema = {
  "campaign": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `campaign` to the tool, first call the tool `expandSchema` with \"/properties/campaign\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "contacts": z.array(z.object({ "birthday": z.object({ "day": z.number().optional(), "month": z.number().optional(), "year": z.number().optional() }).optional(), "emails": z.array(z.object({ "email": z.string().optional() })).optional(), "facebook": z.string().optional(), "legal_bases": z.array(z.object({ "category": z.string().optional(), "status": z.string().optional(), "type": z.string().optional() })).optional(), "linkedin": z.string().optional(), "name": z.string().optional(), "phones": z.array(z.object({ "phone": z.string().optional(), "type": z.string().optional() })).optional(), "skype": z.string().optional(), "title": z.string().optional() })).optional(),
  "deal": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `deal` to the tool, first call the tool `expandSchema` with \"/properties/deal\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "deal_products": z.array(z.object({ "amount": z.number().optional(), "base_price": z.number().optional(), "description": z.string().optional(), "discount_type": z.string().optional(), "name": z.string().optional(), "price": z.number().optional(), "recurrence": z.string().optional(), "total": z.number().optional() })).optional(),
  "deal_source": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `deal_source` to the tool, first call the tool `expandSchema` with \"/properties/deal_source\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "distribution_settings": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `distribution_settings` to the tool, first call the tool `expandSchema` with \"/properties/distribution_settings\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "organization": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `organization` to the tool, first call the tool `expandSchema` with \"/properties/organization\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional()
}