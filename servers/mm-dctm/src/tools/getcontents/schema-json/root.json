{
  "type": "object",
  "properties": {
    "repositoryName": {
      "description": "The repository name.",
      "type": "string"
    },
    "objectId": {
      "description": "The r_object_id of required sysobject.",
      "type": "string"
    },
    "items-per-page": {
      "description": "The number of entries per page. When the result feed is paged, the attribute items-per-page will be displayed in the feed.",
      "type": "integer",
      "default": 100
    },
    "page": {
      "description": "The number of the page to be served. When the result feed is paged, the attribute page will be displayed in the feed.",
      "type": "integer",
      "default": 1
    },
    "include-total": {
      "description": "Indicate to calculate the total count of the feed items as though not returning them all in one page. When the result feed is paged, the attribute include-total will be displayed in the feed.\n* true - the total count of feed items is calculated by server and returned\n* false - neither calculate nor return the total count",
      "type": "boolean",
      "default": false
    },
    "view": {
      "description": "Properties to return. The pattern is like:?view=(:view-name)?(,column)*. (:view-name) and (,columns)* must be mutually exclusive names of predefined views start with colon (':'). The following view-name are defined: :all :default\n\nIf no view-name is specified, names of properties or predefined views should be returned, separated by comma (',').",
      "type": "string",
      "default": ":default"
    },
    "filter": {
      "description": "A filter expression in a subset of XPath.",
      "type": "string"
    },
    "sort": {
      "description": "Sorting for entries in collection result. A sort consists of multiple sort specifications, separated by comma (','). Each sort specification consists of an attribute to be sorted and its sort order, separated by the spacpe (' ').\n\nSort order can be either DESC orASC, case insensitive. Sort order is optional, if not specified, the default sort order isASC. Optionally it can be specified with non-repeating attributes. Sort order can be forced to be in case insensitive mode, with the hint no-case. Whether the default sort is in case sensitive mode or not is determined by the database.\n\nExample: sort=r_modify_date desc,object_name asc no-case,title. If any attribute with invalid name is specified, error will be thrown.",
      "type": "string"
    },
    "inline": {
      "description": "Ensures whether to show content (the object instance) in the atom entry for a collection. * 'true', return object instance and embed object instance into entry's content element. * 'false', do not return object instance within entry's content.",
      "type": "boolean",
      "default": false
    },
    "links": {
      "description": "Ensures whether link relations to be returned for this object representation. * 'true', return links for the object. * 'false' do not return links for the object.",
      "type": "boolean",
      "default": true
    },
    "media-url-policy": {
      "description": "Specifies the content media URL return policy. * 'dc-pref', would try to retrieve a distributed content URL first. If no distributed content URL is available, a Content Media resource URL from the REST server is still acceptable. * 'dc-only', return a distributed content URL. If there is no ACS server or BOCS server, the REST server returns the HTTP 400 Conflict error. * 'local', return a Content Media resource URL from the REST server regardless of the availability of the ACS server and the BOCS server. * 'all', all available Content Media links are returned.",
      "type": "string",
      "enum": [
        "DC_PREF",
        "DC_ONLY",
        "LOCAL",
        "ALL"
      ]
    },
    "network-location": {
      "description": "The network location for distributed content write.",
      "type": "string"
    },
    "require-checksum": {
      "description": "Specifies the query parameter for Checksum",
      "type": "Boolean"
    },
    "Accept": {
      "description": "The Accept header.",
      "type": "string",
      "enum": [
        "application/vnd.emc.documentum+json",
        "application/atom+xml",
        "application/hal+json"
      ]
    }
  },
  "required": [
    "repositoryName",
    "objectId"
  ]
}