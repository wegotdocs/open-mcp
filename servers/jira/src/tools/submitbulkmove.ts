import { z } from "zod"

export const toolName = `submitbulkmove`
export const toolDescription = `Bulk move issues`
export const baseUrl = `https://your-domain.atlassian.net`
export const path = `/rest/api/3/bulk/issues/move`
export const method = `post`
export const security = [
  {
    "key": "Authorization",
    "value": "Basic <mcp-env-var>USERNAME_PASSWORD_BASE64</mcp-env-var>",
    "in": "header",
    "envVarName": "USERNAME_PASSWORD_BASE64",
    "schemeType": "http",
    "schemeScheme": "basic"
  },
  {
    "key": "Authorization",
    "value": "Bearer <mcp-env-var>OAUTH2_TOKEN</mcp-env-var>",
    "in": "header",
    "envVarName": "OAUTH2_TOKEN",
    "schemeType": "oauth2"
  }
]
export const keys = {
  "query": [],
  "header": [],
  "path": [],
  "cookie": [],
  "body": [
    "sendBulkNotification",
    "targetToSourcesMapping"
  ]
}
export const flatMap = {}

export const inputParams = {
  "sendBulkNotification": z.boolean().nullable().describe("A boolean value that indicates whether to send a bulk change notification when the issues are being moved.\n\nIf `true`, dispatches a bulk notification email to users about the updates.").optional(),
  "targetToSourcesMapping": z.record(z.object({ "inferClassificationDefaults": z.boolean().describe("If `true`, when issues are moved into this target group, they will adopt the target project's default classification, if they don't have a classification already. If they do have a classification, it will be kept the same even after the move. Leave `targetClassification` empty when using this.\n\nIf `false`, you must provide a `targetClassification` mapping for each classification associated with the selected issues.\n\n[Benefit from data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)"), "inferFieldDefaults": z.boolean().describe("If `true`, values from the source issues will be retained for the mandatory fields in the field configuration of the destination project. The `targetMandatoryFields` property shouldn't be defined.\n\nIf `false`, the user is required to set values for mandatory fields present in the field configuration of the destination project. Provide input by defining the `targetMandatoryFields` property"), "inferStatusDefaults": z.boolean().describe("If `true`, the statuses of issues being moved in this target group that are not present in the target workflow will be changed to the default status of the target workflow (see below). Leave `targetStatus` empty when using this.\n\nIf `false`, you must provide a `targetStatus` for each status not present in the target workflow.\n\nThe default status in a workflow is referred to as the \"initial status\". Each workflow has its own unique initial status. When an issue is created, it is automatically assigned to this initial status. Read more about configuring initial statuses: [Configure the initial status | Atlassian Support.](https://support.atlassian.com/jira-cloud-administration/docs/configure-the-initial-status/)"), "inferSubtaskTypeDefault": z.boolean().describe("When an issue is moved, its subtasks (if there are any) need to be moved with it. `inferSubtaskTypeDefault` helps with moving the subtasks by picking a random subtask type in the target project.\n\nIf `true`, subtasks will automatically move to the same project as their parent.\n\nWhen they move:\n\n *  Their `issueType` will be set to the default for subtasks in the target project.\n *  Values for mandatory fields will be retained from the source issues\n *  Specifying separate mapping for implicit subtasks won’t be allowed.\n\nIf `false`, you must manually move the subtasks. They will retain the parent which they had in the current project after being moved."), "issueIdsOrKeys": z.array(z.string()).describe("List of issue IDs or keys to be moved. These issues must be from the same project, have the same issue type, and be from the same parent (if they’re subtasks).").optional(), "targetClassification": z.array(z.object({ "classifications": z.record(z.array(z.string())).describe("An object with the key as the ID of the target classification and value with the list of the IDs of the current source classifications."), "issueType": z.string().describe("ID of the source issueType to which issues present in `issueIdOrKeys` belongs.").optional(), "projectKeyOrId": z.string().describe("ID or key of the source project to which issues present in `issueIdOrKeys` belongs.").optional() }).strict().nullable().describe("Classification mapping for classifications in source issues to respective target classification.")).nullable().describe("List of the objects containing classifications in the source issues and their new values which need to be set during the bulk move operation.\n\n *  **You should only define this property when `inferClassificationDefaults` is `false`.**\n *  **In order to provide mapping for issues which don't have a classification, use `\"-1\"`.**").optional(), "targetMandatoryFields": z.array(z.object({ "fields": z.record(z.object({ "retain": z.boolean().nullable().describe("If `true`, will try to retain original non-null issue field values on move."), "type": z.enum(["adf","raw"]).optional(), "value": z.record(z.any()).optional() }).strict().and(z.union([z.object({ "retain": z.boolean().nullable().describe("If `true`, will try to retain original non-null issue field values on move."), "type": z.enum(["adf","raw"]).nullable().describe("Will treat as `MandatoryFieldValue` if type is `raw` or `empty`"), "value": z.array(z.string().describe("Value for each field. Provide a <code>list of strings</code> for non-ADF fields.")).describe("Value for each field. Provide a `list of strings` for non-ADF fields.") }).describe("List of string of inputs"), z.object({ "retain": z.boolean().nullable().describe("If `true`, will try to retain original non-null issue field values on move."), "type": z.enum(["adf","raw"]).describe("Will treat as `MandatoryFieldValueForADF` if type is `adf`"), "value": z.record(z.any()).describe("Value for each field. Accepts Atlassian Document Format (ADF) for rich text fields like `description`, `environments`. For ADF format details, refer to: [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure)") }).describe("An object notation input")])).describe("Can contain multiple field values of following types depending on `type` key")).describe("Contains the value of mandatory fields") }).strict().nullable().describe("Field mapping for mandatory fields in target")).nullable().describe("List of objects containing mandatory fields in the target field configuration and new values that need to be set during the bulk move operation.\n\nThe new values will only be applied if the field is mandatory in the target project and at least one issue from the source has that field empty, or if the field context is different in the target project (e.g. project-scoped version fields).\n\n**You should only define this property when `inferFieldDefaults` is `false`.**").optional(), "targetStatus": z.array(z.object({ "statuses": z.record(z.array(z.string())).describe("An object with the key as the ID of the target status and value with the list of the IDs of the current source statuses.") }).strict().nullable().describe("Status mapping for statuses in source workflow to respective target status in target workflow.")).nullable().describe("List of the objects containing statuses in the source workflow and their new values which need to be set during the bulk move operation.\n\nThe new values will only be applied if the source status is invalid for the target project and issue type.\n\n**You should only define this property when `inferStatusDefaults` is `false`.**").optional() }).strict().describe("An object representing the mapping of issues and data related to destination entities, like fields and statuses, that are required during a bulk move.")).describe("An object representing the mapping of issues and data related to destination entities, like fields and statuses, that are required during a bulk move.\n\nThe key is a string that is created by concatenating the following three entities in order, separated by commas. The format is `<project ID or key>,<issueType ID>,<parent ID or key>`. It should be unique across mappings provided in the payload. If you provide multiple mappings for the same key, only one will be processed. However, the operation won't fail, so the error may be hard to track down.\n\n *  ***Destination project*** (Required): ID or key of the project to which the issues are being moved.\n *  ***Destination issueType*** (Required): ID of the issueType to which the issues are being moved.\n *  ***Destination parent ID or key*** (Optional): ID or key of the issue which will become the parent of the issues being moved. Only required when the destination issueType is a subtask.").optional()
}