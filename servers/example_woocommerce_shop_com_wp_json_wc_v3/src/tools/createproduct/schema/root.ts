import { z } from "zod"

export const inputParamsSchema = {
  "id": z.number().int().describe("Unique identifier for the resource. read-only").optional(),
  "name": z.string().describe("Product name.").optional(),
  "slug": z.string().describe("Product slug.").optional(),
  "permalink": z.string().describe("Product URL. read-only").optional(),
  "date_created": z.string().datetime({ offset: true }).describe("The date the product was created, in the site's timezone. read-only").optional(),
  "date_created_gmt": z.string().datetime({ offset: true }).describe("The date the product was created, as GMT. read-only").optional(),
  "date_modified": z.string().datetime({ offset: true }).describe("The date the product was last modified, in the site's timezone. read-only").optional(),
  "date_modified_gmt": z.string().datetime({ offset: true }).describe("The date the product was last modified, as GMT. read-only").optional(),
  "type": z.string().describe("Product type. Options: simple, grouped, external and variable. Default is simple.").optional(),
  "status": z.string().describe("Product status (post status). Options: draft, pending, private and publish. Default is publish.").optional(),
  "featured": z.boolean().describe("Featured product. Default is false.").optional(),
  "catalog_visibility": z.string().describe("Catalog visibility. Options: visible, catalog, search and hidden. Default is visible.").optional(),
  "description": z.string().describe("Product description.").optional(),
  "short_description": z.string().describe("Product short description.").optional(),
  "sku": z.string().describe("Unique identifier.").optional(),
  "price": z.string().describe("Current product price. read-only").optional(),
  "regular_price": z.string().describe("Regular product price.").optional(),
  "sale_price": z.string().describe("Product sale price.").optional(),
  "date_on_sale_from": z.string().datetime({ offset: true }).describe("Start date of sale price, in the site's timezone.").optional(),
  "date_on_sale_from_gmt": z.string().datetime({ offset: true }).describe("Start date of sale price, as GMT.").optional(),
  "date_on_sale_to": z.string().datetime({ offset: true }).describe("End date of sale price, in the site's timezone.").optional(),
  "date_on_sale_to_gmt": z.string().datetime({ offset: true }).describe("End date of sale price, as GMT.").optional(),
  "price_html": z.string().describe("Price formatted in HTML. read-only").optional(),
  "on_sale": z.boolean().describe("Shows if the product is on sale. read-only").optional(),
  "purchasable": z.boolean().describe("Shows if the product can be bought. read-only").optional(),
  "total_sales": z.number().int().describe("Amount of sales. read-only").optional(),
  "virtual": z.boolean().describe("If the product is virtual. Default is false.").optional(),
  "downloadable": z.boolean().describe("If the product is downloadable. Default is false.").optional(),
  "downloads": z.array(z.object({ "id": z.string().describe("File ID.").optional(), "name": z.string().describe("File name.").optional(), "file": z.string().describe("File URL.").optional() })).describe("List of downloadable files.").optional(),
  "download_limit": z.number().int().describe("Number of times downloadable files can be downloaded after purchase. Default is -1.").optional(),
  "download_expiry": z.number().int().describe("Number of days until access to downloadable files expires. Default is -1.").optional(),
  "external_url": z.string().describe("Product external URL. Only for external products.").optional(),
  "button_text": z.string().describe("Product external button text. Only for external products.").optional(),
  "tax_status": z.string().describe("Tax status. Options: taxable, shipping and none. Default is taxable.").optional(),
  "tax_class": z.string().describe("Tax class.").optional(),
  "manage_stock": z.boolean().describe("Stock management at product level. Default is false.").optional(),
  "stock_quantity": z.number().int().describe("Stock quantity.").optional(),
  "stock_status": z.string().describe("Controls the stock status of the product. Options: instock, outofstock, onbackorder. Default is instock.").optional(),
  "backorders": z.string().describe("If managing stock, this controls if backorders are allowed. Options: no, notify and yes. Default is no.").optional(),
  "backorders_allowed": z.boolean().describe("Shows if backorders are allowed. read-only").optional(),
  "backordered": z.boolean().describe("Shows if the product is on backordered. read-only").optional(),
  "sold_individually": z.boolean().describe("Allow one item to be bought in a single order. Default is false.").optional(),
  "weight": z.string().describe("Product weight.").optional(),
  "dimensions": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `dimensions` to the tool, first call the tool `expandSchema` with \"/properties/dimensions\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "shipping_required": z.boolean().describe("Shows if the product need to be shipped. read-only").optional(),
  "shipping_taxable": z.boolean().describe("Shows whether or not the product shipping is taxable. read-only").optional(),
  "shipping_class": z.string().describe("Shipping class slug.").optional(),
  "shipping_class_id": z.number().int().describe("Shipping class ID.").optional(),
  "reviews_allowed": z.boolean().describe("Allow reviews. Default is true.").optional(),
  "average_rating": z.string().describe("Reviews average rating. read-only").optional(),
  "rating_count": z.number().int().describe("Amount of reviews that the product have. read-only").optional(),
  "related_ids": z.array(z.number().int()).describe("List of related products IDs. read-only").optional(),
  "upsell_ids": z.array(z.number().int()).describe("List of up-sell products IDs.").optional(),
  "cross_sell_ids": z.array(z.number().int()).describe("List of cross-sell products IDs.").optional(),
  "parent_id": z.number().int().describe("Product parent ID.").optional(),
  "purchase_note": z.string().describe("Optional note to send the customer after purchase.").optional(),
  "categories": z.array(z.object({ "id": z.number().int().describe("Category ID.").optional(), "name": z.string().describe("Category name. read-only").optional(), "slug": z.string().describe("Category slug. read-only").optional() })).describe("List of categories.").optional(),
  "tags": z.array(z.object({ "id": z.number().int().describe("Tag ID.").optional(), "name": z.string().describe("Tag name. read-only").optional(), "slug": z.string().describe("Tag slug. read-only").optional() })).describe("List of tags.").optional(),
  "images": z.array(z.object({ "id": z.number().int().describe("Image ID.").optional(), "date_created": z.string().datetime({ offset: true }).describe("The date the image was created, in the site's timezone. read-only").optional(), "date_created_gmt": z.string().datetime({ offset: true }).describe("The date the image was created, as GMT. read-only").optional(), "date_modified": z.string().datetime({ offset: true }).describe("The date the image was last modified, in the site's timezone. read-only").optional(), "date_modified_gmt": z.string().datetime({ offset: true }).describe("The date the image was last modified, as GMT. read-only").optional(), "src": z.string().describe("Image URL.").optional(), "name": z.string().describe("Image name.").optional(), "alt": z.string().describe("Image alternative text.").optional() })).describe("List of product images.").optional(),
  "attributes": z.array(z.object({ "id": z.number().int().describe("Attribute ID.").optional(), "name": z.string().describe("Attribute name.").optional(), "option": z.string().describe("Selected attribute term name. Applicable only for Product represents SKU (variation)").optional() })).describe("List of attributes.").optional(),
  "default_attributes": z.array(z.object({ "id": z.number().int().describe("Attribute ID.").optional(), "name": z.string().describe("Attribute name.").optional(), "option": z.string().describe("Selected attribute term name. Applicable only for Product represents SKU (variation)").optional() })).describe("List of default attributes.").optional(),
  "variations": z.array(z.number().int()).describe("List of variations IDs. read-only").optional(),
  "grouped_products": z.array(z.number().int()).describe("List of grouped products ID.").optional(),
  "menu_order": z.number().int().describe("Menu order, used to custom sort products.").optional(),
  "meta_data": z.array(z.object({ "id": z.number().int().describe("Meta ID.").optional(), "key": z.string().describe("Meta key.").optional(), "value": z.object({}).describe("Meta value.").optional(), "display_key": z.string().describe("Meta key for UI display.").optional(), "display_value": z.object({}).describe("Meta value for UI display.").optional() })).describe("Meta data properties.").optional()
}