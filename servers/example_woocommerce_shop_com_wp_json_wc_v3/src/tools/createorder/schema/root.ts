import { z } from "zod"

export const inputParamsSchema = {
  "id": z.number().int().describe("Unique identifier for the resource.").optional(),
  "parent_id": z.number().int().describe("Parent order ID.").optional(),
  "number": z.string().describe("Order number.").optional(),
  "order_key": z.string().describe("Order key.").optional(),
  "created_via": z.string().describe("Shows where the order was created.").optional(),
  "version": z.string().describe("Version of WooCommerce which last updated the order.").optional(),
  "status": z.enum(["pending","processing","on-hold","completed","cancelled","refunded","failed"]).describe("Order status.").optional(),
  "currency": z.enum(["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BRL","BSD","BTC","BTN","BWP","BYR","BYN","BZD","CAD","CDF","CHF","CLP","CNY","COP","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GGP","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","IMP","INR","IQD","IRR","IRT","ISK","JEP","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRU","MUR","MVR","MWK","MXN","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PRB","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","SSP","STN","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","UYU","UZS","VEF","VES","VND","VUV","WST","XAF","XCD","XOF","XPF","YER","ZAR","ZMW"]).describe("Currency the order was created with, in ISO format.").optional(),
  "date_created": z.string().describe("The date the order was created, in the site's timezone.").optional(),
  "date_created_gmt": z.string().describe("The date the order was created, as GMT.").optional(),
  "date_modified": z.string().describe("The date the order was last modified, in the site's timezone.").optional(),
  "date_modified_gmt": z.string().describe("The date the order was last modified, as GMT.").optional(),
  "discount_total": z.string().describe("Total discount amount for the order.").optional(),
  "discount_tax": z.string().describe("Total discount tax amount for the order.").optional(),
  "shipping_total": z.string().describe("Total shipping amount for the order.").optional(),
  "shipping_tax": z.string().describe("Total shipping tax amount for the order.").optional(),
  "cart_tax": z.string().describe("Sum of line item taxes only.").optional(),
  "total": z.string().describe("Grand total.").optional(),
  "total_tax": z.string().describe("Sum of all taxes.").optional(),
  "prices_include_tax": z.boolean().describe("True the prices included tax during checkout.").optional(),
  "customer_id": z.number().int().describe("User ID who owns the order. 0 for guests.").optional(),
  "customer_ip_address": z.string().describe("Customer's IP address.").optional(),
  "customer_user_agent": z.string().describe("User agent of the customer.").optional(),
  "customer_note": z.string().describe("Note left by customer during checkout.").optional(),
  "billing": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `billing` to the tool, first call the tool `expandSchema` with \"/properties/billing\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "shipping": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `shipping` to the tool, first call the tool `expandSchema` with \"/properties/shipping\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "payment_method": z.string().describe("Payment method ID.").optional(),
  "payment_method_title": z.string().describe("Payment method title.").optional(),
  "transaction_id": z.string().describe("Unique transaction ID.").optional(),
  "date_paid": z.string().describe("The date the order was paid, in the site's timezone.").optional(),
  "date_paid_gmt": z.string().describe("The date the order was paid, as GMT.").optional(),
  "date_completed": z.string().describe("The date the order was completed, in the site's timezone.").optional(),
  "date_completed_gmt": z.string().describe("The date the order was completed, as GMT.").optional(),
  "cart_hash": z.string().describe("MD5 hash of cart items to ensure orders are not modified.").optional(),
  "meta_data": z.array(z.object({ "id": z.number().int().describe("Meta ID.").optional(), "key": z.string().describe("Meta key.").optional(), "value": z.object({}).describe("Meta value.").optional(), "display_key": z.string().describe("Meta key for UI display.").optional(), "display_value": z.object({}).describe("Meta value for UI display.").optional() })).describe("Meta data properties.").optional(),
  "line_items": z.array(z.object({ "id": z.number().int().describe("Item ID.").optional(), "name": z.string().describe("Product name.").optional(), "parent_name": z.string().describe("Parent product name if the product is a variation.").optional(), "product_id": z.string().describe("Product ID.").optional(), "variation_id": z.number().int().describe("Variation ID, if applicable.").optional(), "quantity": z.number().int().describe("Quantity ordered.").optional(), "tax_class": z.string().describe("Tax class of product.").optional(), "subtotal": z.string().describe("Line subtotal (before discounts).").optional(), "subtotal_tax": z.string().describe("Line subtotal tax (before discounts).").optional(), "total": z.string().describe("Line total (after discounts).").optional(), "total_tax": z.string().describe("Line total tax (after discounts).").optional(), "taxes": z.array(z.object({ "id": z.number().int().describe("Item ID.").optional(), "rate_code": z.string().describe("Tax rate code.").optional(), "rate_id": z.string().describe("Tax rate ID.").optional(), "label": z.string().describe("Tax rate label.").optional(), "compound": z.boolean().describe("Whether or not this is a compound tax rate.").optional(), "tax_total": z.string().describe("Tax total (not including shipping taxes).").optional(), "shipping_tax_total": z.string().describe("Shipping tax total.").optional(), "meta_data": z.array(z.object({ "id": z.number().int().describe("Meta ID.").optional(), "key": z.string().describe("Meta key.").optional(), "value": z.object({}).describe("Meta value.").optional(), "display_key": z.string().describe("Meta key for UI display.").optional(), "display_value": z.object({}).describe("Meta value for UI display.").optional() })).describe("Meta data properties.").optional() })).describe("Line taxes.").optional(), "meta_data": z.array(z.object({ "id": z.number().int().describe("Meta ID.").optional(), "key": z.string().describe("Meta key.").optional(), "value": z.object({}).describe("Meta value.").optional(), "display_key": z.string().describe("Meta key for UI display.").optional(), "display_value": z.object({}).describe("Meta value for UI display.").optional() })).describe("Meta data properties.").optional(), "sku": z.string().describe("Product SKU.").optional(), "price": z.number().describe("Product price.").optional() })).describe("Line items data.").optional(),
  "tax_lines": z.array(z.object({ "id": z.number().int().describe("Item ID.").optional(), "rate_code": z.string().describe("Tax rate code.").optional(), "rate_id": z.string().describe("Tax rate ID.").optional(), "label": z.string().describe("Tax rate label.").optional(), "compound": z.boolean().describe("Whether or not this is a compound tax rate.").optional(), "tax_total": z.string().describe("Tax total (not including shipping taxes).").optional(), "shipping_tax_total": z.string().describe("Shipping tax total.").optional(), "meta_data": z.array(z.object({ "id": z.number().int().describe("Meta ID.").optional(), "key": z.string().describe("Meta key.").optional(), "value": z.object({}).describe("Meta value.").optional(), "display_key": z.string().describe("Meta key for UI display.").optional(), "display_value": z.object({}).describe("Meta value for UI display.").optional() })).describe("Meta data properties.").optional() })).describe("Tax lines data.").optional(),
  "shipping_lines": z.array(z.any()).describe("Shipping lines data.").optional(),
  "fee_lines": z.array(z.any()).describe("Fee lines data.").optional(),
  "coupon_lines": z.array(z.any()).describe("Fee lines data.").optional(),
  "refunds": z.array(z.any()).describe("List of refunds.").optional(),
  "set_paid": z.boolean().describe("Define if the order is paid. It will set the status to processing and reduce stock items.").optional()
}