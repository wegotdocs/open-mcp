import { z } from "zod"

export const inputParamsSchema = {
  "propertyId": z.number().int(),
  "reference": z.string().regex(new RegExp("^[a-zA-Z0-9][a-zA-Z0-9\\-()]*[a-zA-Z0-9]$")).min(2).max(30),
  "constructYear": z.number().int().nullable().optional(),
  "constructYearMonth": z.string().regex(new RegExp("^[12][0-9]{3}-(?:0[1-9]|1[0-2])$")).nullable().optional(),
  "renovationYear": z.string().nullable().optional(),
  "renovationYearMonth": z.string().regex(new RegExp("^[12][0-9]{3}-(?:0[1-9]|1[0-2])$")).nullable().optional(),
  "bathrooms": z.number().int().nullable().optional(),
  "bedrooms": z.number().int().nullable().optional(),
  "suiteBathrooms": z.number().int().nullable().optional(),
  "toilets": z.number().int().nullable().optional(),
  "floors": z.number().int().nullable().optional(),
  "level": z.number().int().nullable().optional(),
  "mtsBuild": z.number().nullable().optional(),
  "mtsInterior": z.number().nullable().optional(),
  "mtsPlot": z.number().nullable().optional(),
  "mtsTerrace": z.number().nullable().optional(),
  "pax": z.number().int().nullable().optional(),
  "garden": z.enum(["YES","NO","PRIVATE","COMMUNAL"]).nullable().optional(),
  "pool": z.enum(["YES","NO","PRIVATE","COMMUNAL"]).nullable().optional(),
  "garage": z.enum(["YES","NO","PRIVATE","COMMUNAL","CARPORT"]).nullable().optional(),
  "parkingSpaces": z.number().int().nullable().optional(),
  "orientation": z.enum(["N","NE","E","SE","S","SW","W","NW"]).nullable().optional(),
  "community": z.number().nullable().optional(),
  "garbage": z.number().nullable().optional(),
  "ibi": z.number().nullable().optional(),
  "direct": z.boolean().optional(),
  "exclusive": z.boolean().optional(),
  "featured": z.boolean().optional(),
  "hot": z.boolean().optional(),
  "luxury": z.boolean().optional(),
  "newProperty": z.boolean().optional(),
  "special": z.boolean().optional(),
  "customFeatures": z.array(z.enum(["FEAT1","FEAT2","FEAT3","FEAT4","FEAT5","FEAT6"])),
  "type": z.number().int(),
  "city": z.number().int(),
  "area": z.number().int().nullable().optional(),
  "subarea": z.number().int().nullable().optional(),
  "development": z.number().int().nullable().optional(),
  "dateListed": z.string().datetime({ offset: true }).describe("The date must be current or in the past"),
  "dateReview": z.string().datetime({ offset: true }).describe("The date must be current or in the past"),
  "features": z.array(z.string().describe("List of property features codes")).describe("List of property features codes"),
  "tags": z.array(z.string()),
  "rentShortterm": z.boolean().optional(),
  "rentLongterm": z.boolean().optional(),
  "rented": z.boolean().optional(),
  "sale": z.boolean().optional(),
  "sold": z.boolean().optional(),
  "underOffer": z.boolean().optional(),
  "rentalPriceShortterm": z.number().int().nullable().describe("required if rentShortterm is true").optional(),
  "rentalPriceShorttermVisible": z.boolean().optional(),
  "rentalPriceShorttermPeriod": z.enum(["DAY","WEEK","FORTNIGHT","MONTH"]).nullable().describe("required if rentalPriceShortterm is not null").optional(),
  "rentalPriceLongterm": z.number().int().nullable().describe("required if rentLongterm is true").optional(),
  "rentalPriceLongtermVisible": z.boolean().optional(),
  "salePrice": z.number().int().nullable().describe("required if sale is true").optional(),
  "salePriceVisible": z.boolean().optional(),
  "salePricePrevious": z.number().int().nullable().optional(),
  "address": z.string().nullable().optional(),
  "expenses": z.string().nullable().optional(),
  "gpsPoint": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `gpsPoint` to the tool, first call the tool `expandSchema` with \"/properties/gpsPoint\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>GeoJSon geometry</property-description>").optional(),
  "gpsVisible": z.boolean().optional(),
  "internalNotes": z.string().nullable().optional(),
  "saleboard": z.boolean().optional(),
  "keys": z.boolean().optional(),
  "keyStatus": z.enum(["OFFICE","VENDOR","KEYHOLDER","NONE"]).nullable().optional(),
  "keyscode": z.string().nullable().optional(),
  "listedBy": z.array(z.string()).max(2),
  "seller": z.number().int().nullable().optional(),
  "publicAgent": z.number().int().nullable().optional(),
  "postcode": z.string().nullable().optional(),
  "taxes": z.string().nullable().optional(),
  "valuation": z.number().int().nullable().optional(),
  "valuationDate": z.string().date().nullable().optional(),
  "visitingConditions": z.string().nullable().optional(),
  "zone": z.string().nullable().optional(),
  "communitiesAdmin": z.string().nullable().optional(),
  "agreement": z.boolean().optional(),
  "copyTrashBills": z.boolean().optional(),
  "copyRegistrationProperty": z.boolean().optional(),
  "copyRegistrationCompany": z.boolean().optional(),
  "copyIbiBills": z.boolean().optional(),
  "copyNotaSimple": z.boolean().optional(),
  "copyPlans": z.boolean().optional(),
  "copyAttorney": z.boolean().optional(),
  "copyFirstOccupationLicense": z.boolean().optional(),
  "owner": z.string().nullable().optional(),
  "refCatastro": z.string().nullable().optional(),
  "register": z.string().nullable().optional(),
  "legalRepresentative": z.string().nullable().optional(),
  "copyTenSecurity": z.boolean().optional(),
  "rateableValue": z.number().int().nullable().optional(),
  "energyIsInProcess": z.boolean().optional(),
  "energyKwLevel": z.enum(["A","B","C","D","E","F","G"]).nullable().optional(),
  "energyCo2Level": z.enum(["A","B","C","D","E","F","G"]).nullable().optional(),
  "energyKw": z.number().nullable().optional(),
  "energyCo2": z.number().nullable().optional(),
  "energyInfo": z.string().nullable().optional(),
  "touristicCode": z.string().nullable().optional(),
  "commission": z.string().nullable().describe("Comment about sales commission").optional(),
  "commissionPercent": z.number().gte(0).lte(100).nullable().describe("Percentage of the total sales price, e.g. 5%. Mandatory if marked as shared").optional(),
  "commissionNetworkPercent": z.number().gte(0).lte(100).nullable().describe("Percentage of commission to be shared, e.g. 50%. Mandatory if marked as shared").optional(),
  "statusPublish": z.enum(["UNPUBLISH","PUBLISH","OFF_MARKET"]),
  "statusShared": z.enum(["NO_SHARED","SHARED","SHARED_RENT","SHARED_SALES"])
}