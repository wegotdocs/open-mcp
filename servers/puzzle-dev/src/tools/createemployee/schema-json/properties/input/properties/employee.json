{
  "type": "object",
  "required": [
    "firstName",
    "lastName",
    "employmentType",
    "jobTitle",
    "startDate",
    "officeLocationId",
    "payRate",
    "payFrequency",
    "nativeId"
  ],
  "properties": {
    "firstName": {
      "type": "string"
    },
    "lastName": {
      "type": "string"
    },
    "employmentType": {
      "type": "string",
      "enum": [
        "FullTime",
        "PartTime",
        "Contractor"
      ]
    },
    "jobTitle": {
      "type": "string"
    },
    "startDate": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `startDate` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/employee/properties/startDate\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "officeLocationId": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `officeLocationId` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/employee/properties/officeLocationId\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "payRate": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `payRate` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/employee/properties/payRate\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "payFrequency": {
      "type": "string",
      "enum": [
        "Hour",
        "Day",
        "Week",
        "Month",
        "Year",
        "Paycheck"
      ]
    },
    "nativeId": {
      "type": "string"
    },
    "terminationDate": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `terminationDate` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/employee/properties/terminationDate\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    },
    "flsaStatus": {
      "type": "string",
      "enum": [
        "Exempt",
        "SalariedNonexempt",
        "Nonexempt",
        "Owner"
      ]
    },
    "departmentId": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `departmentId` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/employee/properties/departmentId\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>",
      "additionalProperties": true
    }
  }
}