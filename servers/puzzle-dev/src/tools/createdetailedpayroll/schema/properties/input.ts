import { z } from "zod"

export const inputParams = {
  "companyId": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `companyId` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/companyId\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "accountId": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `accountId` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/accountId\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "nativeId": z.string(),
  "payPeriod": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `payPeriod` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/payPeriod\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "withdrawalDate": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `withdrawalDate` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/withdrawalDate\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "checkDate": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `checkDate` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/checkDate\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "companyDebit": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `companyDebit` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/companyDebit\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "transactionAmounts": z.array(z.object({ "amount": z.record(z.any()), "currency": z.record(z.any()) })),
  "netPay": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `netPay` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/netPay\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "reimbursements": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `reimbursements` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/reimbursements\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "employerTaxes": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `employerTaxes` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/employerTaxes\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "employeeTaxes": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `employeeTaxes` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/employeeTaxes\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "employerBenefits": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `employerBenefits` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/employerBenefits\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "employeeBenefitsDeductions": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `employeeBenefitsDeductions` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/employeeBenefitsDeductions\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "deferredPayrollTaxes": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `deferredPayrollTaxes` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/deferredPayrollTaxes\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "payrollFees": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `payrollFees` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/payrollFees\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "isOffCycle": z.boolean(),
  "employeeCompensations": z.array(z.object({ "employeeId": z.record(z.any()), "grossPay": z.object({ "amount": z.record(z.any()), "currency": z.record(z.any()) }), "netPay": z.object({ "amount": z.record(z.any()), "currency": z.record(z.any()) }), "reimbursements": z.object({ "amount": z.record(z.any()), "currency": z.record(z.any()) }), "employeeTaxes": z.object({ "amount": z.record(z.any()), "currency": z.record(z.any()) }), "employerTaxes": z.object({ "amount": z.record(z.any()), "currency": z.record(z.any()) }), "deductions": z.array(z.object({ "name": z.string(), "amount": z.object({ "amount": z.record(z.any()), "currency": z.record(z.any()) }), "isPreTax": z.boolean() })), "benefits": z.array(z.object({ "benefitId": z.record(z.any()), "employeeDeduction": z.object({ "amount": z.record(z.any()), "currency": z.record(z.any()) }), "companyContribution": z.object({ "amount": z.record(z.any()), "currency": z.record(z.any()) }), "isImputed": z.boolean() })), "paymentMethod": z.enum(["Check","DirectDeposit","HistoricalPayment","Correction"]) })),
  "contractorCompensations": z.array(z.object({ "contractorId": z.record(z.any()), "totalAmount": z.object({ "amount": z.record(z.any()), "currency": z.record(z.any()) }), "bonus": z.object({ "amount": z.record(z.any()), "currency": z.record(z.any()) }), "reimbursements": z.object({ "amount": z.record(z.any()), "currency": z.record(z.any()) }), "paymentMethod": z.enum(["Check","DirectDeposit","HistoricalPayment","Correction"]).optional() }))
}