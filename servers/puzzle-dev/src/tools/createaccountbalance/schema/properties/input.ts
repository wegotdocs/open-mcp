import { z } from "zod"

export const inputParams = {
  "companyId": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `companyId` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/companyId\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "accountId": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `accountId` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/accountId\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "balance": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `balance` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/balance\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "availableBalance": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `availableBalance` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/availableBalance\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "timestamp": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `timestamp` to the tool, first call the tool `expandSchema` with \"/properties/input/properties/timestamp\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>")
}