import { z } from "zod"

export const inputParamsSchema = {
  "parent": z.string().describe("Required. The repository in which to create the release config. Must be in the format `projects/*/locations/*/repositories/*`."),
  "releaseConfigId": z.string().describe("Required. The ID to use for the release config, which will become the final component of the release config's resource name.").optional(),
  "codeCompilationConfig": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `codeCompilationConfig` to the tool, first call the tool `expandSchema` with \"/properties/codeCompilationConfig\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Optional. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.</property-description>").optional(),
  "cronSchedule": z.string().describe("Optional. Optional schedule (in cron format) for automatic creation of compilation results.").optional(),
  "gitCommitish": z.string().describe("Required. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`").optional(),
  "name": z.string().describe("Output only. The release config's name.").readonly().optional(),
  "recentScheduledReleaseRecords": z.array(z.object({ "compilationResult": z.string().describe("The name of the created compilation result, if one was successfully created. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.").optional(), "errorStatus": z.object({ "code": z.number().int().describe("The status code, which should be an enum value of google.rpc.Code.").optional(), "details": z.array(z.record(z.any().describe("Properties of the object. Contains field @type with type URL."))).describe("A list of messages that carry the error details. There is a common set of message types for APIs to use.").optional(), "message": z.string().describe("A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.").optional() }).describe("The error status encountered upon this attempt to create the compilation result, if the attempt was unsuccessful.").optional(), "releaseTime": z.string().describe("The timestamp of this release attempt.").optional() }).describe("A record of an attempt to create a compilation result for this release config.")).describe("Output only. Records of the 10 most recent scheduled release attempts, ordered in in descending order of `release_time`. Updated whenever automatic creation of a compilation result is triggered by cron_schedule.").readonly().optional(),
  "releaseCompilationResult": z.string().describe("Optional. The name of the currently released compilation result for this release config. This value is updated when a compilation result is created from this release config, or when this resource is updated by API call (perhaps to roll back to an earlier release). The compilation result must have been created using this release config. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.").optional(),
  "timeZone": z.string().describe("Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC.").optional()
}