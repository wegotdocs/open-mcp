import { z } from "zod"

export const inputParamsSchema = {
  "parent": z.string().describe("Required. The repository in which to create the compilation result. Must be in the format `projects/*/locations/*/repositories/*`."),
  "codeCompilationConfig": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `codeCompilationConfig` to the tool, first call the tool `expandSchema` with \"/properties/codeCompilationConfig\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Immutable. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.</property-description>").optional(),
  "compilationErrors": z.array(z.object({ "actionTarget": z.object({ "database": z.string().describe("The action's database (Google Cloud project ID) .").optional(), "name": z.string().describe("The action's name, within `database` and `schema`.").optional(), "schema": z.string().describe("The action's schema (BigQuery dataset ID), within `database`.").optional() }).describe("Output only. The identifier of the action where this error occurred, if available.").readonly().optional(), "message": z.string().describe("Output only. The error's top level message.").readonly().optional(), "path": z.string().describe("Output only. The path of the file where this error occurred, if available, relative to the project root.").readonly().optional(), "stack": z.string().describe("Output only. The error's full stack trace.").readonly().optional() }).describe("An error encountered when attempting to compile a Dataform project.")).describe("Output only. Errors encountered during project compilation.").readonly().optional(),
  "dataformCoreVersion": z.string().describe("Output only. The version of `@dataform/core` that was used for compilation.").readonly().optional(),
  "gitCommitish": z.string().describe("Immutable. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`").optional(),
  "name": z.string().describe("Output only. The compilation result's name.").readonly().optional(),
  "releaseConfig": z.string().describe("Immutable. The name of the release config to compile. The release config's 'current_compilation_result' field will be updated to this compilation result. Must be in the format `projects/*/locations/*/repositories/*/releaseConfigs/*`.").optional(),
  "resolvedGitCommitSha": z.string().describe("Output only. The fully resolved Git commit SHA of the code that was compiled. Not set for compilation results whose source is a workspace.").readonly().optional(),
  "workspace": z.string().describe("Immutable. The name of the workspace to compile. Must be in the format `projects/*/locations/*/repositories/*/workspaces/*`.").optional()
}