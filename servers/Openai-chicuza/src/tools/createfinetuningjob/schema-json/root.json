{
  "type": "object",
  "properties": {
    "model": {
      "description": "The name of the model to fine-tune. You can select one of the\n[supported models](/docs/guides/fine-tuning#which-models-can-be-fine-tuned).\n",
      "example": "gpt-4o-mini",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "string",
          "enum": [
            "babbage-002",
            "davinci-002",
            "gpt-3.5-turbo",
            "gpt-4o-mini"
          ]
        }
      ],
      "x-oaiTypeLabel": "string"
    },
    "training_file": {
      "description": "The ID of an uploaded file that contains training data.\n\nSee [upload file](/docs/api-reference/files/create) for how to upload a file.\n\nYour dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.\n\nThe contents of the file should differ depending on if the model uses the [chat](/docs/api-reference/fine-tuning/chat-input), [completions](/docs/api-reference/fine-tuning/completions-input) format, or if the fine-tuning method uses the [preference](/docs/api-reference/fine-tuning/preference-input) format.\n\nSee the [fine-tuning guide](/docs/guides/fine-tuning) for more details.\n",
      "type": "string",
      "example": "file-abc123"
    },
    "suffix": {
      "description": "A string of up to 64 characters that will be added to your fine-tuned model name.\n\nFor example, a `suffix` of \"custom-model-name\" would produce a model name like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.\n",
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "default": null,
      "nullable": true
    },
    "validation_file": {
      "description": "The ID of an uploaded file that contains validation data.\n\nIf you provide this file, the data is used to generate validation\nmetrics periodically during fine-tuning. These metrics can be viewed in\nthe fine-tuning results file.\nThe same data should not be present in both train and validation files.\n\nYour dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.\n\nSee the [fine-tuning guide](/docs/guides/fine-tuning) for more details.\n",
      "type": "string",
      "nullable": true,
      "example": "file-abc123"
    },
    "integrations": {
      "type": "array",
      "description": "A list of integrations to enable for your fine-tuning job.",
      "nullable": true,
      "items": {
        "type": "object",
        "required": [
          "type",
          "wandb"
        ],
        "properties": {
          "type": {
            "description": "The type of integration to enable. Currently, only \"wandb\" (Weights and Biases) is supported.\n",
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "wandb"
                ],
                "x-stainless-const": true
              }
            ]
          },
          "wandb": {
            "type": "object",
            "description": "The settings for your integration with Weights and Biases. This payload specifies the project that\nmetrics will be sent to. Optionally, you can set an explicit display name for your run, add tags\nto your run, and set a default entity (team, username, etc) to be associated with your run.\n",
            "required": [
              "project"
            ],
            "properties": {
              "project": {
                "description": "The name of the project that the new run will be created under.\n",
                "type": "string",
                "example": "my-wandb-project"
              },
              "name": {
                "description": "A display name to set for the run. If not set, we will use the Job ID as the name.\n",
                "nullable": true,
                "type": "string"
              },
              "entity": {
                "description": "The entity to use for the run. This allows you to set the team or username of the WandB user that you would\nlike associated with the run. If not set, the default entity for the registered WandB API key is used.\n",
                "nullable": true,
                "type": "string"
              },
              "tags": {
                "description": "A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some\ndefault tags are generated by OpenAI: \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\".\n",
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "custom-tag"
                }
              }
            }
          }
        }
      }
    },
    "seed": {
      "description": "The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases.\nIf a seed is not specified, one will be generated for you.\n",
      "type": "integer",
      "nullable": true,
      "minimum": 0,
      "maximum": 2147483647,
      "example": 42
    },
    "method": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `method` to the tool, first call the tool `expandSchema` with \"/properties/method\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The method used for fine-tuning.</property-description>",
      "additionalProperties": true
    },
    "metadata": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `metadata` to the tool, first call the tool `expandSchema` with \"/properties/metadata\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n</property-description>",
      "additionalProperties": true
    }
  },
  "required": [
    "model",
    "training_file"
  ]
}