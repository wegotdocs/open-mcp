import { z } from "zod"

export const inputParamsSchema = {
  "modalities": z.any().describe("The set of modalities the model can respond with. To disable audio,\nset this to [\"text\"].\n").optional(),
  "model": z.enum(["gpt-4o-realtime-preview","gpt-4o-realtime-preview-2024-10-01","gpt-4o-realtime-preview-2024-12-17","gpt-4o-mini-realtime-preview","gpt-4o-mini-realtime-preview-2024-12-17"]).describe("The Realtime model used for this session.\n").optional(),
  "instructions": z.string().describe("The default system instructions (i.e. system message) prepended to model  calls. This field allows the client to guide the model on desired  responses. The model can be instructed on response content and format,  (e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of good  responses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion  into your voice\", \"laugh frequently\"). The instructions are not guaranteed  to be followed by the model, but they provide guidance to the model on the desired behavior.\n\nNote that the server sets default instructions which will be used if this  field is not set and are visible in the `session.created` event at the  start of the session.\n").optional(),
  "voice": z.union([z.string(), z.enum(["alloy","ash","ballad","coral","echo","fable","onyx","nova","sage","shimmer","verse"])]).describe("The voice the model uses to respond. Voice cannot be changed during the \nsession once the model has responded with audio at least once. Current \nvoice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`,\n`onyx`, `nova`, `sage`, `shimmer`, and `verse`.\n").optional(),
  "input_audio_format": z.enum(["pcm16","g711_ulaw","g711_alaw"]).describe("The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, \nsingle channel (mono), and little-endian byte order.\n").optional(),
  "output_audio_format": z.enum(["pcm16","g711_ulaw","g711_alaw"]).describe("The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, output audio is sampled at a rate of 24kHz.\n").optional(),
  "input_audio_transcription": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `input_audio_transcription` to the tool, first call the tool `expandSchema` with \"/properties/input_audio_transcription\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Configuration for input audio transcription, defaults to off and can be  set to `null` to turn off once on. Input audio transcription is not native to the model, since the model consumes audio directly. Transcription runs  asynchronously through [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription) and should be treated as guidance of input audio content rather than precisely what the model heard. The client can optionally set the language and prompt for transcription, these offer additional guidance to the transcription service.\n</property-description>").optional(),
  "turn_detection": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `turn_detection` to the tool, first call the tool `expandSchema` with \"/properties/turn_detection\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to `null` to turn off, in which case the client must manually trigger model response.\nServer VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.\nSemantic VAD is more advanced and uses a turn detection model (in conjuction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with \"uhhm\", the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency.\n</property-description>").optional(),
  "input_audio_noise_reduction": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `input_audio_noise_reduction` to the tool, first call the tool `expandSchema` with \"/properties/input_audio_noise_reduction\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Configuration for input audio noise reduction. This can be set to `null` to turn off.\nNoise reduction filters audio added to the input audio buffer before it is sent to VAD and the model.\nFiltering the audio can improve VAD and turn detection accuracy (reducing false positives) and model performance by improving perception of the input audio.\n</property-description>").optional(),
  "tools": z.array(z.object({ "type": z.literal("function").describe("The type of the tool, i.e. `function`.").optional(), "name": z.string().describe("The name of the function.").optional(), "description": z.string().describe("The description of the function, including guidance on when and how \nto call it, and guidance about what to tell the user when calling \n(if anything).\n").optional(), "parameters": z.record(z.any()).describe("Parameters of the function in JSON Schema.").optional() })).describe("Tools (functions) available to the model.").optional(),
  "tool_choice": z.string().describe("How the model chooses tools. Options are `auto`, `none`, `required`, or \nspecify a function.\n").optional(),
  "temperature": z.number().describe("Sampling temperature for the model, limited to [0.6, 1.2]. For audio models a temperature of 0.8 is highly recommended for best performance.\n").optional(),
  "max_response_output_tokens": z.number().int().describe("Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n").optional()
}