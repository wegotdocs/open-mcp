{
  "type": "object",
  "properties": {
    "modalities": {
      "description": "The set of modalities the model can respond with. To disable audio,\nset this to [\"text\"].\n",
      "items": {
        "type": "string",
        "default": [
          "text",
          "audio"
        ],
        "enum": [
          "text",
          "audio"
        ]
      }
    },
    "input_audio_format": {
      "type": "string",
      "default": "pcm16",
      "enum": [
        "pcm16",
        "g711_ulaw",
        "g711_alaw"
      ],
      "description": "The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, \nsingle channel (mono), and little-endian byte order.\n"
    },
    "input_audio_transcription": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `input_audio_transcription` to the tool, first call the tool `expandSchema` with \"/properties/input_audio_transcription\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Configuration for input audio transcription. The client can optionally set the language and prompt for transcription, these offer additional guidance to the transcription service.\n</property-description>",
      "additionalProperties": true
    },
    "turn_detection": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `turn_detection` to the tool, first call the tool `expandSchema` with \"/properties/turn_detection\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to `null` to turn off, in which case the client must manually trigger model response.\nServer VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.\nSemantic VAD is more advanced and uses a turn detection model (in conjuction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with \"uhhm\", the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency.\n</property-description>",
      "additionalProperties": true
    },
    "input_audio_noise_reduction": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `input_audio_noise_reduction` to the tool, first call the tool `expandSchema` with \"/properties/input_audio_noise_reduction\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Configuration for input audio noise reduction. This can be set to `null` to turn off.\nNoise reduction filters audio added to the input audio buffer before it is sent to VAD and the model.\nFiltering the audio can improve VAD and turn detection accuracy (reducing false positives) and model performance by improving perception of the input audio.\n</property-description>",
      "additionalProperties": true
    },
    "include": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "The set of items to include in the transcription. Current available items are:\n- `item.input_audio_transcription.logprobs`\n"
    }
  },
  "required": []
}