{
  "type": "object",
  "description": "Options to create a new thread. If no thread is provided when running a \nrequest, an empty thread will be created.\n",
  "additionalProperties": false,
  "properties": {
    "messages": {
      "description": "A list of [messages](/docs/api-reference/messages) to start the thread with.",
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "user",
              "assistant"
            ],
            "description": "The role of the entity that is creating the message. Allowed values include:\n- `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.\n- `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.\n"
          },
          "content": {
            "x-oaiExpandable": true,
            "anyOf": [
              {
                "type": "string",
                "description": "The text contents of the message.",
                "title": "Text content"
              }
            ]
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "file_id": {
                  "type": "string",
                  "description": "The ID of the file to attach to the message."
                },
                "tools": {
                  "description": "The tools to add this file to.",
                  "type": "array",
                  "items": {
                    "x-oaiExpandable": true,
                    "anyOf": [
                      {
                        "type": "object",
                        "title": "Code interpreter tool",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of tool being defined: `code_interpreter`",
                            "enum": [
                              "code_interpreter"
                            ],
                            "x-stainless-const": true
                          }
                        },
                        "required": [
                          "type"
                        ]
                      }
                    ]
                  }
                }
              }
            },
            "description": "A list of files attached to the message, and the tools they should be added to.",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
            "additionalProperties": {
              "type": "string"
            },
            "x-oaiTypeLabel": "map",
            "nullable": true
          }
        }
      }
    },
    "tool_resources": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `tool_resources` to the tool, first call the tool `expandSchema` with \"/properties/thread/properties/tool_resources\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n</property-description>",
      "additionalProperties": true
    },
    "metadata": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `metadata` to the tool, first call the tool `expandSchema` with \"/properties/thread/properties/metadata\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n</property-description>",
      "additionalProperties": true
    }
  }
}