import { z } from "zod"

export const inputParamsSchema = {
  "cost": z.number().describe("Cost per click (in US $; exact match)").optional(),
  "cost_from": z.number().describe("Cost per click (in US $; exact match) from").optional(),
  "cost_to": z.number().describe("Cost per click (in US $; exact match) to").optional(),
  "position": z.number().int().gte(1).lte(100).describe("Keyword position (any whole number in the range of 1-100)").optional(),
  "position_from": z.number().int().gte(1).lte(100).describe("Keyword position from (any whole number in the range of 1-100)").optional(),
  "position_to": z.number().int().gte(1).lte(100).describe("Keyword position to (any whole number in the range of 1-100)").optional(),
  "concurrency": z.number().int().gte(1).lte(100).describe("Competition (how hard it is to promote a keyword to the top, from 1-100)").optional(),
  "concurrency_from": z.number().int().gte(1).lte(100).describe("Competition (from, how hard it is to promote a keyword to the top, from 1-100)").optional(),
  "concurrency_to": z.number().int().gte(1).lte(100).describe("Competition (to, how hard it is to promote a keyword to the top, from 1-100)").optional(),
  "keyword_length": z.number().int().describe("Number of words in the keyword").optional(),
  "difficulty": z.number().describe("The difficulty of the keyword").optional(),
  "difficulty_from": z.number().describe("The difficulty of the keyword from").optional(),
  "difficulty_to": z.number().describe("The difficulty of the keyword to").optional(),
  "traff": z.number().int().describe("Traffic by the keyword").optional(),
  "region_queries_count": z.number().int().describe("Volume of the keyword by the selected region").optional(),
  "region_queries_count_from": z.number().int().describe("Volume of the keyword by the selected region from").optional(),
  "region_queries_count_to": z.number().int().describe("Volume of the keyword by the selected region to").optional(),
  "region_queries_count_wide": z.number().int().describe("Volume of the keyword in broad match").optional(),
  "region_queries_count_wide_from": z.number().int().describe("Volume of the keyword in broad match from").optional(),
  "region_queries_count_wide_to": z.number().int().describe("Volume of the keyword in broad match to").optional(),
  "url_contains": z.string().url().describe("Exact website pages ranking for the keywords").optional(),
  "right_spelling": z.boolean().describe("Display or not display misspelled keywords").optional(),
  "keyword_contain": z.string().describe("Contains all keywords (exact matching)").optional(),
  "keyword_not_contain": z.string().describe("Does not contain all keywords (exact matching)").optional(),
  "keyword_contain_one_of": z.string().describe("Contains one of the keywords (exact matching)").optional(),
  "keyword_not_contain_one_of": z.string().describe("Does not contain one of the keywords (exact matching)").optional(),
  "keyword_contain_broad_match": z.string().describe("Contains all keywords (broad match)").optional(),
  "keyword_not_contain_broad_match": z.string().describe("Does not contain all keywords (broad match)").optional(),
  "keyword_contain_one_of_broad_match": z.string().describe("Contains one of the keywords (broad match)").optional(),
  "keyword_not_contain_one_of_broad_match": z.string().describe("Does not contain one of the keywords (broad match)").optional(),
  "intents_contain": z.array(z.enum(["informational","navigational","commercial","transactional"])).describe("Contains one or several of intents").optional(),
  "intents_not_contain": z.array(z.enum(["informational","navigational","commercial","transactional"])).describe("Does not contain one of the intents").optional()
}