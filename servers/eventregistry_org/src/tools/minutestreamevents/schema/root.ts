import { z } from "zod"

export const inputParamsSchema = {
  "apiKey": z.string().describe("Your API key"),
  "recentActivityEventsMaxEventCount": z.number().int().lte(2000).describe("The maximum number of events to return. Maximum value specified can be 2.000. The number of used tokens will correspond to the number of returned events. For 200 returned events, for example, 4*5 tokens will be used - 5 tokens for each 50 events.\n").optional(),
  "recentActivityEventsUpdatesAfterMinsAgo": z.number().int().describe("The parameter can be used to retrieve not only the last minute of events, but more minutes. When using some filtering parameters below you use can use this parameter to call `minuteStreamEvents` endpoint only every few minutes and still retrieve all added content matching your filters. The value should be at most 240 (4 hours).\n").optional(),
  "recentActivityEventsUpdatesAfterTm": z.string().describe("The parameter can be used to retrieve events that were updated after the specified time. The value should be in format `YYYY-MM-DDTHH:MM:SS` and should represent datetime in UTC timezone. The value should be at most 4 hours in the past.\n").optional(),
  "keyword": z.array(z.string()).describe("Find events in which news articles mention the specified keyword or a phrase. If you specify multiple `keyword` parameters, then only events with articles that mention all of them will be returned, unless you specify `keywordOper` parameter and set it to 'or'.").optional(),
  "conceptUri": z.array(z.string()).describe("Find events for which the concept with concept uri is important. You can specify up to 50 concepts in a single search. If multiple `conceptUri` parameters are provided, then only events that are about all specified concepts will be returned, unless you specify `conceptOper` parameter and set it to 'or'. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggConcepts) to get concept URI value for a specified concept label.").optional(),
  "categoryUri": z.array(z.string()).describe("Find events that are about a particular category. You can specify up to 20 categories in a single search. If multiple `categoryUri` parameters are provided, then events that are about any of the specified categories will be returned, unless you specify `categoryOper` parameter and set it to 'and'. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggCategories) to get value for a specified category name.").optional(),
  "sourceUri": z.array(z.string()).describe("Find events that contain one or more articles that have been written by a specific news source. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggSources) to get value for a source name.").optional(),
  "sourceLocationUri": z.array(z.string()).describe("Find events that contain one or more articles by news sources located at the given geographic location (city or a country). Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggLocations) to get value for a location name.").optional(),
  "sourceGroupUri": z.array(z.string()).describe("Find events that contain one or more articles by news sources that are assigned to the predefined group of news sources. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggSourceGroups) to get value for a source group or find the uri.").optional(),
  "authorUri": z.array(z.string()).describe("Find events that contain articles that were written by a particular author. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggAuthors) to get value for author uri based on the author name (and potentially source url).").optional(),
  "locationUri": z.array(z.string()).describe("Find events that occurred at a particular geographic location. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggLocations) to get URI value for a given location name.").optional(),
  "keywordLoc": z.enum(["body","title","body,title"]).describe("What data should be used when searching using the keywords provided by `keywords` parameter.").optional(),
  "keywordOper": z.enum(["and","or"]).describe("If more keywords are provided with the `keyword` parameter, what should be the Boolean operator used. If 'and' (default) then all of the specified keywords have to be present in the article about an event; if 'or' then an event will be returned if it's articles mentions any of the provided keywords.").optional(),
  "conceptOper": z.enum(["and","or"]).describe("If more concepts are provided with the `conceptUri` parameter, what should be the Boolean operator used. If 'and' (default) then all of the specified concepts have to be present in the event; if 'or' then an event will be returned if it mentions any of the provided concepts.").optional(),
  "categoryOper": z.enum(["and","or"]).describe("If more categories are provided with the `categoryUri` parameter, what should be the Boolean operator used. If 'and' then all of the specified categories have to be present in the event; if 'or' then an event will be returned if it mentions any of the provided categories.").optional(),
  "lang": z.array(z.enum(["eng","spa","deu","zho","slv","cat","por","ita","fra","rus","ara","tur","hrv","srp","ind","ces","slk","pol","eus","hun","nld","swe","fin","dan","ell","ron","bul","ukr","fas","hin","urd"])).describe("Find events that contain articles in the specified language(s).").optional(),
  "minArticlesInEvent": z.number().int().describe("Find events that have been reported in at least `minArticlesInEvent` articles (regardless of language).").optional(),
  "maxArticlesInEvent": z.number().int().describe("Find events that have not been reported in more than `maxArticlesInEvent` articles (regardless of language)").optional()
}