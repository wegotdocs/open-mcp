import { z } from "zod"

export const inputParamsSchema = {
  "apiKey": z.string().describe("Your API key"),
  "uri": z.string().describe("URI of the topic page for which you wish to retrieve matching articles. Obtain the URI from the URL on the [monitoring page](https://eventregistry.org/monitoring) when the topic page is opened."),
  "resultType": z.enum(["articles","uriWgtList","langAggr","timeAggr","sourceAggr","sourceExAggr","authorAggr","keywordAggr","locAggr","conceptAggr","conceptGraph","categoryAggr","dateMentionAggr","sentimentAggr"]).describe("Define what kind of results of the search you would like to get.").optional(),
  "maxDaysBack": z.number().int().describe("The returned articles should not be older than this number of days. If the value is not specified, then the value set in the topic definition will be used.").optional(),
  "onlyAfterTm": z.string().describe("Only include in the results articles that were found after the specified date-time. The parameter should be in the format `YYYY-MM-DDTHH:MM:SS`, where the value should be in the UTC timezone. The value is very handy if you want to repeatedly call the API endpoint and make sure that you don't receive the same articles multiple times.").optional(),
  "articlesPage": z.number().int().describe("Determines the page of the results to return (starting from 1). Relevant when `resultType = articles`.").optional(),
  "articlesCount": z.number().int().describe("Define how many articles (up to 100) will be returned. Relevant when `resultType = articles`.").optional(),
  "articlesSortBy": z.enum(["date","rel","sourceImportance","sourceAlexaGlobalRank","sourceAlexaCountryRank","socialScore","facebookShares"]).describe("Choose the criteria for sorting the news articles. `rel` (relevance to the query), `date` (publishing date), `sourceImportance` (manually curated score of source importance - high value, high importance), `sourceImportanceRank` (reverse of sourceImportance), `sourceAlexaGlobalRank` (global rank of the news source), `sourceAlexaCountryRank` (country rank of the news source), `socialScore` (total shares on social media), `facebookShares` (shares on Facebook only). Relevant when `resultType = articles`.").optional(),
  "articlesSortByAsc": z.boolean().describe("Should the results be ordered in ascending order or descending order (default). Relevant when `resultType = articles`.").optional(),
  "dataType": z.array(z.string()).describe("What data types should we search? news content (default, `news`), press releases (`pr`) or blogs (`blog`).").optional(),
  "articleBodyLen": z.number().int().describe("Set the size of the article body that'll be returned in the response. Use -1 for full article body.").optional(),
  "includeArticleTitle": z.boolean().describe("Set this parameter to true to include the article title in the response.").optional(),
  "includeArticleBasicInfo": z.boolean().describe("Set this parameter to true to include the core article information in the response.").optional(),
  "includeArticleBody": z.boolean().describe("Set this parameter to true to include the article body in the response.").optional(),
  "includeArticleEventUri": z.boolean().describe("Set this parameter to true to include the uri of the event (to which the article belongs) in the response.").optional(),
  "includeArticleSocialScore": z.boolean().describe("Set this parameter to true to include the information about how many times the article was shared on different social media.").optional(),
  "includeArticleSentiment": z.boolean().describe("Set this parameter to true to include the article sentiment in the response (value will be non-null only for English articles).").optional(),
  "includeArticleConcepts": z.boolean().describe("Set this parameter to true to include the article concepts in the response.").optional(),
  "includeArticleCategories": z.boolean().describe("Set this parameter to true to include the article categories in the response.").optional(),
  "includeArticleLocation": z.boolean().describe("Set this parameter to true to include the article location in the response.").optional(),
  "includeArticleImage": z.boolean().describe("Set this parameter to true to include the article image in the response.").optional(),
  "includeArticleVideos": z.boolean().describe("Set this parameter to true to include the article videos in the response.").optional(),
  "includeArticleLinks": z.boolean().describe("Set this parameter to true to include the article links in the response.").optional(),
  "includeArticleExtractedDates": z.boolean().describe("Set this parameter to true to include article extracted dates in the response.").optional(),
  "includeArticleDuplicateList": z.boolean().describe("Set this parameter to true to include the list of duplicate articles in the response.").optional(),
  "includeArticleOriginalArticle": z.boolean().describe("Set this parameter to true to include the original article in the response.").optional(),
  "includeSourceTitle": z.boolean().describe("Set this parameter to true to include the source title in the response.").optional(),
  "includeSourceDescription": z.boolean().describe("Set this parameter to true to include the source description in the response.").optional(),
  "includeSourceLocation": z.boolean().describe("Set this parameter to true to include the source location in the response.").optional(),
  "includeSourceRanking": z.boolean().describe("Set this parameter to true to include the source ranking in the response.").optional(),
  "includeConceptLabel": z.boolean().describe("Set this parameter to true to include the concept label in the response.").optional(),
  "includeConceptImage": z.boolean().describe("Set this parameter to true to include the concept image in the response.").optional(),
  "includeConceptSynonyms": z.boolean().describe("Set this parameter to true to include the concept synonyms in the response.").optional(),
  "includeConceptTrendingScore": z.boolean().describe("Set this parameter to true to include concept trending score in the response.").optional(),
  "conceptLang": z.string().describe("Define the language of the concept label.").optional(),
  "includeCategoryParentUri": z.boolean().describe("Set this parameter to true to include category parent uri in the response.").optional(),
  "includeLocationPopulation": z.boolean().describe("Set to true to include the population size of the location").optional(),
  "includeLocationGeoNamesId": z.boolean().describe("Set to true to include the GeoNames id of the location").optional(),
  "includeLocationCountryArea": z.boolean().describe("Set to true to include the are of the location in squared km.").optional(),
  "includeLocationCountryContinent": z.boolean().describe("Set to true to get the continent of the country for location objects.").optional()
}