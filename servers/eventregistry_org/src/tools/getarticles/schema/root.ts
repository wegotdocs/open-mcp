import { z } from "zod"

export const inputParamsSchema = {
  "apiKey": z.string().describe("Your API key"),
  "resultType": z.enum(["articles","uriWgtList","langAggr","timeAggr","sourceAggr","sourceExAggr","authorAggr","keywordAggr","locAggr","conceptAggr","conceptGraph","categoryAggr","dateMentionAggr","sentimentAggr","recentActivityArticles"]).describe("Define what kind of results of the search you would like to get. Default value: articles.").optional(),
  "articlesPage": z.number().int().describe("Determines the page of the results to return (starting from 1). Relevant when `resultType = articles`.").optional(),
  "articlesCount": z.number().int().describe("Define how many articles (up to 100) will be returned. Relevant when `resultType = articles`.").optional(),
  "articlesSortBy": z.enum(["date","rel","sourceImportance","sourceAlexaGlobalRank","sourceAlexaCountryRank","socialScore","facebookShares"]).describe("Choose the criteria for sorting the news articles. `rel` (relevance to the query), `date` (publishing date), `sourceImportance` (manually curated score of source importance - high value, high importance), `sourceImportanceRank` (reverse of sourceImportance), `sourceAlexaGlobalRank` (global rank of the news source), `sourceAlexaCountryRank` (country rank of the news source), `socialScore` (total shares on social media), `facebookShares` (shares on Facebook only). Relevant when `resultType = articles`.\n").optional(),
  "articlesSortByAsc": z.boolean().describe("Should the results be ordered in ascending order or descending order (default). Relevant when `resultType = articles`.").optional(),
  "articleBodyLen": z.number().int().describe("Set the size of the article body that'll be returned in the response. Use -1 for full article body.").optional(),
  "dataType": z.array(z.string()).describe("What data types should we search? news content (default, `news`), press releases (`pr`) or blogs (`blog`).").optional(),
  "query": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `query` to the tool, first call the tool `expandSchema` with \"/properties/query\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Query object with one or more search conditions. The `query` object should match the [Advanced Query Language](https://github.com/EventRegistry/event-registry-python/wiki/Searching-for-articles#advanced-query-language) format. If you specify the `query` parameter, then the query parameters specified directly (`keyword`, `conceptUri`, `sourceUri`, `categoryUri`, etc) will be ignored.</property-description>").optional(),
  "keyword": z.array(z.string()).describe("Find articles that mention the specified keyword or a phrase. You can specify at most 60 keywords in a single search. If you specify multiple `keyword` parameters, then only articles that mention all of them will be returned, unless you specify `keywordOper` parameter and set it to 'or'.\n").optional(),
  "conceptUri": z.array(z.string()).describe("Find articles that mention the concept with a concept uri. You can specify at most 50 concepts in a single search. If multiple `conceptUri` parameters are provided, then only articles that are about all specified concepts will be returned, unless you specify `conceptOper` parameter and set it to 'or'. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggConcepts) to get concept URI value for a specified concept label.\n").optional(),
  "categoryUri": z.array(z.string()).describe("Find articles that are assigned to a particular category. You can specify at most 20 categories in a single search. If multiple `categoryUri` parameters are provided, then articles that are about any of the specified categories will be returned, unless you specify `categoryOper` parameter and set it to 'and'. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggCategories) to get value for a specified category name.\n").optional(),
  "sourceUri": z.array(z.string()).describe("Find articles that have been published by a news source. If you specify multiple `sourceUri` parameters, then articles from any of the specified sources will be returned. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggSources) to get value for a source name.\n").optional(),
  "sourceLocationUri": z.array(z.string()).describe("Find articles that were published by news sources located at the given geographic location (city or country). If you specify multiple `sourceLocationUri` parameters, then articles from sources from any of the specified sources will be returned. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggLocations) to get value for a location name.\n").optional(),
  "sourceGroupUri": z.array(z.string()).describe("Find articles that were published by news sources that are assigned to some predefined group of news sources. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggSourceGroups) to get value for a source group or find the uri.\n").optional(),
  "authorUri": z.array(z.string()).describe("Find articles that were written by a particular author. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggAuthors) to get value for author uri based on the author name (and potentially source url).").optional(),
  "locationUri": z.array(z.string()).describe("Find articles that describe something that occured at a particular location (based on the location mentioned in the dateline). Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggLocations) to get value for a location name.").optional(),
  "lang": z.array(z.enum(["eng","spa","deu","zho","slv","cat","por","ita","fra","rus","ara","tur","hrv","srp","ind","ces","slk","pol","eus","hun","nld","swe","fin","dan","ell","ron","bul","ukr","fas","hin","urd","vie"])).describe("Find articles in the specific language(s). If not specified, all languages will be included. You can specify at most 5 languages in a single search.").optional(),
  "dateStart": z.string().describe("The starting date on or after the articles of interest were published.").optional(),
  "dateEnd": z.string().describe("The last date on which the articles of interest were published.").optional(),
  "dateMentionStart": z.string().describe("Ignore events (that contain one or more articles) or articles that explicitly mention a date that is equal or greater than `dateMentionStart`.").optional(),
  "dateMentionEnd": z.string().describe("Ignore events (that contain one or more articles) or articles that explicitly mention a date that is lower or equal to `dateMentionEnd`.").optional(),
  "keywordLoc": z.enum(["body","title","body,title"]).describe("What data should be used when searching using the keywords provided by `keywords` parameter.").optional(),
  "keywordOper": z.enum(["and","or"]).describe("If more keywords are provided with the `keyword` parameter, what should be the Boolean operator used. If 'and' (default) then all of the specified keywords have to be present in the article; if 'or' then an article will be returned if it mentions any of the provided keywords.").optional(),
  "conceptOper": z.enum(["and","or"]).describe("If more concepts are provided with the `conceptUri` parameter, what should be the Boolean operator used. If 'and' (default) then all of the specified concepts have to be present in the article; if 'or' then an article will be returned if it mentions any of the provided concepts.").optional(),
  "categoryOper": z.enum(["and","or"]).describe("If more categories are provided with the `categoryUri` parameter, what should be the Boolean operator used. If 'and' then all of the specified categories have to be present in the article; if 'or' then an article will be returned if it mentions any of the provided categories.").optional(),
  "ignoreKeyword": z.array(z.string()).describe("Ignore articles that mention the specified keyword or phrase. You can specify at most 60 keywords in a single search. If you specify multiple `ignoreKeyword` parameters, then articles that mention any of these keywords will be ignored.\n").optional(),
  "ignoreConceptUri": z.array(z.string()).describe("Ignore articles that mention the concept with concept uri. You can specify at most 50 concepts in a single search. If you specify multiple `ignoreConceptUri` parameters then articles that mention any of them will be ignored. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggConcepts) to get value for a specified concept label.\n").optional(),
  "ignoreCategoryUri": z.array(z.string()).describe("Ignore articles that are assigned into a particular category. You can specify at most 20 categories in a single search. If you specify multiple `ignoreCategoryUri` parameters then articles that mention any of them will be ignored. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggCategories) to get value for a specified category name.\n").optional(),
  "ignoreSourceUri": z.array(z.string()).describe("Ignore articles that have been published by a news source. If you specify multiple `ignoreSourceUri` parameters, then articles from any of the specified sources will be ignored. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggSources) to get value for a source name.\n").optional(),
  "ignoreSourceLocationUri": z.array(z.string()).describe("Ignore articles that were published by news sources located at the given geographic location (city or country). If you specify multiple `ignoreSourceLocationUri` parameters, then articles from sources from any of the specified sources will be ignored. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggLocations) to get value for a location name.\n").optional(),
  "ignoreSourceGroupUri": z.array(z.string()).describe("Ignore articles that were published by news sources that are assigned to some predefined group of news sources. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggSourceGroups) to get value for a source group or find the uri.\n").optional(),
  "ignoreLocationUri": z.array(z.string()).describe("Ignore articles that describe something that occured at a particular location (based on the location mentioned in the dateline). Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggLocations) to get value for a location name.").optional(),
  "ignoreAuthorUri": z.array(z.string()).describe("Ignore articles that were written by a particular author. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggAuthors) to get value for author uri based on the author name (and potentially source url).").optional(),
  "ignoreLang": z.array(z.enum(["eng","spa","deu","zho","slv","cat","por","ita","fra","rus","ara","tur","hrv","srp","ind","ces","slk","pol","eus","hun","nld","swe","fin","dan","ell","ron","bul","ukr","fas","hin","urd","vie"])).describe("Ignore articles in the specified language(s). You can specify at most 5 languages in a single search.").optional(),
  "ignoreKeywordLoc": z.enum(["body","title","body,title"]).describe("What data should be used when searching using the keywords provided by `ignoreKeywords` parameter.").optional(),
  "startSourceRankPercentile": z.number().int().describe("starting [ranking percentile of the sources](https://github.com/EventRegistry/event-registry-python/wiki/Source-filtering#filtering-of-sources-based-on-their-ranking) to consider in the results (default: 0). Value should be in range 0-90 and divisible by 10.").optional(),
  "endSourceRankPercentile": z.number().int().describe("ending [ranking percentile of the sources](https://github.com/EventRegistry/event-registry-python/wiki/Source-filtering#filtering-of-sources-based-on-their-ranking) to consider in the results (default: 100). Value should be in range 10-100 and divisible by 10.").optional(),
  "minSentimentArticle": z.number().int().describe("the minimum value of the sentiment, the article should have. Valid value is any floating number between -1 (very negative) to 1 (very positive). 0 represents neutral sentiment. Note that setting the value will automatically reduce results to just English articles, since the sentiment can only be computed for English language.").optional(),
  "maxSentimentArticle": z.number().int().describe("the maximum value of the sentiment, the article should have. Valid value is any floating number between -1 (very negative) to 1 (very positive). 0 represents neutral sentiment. Note that setting the value will automatically reduce results to just English articles, since the sentiment can only be computed for English language.").optional(),
  "isDuplicateFilter": z.enum(["skipDuplicates","keepOnlyDuplicates","keepAll"]).describe("Some articles can be duplicates of other articles. What should be done with them.").optional(),
  "hasDuplicateFilter": z.enum(["skipHasDuplicates","keepOnlyHasDuplicates","keepAll"]).describe("Some articles are later copied by others. What should be done with such articles.").optional(),
  "eventFilter": z.enum(["skipArticlesWithoutEvent","keepOnlyArticlesWithoutEvent","keepAll"]).describe("Some articles describe a known event and some don't. This filter allows you to filter the resulting articles based on this criteria.").optional(),
  "includeArticleTitle": z.boolean().describe("Set this parameter to true to include the article title in the response.").optional(),
  "includeArticleBasicInfo": z.boolean().describe("Set this parameter to true to include the core article information in the response.").optional(),
  "includeArticleBody": z.boolean().describe("Set this parameter to true to include the article body in the response.").optional(),
  "includeArticleEventUri": z.boolean().describe("Set this parameter to true to include the uri of the event (to which the article belongs) in the response.").optional(),
  "includeArticleSocialScore": z.boolean().describe("Set this parameter to true to include the information about how many times the article was shared on different social media.").optional(),
  "includeArticleSentiment": z.boolean().describe("Set this parameter to true to include the article sentiment in the response (value will be non-null only for English articles).").optional(),
  "includeArticleConcepts": z.boolean().describe("Set this parameter to true to include the article concepts in the response.").optional(),
  "includeArticleCategories": z.boolean().describe("Set this parameter to true to include the article categories in the response.").optional(),
  "includeArticleLocation": z.boolean().describe("Set this parameter to true to include the article location in the response.").optional(),
  "includeArticleImage": z.boolean().describe("Set this parameter to true to include the article image in the response.").optional(),
  "includeArticleVideos": z.boolean().describe("Set this parameter to true to include the article videos in the response.").optional(),
  "includeArticleLinks": z.boolean().describe("Set this parameter to true to include the article links in the response.").optional(),
  "includeArticleExtractedDates": z.boolean().describe("Set this parameter to true to include article extracted dates in the response.").optional(),
  "includeArticleDuplicateList": z.boolean().describe("Set this parameter to true to include the list of duplicate articles in the response.").optional(),
  "includeArticleOriginalArticle": z.boolean().describe("Set this parameter to true to include the original article in the response.").optional(),
  "includeSourceTitle": z.boolean().describe("Set this parameter to true to include the source title in the response.").optional(),
  "includeSourceDescription": z.boolean().describe("Set this parameter to true to include the source description in the response.").optional(),
  "includeSourceLocation": z.boolean().describe("Set this parameter to true to include the source location in the response.").optional(),
  "includeSourceRanking": z.boolean().describe("Set this parameter to true to include the source ranking in the response.").optional(),
  "includeConceptLabel": z.boolean().describe("Set this parameter to true to include the concept label in the response.").optional(),
  "includeConceptImage": z.boolean().describe("Set this parameter to true to include the concept image in the response.").optional(),
  "includeConceptSynonyms": z.boolean().describe("Set this parameter to true to include the concept synonyms in the response.").optional(),
  "includeConceptTrendingScore": z.boolean().describe("Set this parameter to true to include concept trending score in the response.").optional(),
  "conceptLang": z.string().describe("Define the language of the concept label.").optional(),
  "includeCategoryParentUri": z.boolean().describe("Set this parameter to true to include category parent uri in the response.").optional(),
  "includeLocationGeoLocation": z.boolean().describe("Set to true to include the geo location (latitude, longitude) for items that are locations").optional(),
  "includeLocationPopulation": z.boolean().describe("Set to true to include the population size of the location").optional(),
  "includeLocationGeoNamesId": z.boolean().describe("Set to true to include the GeoNames id of the location").optional(),
  "includeLocationCountryArea": z.boolean().describe("Set to true to include the are of the location in squared km.").optional(),
  "includeLocationCountryContinent": z.boolean().describe("Set to true to get the continent of the country for location objects.").optional()
}