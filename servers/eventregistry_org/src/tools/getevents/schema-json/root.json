{
  "type": "object",
  "properties": {
    "apiKey": {
      "description": "Your API key",
      "type": "string"
    },
    "resultType": {
      "description": "Define what kind of results you would like to get.",
      "type": "array",
      "items": {
        "default": "events",
        "type": "string",
        "enum": [
          "events",
          "uriWgtList",
          "timeAggr",
          "locAggr",
          "locTimeAggr",
          "sourceAggr",
          "authorAggr",
          "keywordAggr",
          "conceptAggr",
          "conceptGraph",
          "categoryAggr",
          "breakingEvents",
          "eventClusters",
          "sentimentAggr",
          "dateMentionAggr",
          "recentActivityEvents"
        ]
      }
    },
    "eventsPage": {
      "description": "Determines the page of the results to return (starting from 1). Relevant when `resultType = events`.",
      "type": "integer",
      "default": 1,
      "example": null
    },
    "eventsCount": {
      "description": "Define how many events (up to 50) will be returned. Relevant when `resultType = events`.",
      "default": 50,
      "type": "integer"
    },
    "eventsSortBy": {
      "description": "Set how you would like to sort your results. `date` (by event date), `rel` (relevance to the query), `size` (number of articles),\n    `socialScore` (amount of shares in social media). Relevant when `resultType = events`.",
      "default": "date",
      "type": "string",
      "enum": [
        "date",
        "rel",
        "size",
        "socialScore"
      ]
    },
    "eventsSortByAsc": {
      "description": "Should the results be ordered in ascending order or descending order (default) based on the sorting criteria. Relevant when `resultType = events`.",
      "default": "false",
      "type": "boolean"
    },
    "query": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `query` to the tool, first call the tool `expandSchema` with \"/properties/query\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Query object with one or more search conditions. The `query` object should match the [Advanced Query Language](https://github.com/EventRegistry/event-registry-python/wiki/Searching-for-events#advanced-query-language) format. If you specify the `query` parameter, then the query parameters specified directly (`keyword`, `conceptUri`, `sourceUri`, `categoryUri`, etc) will be ignored.</property-description>",
      "additionalProperties": true
    },
    "keyword": {
      "description": "Find events in which news articles mention the specified keyword or a phrase. If you specify multiple `keyword` parameters, then only events with articles that mention all of them will be returned, unless you specify `keywordOper` parameter and set it to 'or'.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "conceptUri": {
      "description": "Find events for which the concept with concept uri is important. You can specify up to 50 concepts in a single search. If multiple `conceptUri` parameters are provided, then only events that are about all specified concepts will be returned, unless you specify `conceptOper` parameter and set it to 'or'. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggConcepts) to get concept URI value for a specified concept label.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "categoryUri": {
      "description": "Find events that are about a particular category. You can specify up to 20 categories in a single search. If multiple `categoryUri` parameters are provided, then events that are about any of the specified categories will be returned, unless you specify `categoryOper` parameter and set it to 'and'. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggCategories) to get value for a specified category name.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "sourceUri": {
      "description": "Find events that contain one or more articles that have been written by a specific news source. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggSources) to get value for a source name.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "sourceLocationUri": {
      "description": "Find events that contain one or more articles by news sources located at the given geographic location (city or a country). Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggLocations) to get value for a location name.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "sourceGroupUri": {
      "description": "Find events that contain one or more articles by news sources that are assigned to the predefined group of news sources. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggSourceGroups) to get value for a source group or find the uri.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "authorUri": {
      "description": "Find events that contain articles that were written by a particular author. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggAuthors) to get value for author uri based on the author name (and potentially source url).",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "locationUri": {
      "description": "Find events that occurred at a particular geographic location. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggLocations) to get URI value for a given location name.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "lang": {
      "description": "Find events that contain articles in the specified language(s).",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "eng",
          "spa",
          "deu",
          "zho",
          "slv",
          "cat",
          "por",
          "ita",
          "fra",
          "rus",
          "ara",
          "tur",
          "hrv",
          "srp",
          "ind",
          "ces",
          "slk",
          "pol",
          "eus",
          "hun",
          "nld",
          "swe",
          "fin",
          "dan",
          "ell",
          "ron",
          "bul",
          "ukr",
          "fas",
          "hin",
          "urd"
        ]
      }
    },
    "dateStart": {
      "description": "Limit the events to those that occured on or after this date. The date of the event is extracted from the news articles about the event and are potentially quite different than the dates when the articles about the event were published.",
      "type": "string"
    },
    "dateEnd": {
      "description": "Limit the events to those that occured before or on this date. The date of the event is extracted from the news articles about the event and are potentially quite different than the dates when the articles about the event were published.",
      "type": "string"
    },
    "minSentimentEvent": {
      "description": "the minimum value of the sentiment, the event should have. Valid value is any floating number between -1 (very negative) to 1 (very positive). 0 represents neutral sentiment. Note that setting the value will automatically reduce results to events covered in English, since the sentiment can only be computed for English language.",
      "type": "integer"
    },
    "maxSentimentEvent": {
      "description": "the maximum value of the sentiment, the event should have. Valid value is any floating number between -1 (very negative) to 1 (very positive). 0 represents neutral sentiment. Note that setting the value will automatically reduce results to events covered in English, since the sentiment can only be computed for English language.",
      "type": "integer"
    },
    "minArticlesInEvent": {
      "description": "Find events that have been reported in at least `minArticlesInEvent` articles (regardless of language).",
      "type": "integer"
    },
    "maxArticlesInEvent": {
      "description": "Find events that have not been reported in more than `maxArticlesInEvent` articles (regardless of language)",
      "type": "integer"
    },
    "reportingDateStart": {
      "description": "Limit the events to those for which the reporting date was on or after this date. The reporting date is computed by analyzing all the dates when the articles about an event were published and computing the average value.",
      "type": "string"
    },
    "reportingDateEnd": {
      "description": "Limit the events to those for which the reporting date was before or on this date. The reporting date is computed by analyzing all the dates when the articles about an event were published and computing the average value.",
      "type": "string"
    },
    "dateMentionStart": {
      "description": "Ignore events (that contain one or more articles) or articles that explicitly mention a date that is equal or greater than `dateMentionStart`.",
      "type": "string"
    },
    "dateMentionEnd": {
      "description": "Ignore events (that contain one or more articles) or articles that explicitly mention a date that is lower or equal to `dateMentionEnd`.",
      "type": "string"
    },
    "keywordLoc": {
      "description": "What data should be used when searching using the keywords provided by `keywords` parameter.",
      "type": "string",
      "default": "body",
      "enum": [
        "body",
        "title",
        "body,title"
      ]
    },
    "keywordOper": {
      "description": "If more keywords are provided with the `keyword` parameter, what should be the Boolean operator used. If 'and' (default) then all of the specified keywords have to be present in the article about an event; if 'or' then an event will be returned if it's articles mentions any of the provided keywords.",
      "type": "string",
      "default": "and",
      "enum": [
        "and",
        "or"
      ]
    },
    "conceptOper": {
      "description": "If more concepts are provided with the `conceptUri` parameter, what should be the Boolean operator used. If 'and' (default) then all of the specified concepts have to be present in the event; if 'or' then an event will be returned if it mentions any of the provided concepts.",
      "type": "string",
      "default": "and",
      "enum": [
        "and",
        "or"
      ]
    },
    "categoryOper": {
      "description": "If more categories are provided with the `categoryUri` parameter, what should be the Boolean operator used. If 'and' then all of the specified categories have to be present in the event; if 'or' then an event will be returned if it mentions any of the provided categories.",
      "type": "string",
      "default": "or",
      "enum": [
        "and",
        "or"
      ]
    },
    "ignoreKeyword": {
      "description": "Ignore events in which news articles mention the specified keyword or phrase. If you specify multiple `ignoreKeyword` parameters, then events with articles that mention any of these keywords will be ignored.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "ignoreConceptUri": {
      "description": "Ignore events for which the concept with concept uri is important. You can specify up to 50 concepts in a single search. If you specify multiple `ignoreConceptUri` parameters, then events that mention any of them will be ignored. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggConcepts) to get value for a specified concept label.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "ignoreCategoryUri": {
      "description": "Ignore events that are about a particular category. You can specify up to 20 categories in a single search. If you specify multiple `ignoreCategoryUri` parameters, then events that mention any of them will be ignored. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggCategories) to get value for a specified category name.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "ignoreSourceUri": {
      "description": "Ignore events that contain one or more articles that have been written by a news source. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggSources) to get value for a source name.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "ignoreSourceLocationUri": {
      "description": "Ignore events that contain one or more articles by news sources located at the given geographic location (city or a country). Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggLocations) to get value for a location name.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "ignoreSourceGroupUri": {
      "description": "Ignore events that contain one or more articles by news sources that are assigned to the specified group of news sources. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggSourceGroups) to get value for a source group or find the uri.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "ignoreAuthorUri": {
      "description": "Ignore events that contain articles, which were written by a particular author. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggAuthors) to get value for author uri based on the author name (and potentially source url).",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "ignoreLocationUri": {
      "description": "Ignore events that occurred at a particular geographic location. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggLocations) to get URI value for a given location name.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "ignoreLang": {
      "description": "Ignore events that contain articles in the specified language(s).",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "eng",
          "spa",
          "deu",
          "zho",
          "slv",
          "cat",
          "por",
          "ita",
          "fra",
          "rus",
          "ara",
          "tur",
          "hrv",
          "srp",
          "ind",
          "ces",
          "slk",
          "pol",
          "eus",
          "hun",
          "nld",
          "swe",
          "fin",
          "dan",
          "ell",
          "ron",
          "bul",
          "ukr",
          "fas",
          "hin",
          "urd"
        ]
      }
    },
    "ignoreKeywordLoc": {
      "description": "What data should be used when searching using the keywords provided by `ignoreKeywords` parameter.",
      "type": "string",
      "enum": [
        "body",
        "title",
        "body,title"
      ]
    },
    "includeEventTitle": {
      "description": "Set this parameter to true to include the event title in the response.",
      "type": "boolean",
      "default": "true"
    },
    "includeEventSummary": {
      "description": "Set this parameter to true to include the event summary in the response.",
      "type": "boolean",
      "default": "false"
    },
    "includeEventSocialScore": {
      "description": "Set this parameter to true to include the event social score in the response.",
      "type": "boolean",
      "default": "false"
    },
    "includeEventSentiment": {
      "description": "Set this parameter to true to include the event sentiment in the response.",
      "type": "boolean",
      "default": "true"
    },
    "includeEventLocation": {
      "description": "Set this parameter to true to include the event location in the response.",
      "type": "boolean",
      "default": "true"
    },
    "includeEventDate": {
      "description": "Set this parameter to true to include the event date in the response.",
      "type": "boolean",
      "default": "true"
    },
    "includeEventArticleCounts": {
      "description": "Set this parameter to true to include the article counts for events in the response.",
      "type": "boolean",
      "default": "true"
    },
    "includeEventConcepts": {
      "description": "Set this parameter to true to include the event concepts in the response.",
      "type": "boolean",
      "default": "true"
    },
    "includeEventCategories": {
      "description": "Set this parameter to true to include the event categories in the response.",
      "type": "boolean",
      "default": "true"
    },
    "includeEventCommonDates": {
      "description": "Set this parameter to true to include the event commmon dates in the response.",
      "type": "boolean",
      "default": "false"
    },
    "includeEventStories": {
      "description": "Set this parameter to true to include the event stories in the response.",
      "type": "boolean",
      "default": "false"
    },
    "eventImageCount": {
      "description": "Define how many images you would like to have in the response.",
      "type": "integer",
      "default": "0"
    },
    "includeConceptLabel": {
      "description": "Set this parameter to true to include the concept label in the response.",
      "type": "boolean",
      "default": "true"
    },
    "includeConceptImage": {
      "description": "Set this parameter to true to include the concept image in the response.",
      "type": "boolean",
      "default": "false"
    },
    "includeConceptSynonyms": {
      "description": "Set this parameter to true to include the concept synonyms in the response.",
      "type": "boolean",
      "default": "false"
    },
    "conceptLang": {
      "description": "Define the language of the concept label.",
      "type": "string",
      "default": "eng"
    },
    "includeStoryBasicStats": {
      "description": "Set this parameter to true to include story basic stats in the response.",
      "type": "boolean",
      "default": "false"
    },
    "includeStoryTitle": {
      "description": "Set this parameter to true to include the story title in the response.",
      "type": "boolean",
      "default": "false"
    },
    "includeStoryLocation": {
      "description": "Set this parameter to true to include the story location in the response.",
      "type": "boolean",
      "default": "false"
    },
    "includeStoryDate": {
      "description": "Set this parameter to true to include the story date in the response.",
      "type": "boolean",
      "default": "false"
    },
    "includeStoryConcepts": {
      "description": "Set this parameter to true to include the story concepts in the response.",
      "type": "boolean",
      "default": "false"
    },
    "includeStoryCategories": {
      "description": "Set this parameter to true to include the story categories in the response.",
      "type": "boolean",
      "default": "false"
    },
    "includeStoryMedoidArticle": {
      "description": "Set this parameter to true to include story medoid article in the response.",
      "type": "boolean",
      "default": "false"
    },
    "includeStoryCommonDates": {
      "description": "Set this parameter to true to include story common dates in the response.",
      "type": "boolean",
      "default": "false"
    },
    "storyImageCount": {
      "description": "Define how many images you would like to have in the response.",
      "type": "integer",
      "default": "false"
    },
    "includeCategoryParentUri": {
      "description": "Set this parameter to true to include category parent uri in the response.",
      "type": "boolean",
      "default": "false"
    },
    "includeLocationPopulation": {
      "description": "Set to true to include the population size of the location",
      "type": "boolean",
      "default": "false"
    },
    "includeLocationGeoNamesId": {
      "description": "Set to true to include the GeoNames id of the location",
      "type": "boolean",
      "default": "false"
    },
    "includeLocationCountryArea": {
      "description": "Set to true to include the are of the location in squared km.",
      "type": "boolean",
      "default": "false"
    },
    "includeLocationCountryContinent": {
      "description": "Set to true to get the continent of the country for location objects.",
      "type": "boolean",
      "default": "false"
    }
  },
  "required": [
    "apiKey"
  ]
}