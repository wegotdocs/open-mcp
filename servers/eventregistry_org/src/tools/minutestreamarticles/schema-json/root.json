{
  "type": "object",
  "properties": {
    "apiKey": {
      "description": "Your API key",
      "type": "string"
    },
    "recentActivityArticlesMaxArticleCount": {
      "description": "The maximum number of articles to return. Maximum value specified can be 2.000. The number of used tokens will correspond to the number of returned articles (for 300 returned articles, 3 tokens will be used, etc.).\n",
      "type": "integer",
      "default": 100,
      "maximum": 2000
    },
    "recentActivityArticles*UpdatesAfterUri": {
      "description": "The actual names of the parameters should be `recentActivityArticlesNewsUpdatesAfterUri`, `recentActivityArticlesBlogUpdatesAfterUri` and `recentActivityArticlesPrUpdatesAfterUri`, depending on which `dataType` parameters\nyou require. Specifying the parameter(s) will only return articles that were added since the articles with the provided URI were added. If you are repeatedly calling the endpoint, using this parameter is the best way to ensure\nthat all matching content is retrieved.\n",
      "type": "string"
    },
    "recentActivityArticlesUpdatesAfterMinsAgo": {
      "description": "The parameter can be used to retrieve not only the last minute of articles, but more minutes. When using some filtering parameters\nbelow you use can use this parameter to call `minuteStreamArticles` endpoint only every few minutes and still retrieve all added\ncontent matching your filters. The value should be at most 240 (4 hours).\n",
      "type": "integer"
    },
    "recentActivityArticlesUpdatesAfterTm": {
      "description": "The parameter can be used to retrieve articles that were collected after the specified time. The value should be in format `YYYY-MM-DDTHH:MM:SS` and should represent datetime in UTC timezone. The value should be at most 4 hours in the past.\n",
      "type": "string"
    },
    "articleBodyLen": {
      "description": "Set the size of the article body that'll be returned in the response. Use -1 for full article body.",
      "type": "integer",
      "default": -1
    },
    "dataType": {
      "description": "What data types should we search? news content (default, `news`), press releases (`pr`) or blogs (`blog`).",
      "type": "array",
      "default": "news",
      "items": {
        "type": "string"
      },
      "enum": [
        "news",
        "pr",
        "blog"
      ]
    },
    "keyword": {
      "description": "Find articles that mention the specified keyword or a phrase. You can specify at most 60 keywords in a single search. If you specify multiple `keyword` parameters, then only articles that mention all of them will be returned, unless you specify `keywordOper` parameter and set it to 'or'.\n",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "conceptUri": {
      "description": "Find articles that mention the concept with a concept uri. You can specify at most 50 concepts in a single search. If multiple `conceptUri` parameters are provided, then only articles that are about all specified concepts will be returned, unless you specify `conceptOper` parameter and set it to 'or'. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggConcepts) to get concept URI value for a specified concept label.\n",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "categoryUri": {
      "description": "Find articles that are assigned to a particular category. You can specify at most 20 categories in a single search. If multiple `categoryUri` parameters are provided, then articles that are about any of the specified categories will be returned, unless you specify `categoryOper` parameter and set it to 'and'. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggCategories) to get value for a specified category name.\n",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "sourceUri": {
      "description": "Find articles that have been published by a news source. If you specify multiple `sourceUri` parameters, then articles from any of the specified sources will be returned. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggSources) to get value for a source name.\n",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "sourceLocationUri": {
      "description": "Find articles that were published by news sources located at the given geographic location (city or country). If you specify multiple `sourceLocationUri` parameters, then articles from sources from any of the specified sources will be returned. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggLocations) to get value for a location name.\n",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "sourceGroupUri": {
      "description": "Find articles that were published by news sources that are assigned to some predefined group of news sources. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggSourceGroups) to get value for a source group or find the uri.\n",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "authorUri": {
      "description": "Find articles that were written by a particular author. Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggAuthors) to get value for author uri based on the author name (and potentially source url).",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "locationUri": {
      "description": "Find articles that describe something that occured at a particular location (based on the location mentioned in the dateline). Check [autosuggest methods](https://eventregistry.org/documentation?tab=suggLocations) to get value for a location name.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "lang": {
      "description": "Find articles in the specific language(s). If not specified, all languages will be included. You can specify at most 5 languages in a single search.",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "eng",
          "spa",
          "deu",
          "zho",
          "slv",
          "cat",
          "por",
          "ita",
          "fra",
          "rus",
          "ara",
          "tur",
          "hrv",
          "srp",
          "ind",
          "ces",
          "slk",
          "pol",
          "eus",
          "hun",
          "nld",
          "swe",
          "fin",
          "dan",
          "ell",
          "ron",
          "bul",
          "ukr",
          "fas",
          "hin",
          "urd",
          "vie"
        ]
      }
    },
    "keywordLoc": {
      "description": "What data should be used when searching using the keywords provided by `keywords` parameter.",
      "type": "string",
      "default": "body",
      "enum": [
        "body",
        "title",
        "body,title"
      ]
    },
    "keywordOper": {
      "description": "If more keywords are provided with the `keyword` parameter, what should be the Boolean operator used. If 'and' (default) then all of the specified keywords have to be present in the article; if 'or' then an article will be returned if it mentions any of the provided keywords.",
      "type": "string",
      "default": "and",
      "enum": [
        "and",
        "or"
      ]
    },
    "conceptOper": {
      "description": "If more concepts are provided with the `conceptUri` parameter, what should be the Boolean operator used. If 'and' (default) then all of the specified concepts have to be present in the article; if 'or' then an article will be returned if it mentions any of the provided concepts.",
      "type": "string",
      "default": "and",
      "enum": [
        "and",
        "or"
      ]
    },
    "categoryOper": {
      "description": "If more categories are provided with the `categoryUri` parameter, what should be the Boolean operator used. If 'and' then all of the specified categories have to be present in the article; if 'or' then an article will be returned if it mentions any of the provided categories.",
      "type": "string",
      "default": "or",
      "enum": [
        "and",
        "or"
      ]
    },
    "startSourceRankPercentile": {
      "description": "starting [ranking percentile of the sources](https://github.com/EventRegistry/event-registry-python/wiki/Source-filtering#filtering-of-sources-based-on-their-ranking) to consider in the results (default: 0). Value should be in range 0-90 and divisible by 10.",
      "type": "integer",
      "default": "0"
    },
    "endSourceRankPercentile": {
      "description": "ending [ranking percentile of the sources](https://github.com/EventRegistry/event-registry-python/wiki/Source-filtering#filtering-of-sources-based-on-their-ranking) to consider in the results (default: 100). Value should be in range 10-100 and divisible by 10.",
      "type": "integer",
      "default": "100"
    },
    "minSentimentArticle": {
      "description": "the minimum value of the sentiment, the article should have. Valid value is any floating number between -1 (very negative) to 1 (very positive). 0 represents neutral sentiment. Note that setting the value will automatically reduce results to just English articles, since the sentiment can only be computed for English language.",
      "type": "integer"
    },
    "maxSentimentArticle": {
      "description": "the maximum value of the sentiment, the article should have. Valid value is any floating number between -1 (very negative) to 1 (very positive). 0 represents neutral sentiment. Note that setting the value will automatically reduce results to just English articles, since the sentiment can only be computed for English language.",
      "type": "integer"
    },
    "isDuplicateFilter": {
      "description": "Some articles can be duplicates of other articles. What should be done with them.",
      "type": "string",
      "default": "keepAll",
      "enum": [
        "skipDuplicates",
        "keepOnlyDuplicates",
        "keepAll"
      ]
    },
    "hasDuplicateFilter": {
      "description": "Some articles are later copied by others. What should be done with such articles.",
      "type": "string",
      "default": "keepAll",
      "enum": [
        "skipHasDuplicates",
        "keepOnlyHasDuplicates",
        "keepAll"
      ]
    },
    "eventFilter": {
      "description": "Some articles describe a known event and some don't. This filter allows you to filter the resulting articles based on this criteria.",
      "type": "string",
      "default": "keepAll",
      "enum": [
        "skipArticlesWithoutEvent",
        "keepOnlyArticlesWithoutEvent",
        "keepAll"
      ]
    }
  },
  "required": [
    "apiKey"
  ]
}