import { z } from "zod"

export const inputParamsSchema = {
  "Parameters": z.string().optional(),
  "inline_query_id": z.string(),
  "results": z.array(z.union([z.object({ "Field": z.string(), "type": z.string(), "id": z.string(), "title": z.string(), "message_text": z.string(), "parse_mode": z.string().optional(), "disable_web_page_preview": z.boolean().optional(), "url": z.string().optional(), "hide_url": z.boolean().optional(), "description": z.string().optional(), "thumb_url": z.string().optional(), "thumb_width": z.number().int().optional(), "thumb_height": z.number().int().optional() }).describe("Represents a link to an article or web page."), z.object({ "Field": z.string(), "type": z.string(), "id": z.string(), "photo_url": z.string(), "photo_width": z.number().int().optional(), "photo_height": z.number().int().optional(), "thumb_url": z.string(), "title": z.string().optional(), "description": z.string().optional(), "caption": z.string().optional(), "message_text": z.string().optional(), "parse_mode": z.string().optional(), "disable_web_page_preview": z.boolean().optional() }).describe("Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can provide message_text to send it instead of photo."), z.object({ "Field": z.string(), "type": z.string(), "id": z.string(), "gif_url": z.string(), "gif_width": z.number().int().optional(), "gif_height": z.number().int().optional(), "thumb_url": z.string(), "title": z.string().optional(), "caption": z.string().optional(), "message_text": z.string().optional(), "parse_mode": z.string().optional(), "disable_web_page_preview": z.boolean().optional() }).describe("Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can provide message_text to send it instead of the animation."), z.object({ "Field": z.string(), "type": z.string(), "id": z.string(), "mpeg4_url": z.string(), "mpeg4_width": z.number().int().optional(), "mpeg4_height": z.number().int().optional(), "thumb_url": z.string(), "title": z.string().optional(), "caption": z.string().optional(), "message_text": z.string().optional(), "parse_mode": z.string().optional(), "disable_web_page_preview": z.boolean().optional() }).describe("Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can provide message_text to send it instead of the animation."), z.object({ "Field": z.string(), "type": z.string(), "id": z.string(), "video_url": z.string(), "mime_type": z.string(), "message_text": z.string(), "parse_mode": z.string().optional(), "disable_web_page_preview": z.boolean().optional(), "video_width": z.number().int().optional(), "video_height": z.number().int().optional(), "video_duration": z.number().int().optional(), "thumb_url": z.string(), "title": z.string(), "description": z.string().optional() }).describe("Represents link to a page containing an embedded video player or a video file.")]).describe("This object represents one result of an inline query. Telegram clients currently support results of the following 5 types:")),
  "cache_time": z.number().int().optional(),
  "is_personal": z.boolean().optional(),
  "next_offset": z.string().optional()
}