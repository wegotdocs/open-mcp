{
  "type": "object",
  "properties": {
    "part": {
      "description": "The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a video's privacy setting is contained in the status part. As such, if your request is updating a private video, and the request's part parameter value includes the status part, the video's privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the video will revert to the default privacy setting. In addition, not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "onBehalfOfContentOwner": {
      "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
      "type": "string"
    },
    "ageGating": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `ageGating` to the tool, first call the tool `expandSchema` with \"/properties/ageGating\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Age restriction details related to a video. This data can only be retrieved by the video owner.</property-description>",
      "additionalProperties": true
    },
    "contentDetails": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `contentDetails` to the tool, first call the tool `expandSchema` with \"/properties/contentDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The contentDetails object contains information about the video content, including the length of the video and its aspect ratio.</property-description>",
      "additionalProperties": true
    },
    "etag": {
      "description": "Etag of this resource.",
      "type": "string"
    },
    "fileDetails": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `fileDetails` to the tool, first call the tool `expandSchema` with \"/properties/fileDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The fileDetails object encapsulates information about the video file that was uploaded to YouTube, including the file's resolution, duration, audio and video codecs, stream bitrates, and more. This data can only be retrieved by the video owner.</property-description>",
      "additionalProperties": true
    },
    "id": {
      "description": "The ID that YouTube uses to uniquely identify the video.",
      "type": "string"
    },
    "kind": {
      "default": "youtube#video",
      "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#video\".",
      "type": "string"
    },
    "liveStreamingDetails": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `liveStreamingDetails` to the tool, first call the tool `expandSchema` with \"/properties/liveStreamingDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The liveStreamingDetails object contains metadata about a live video broadcast. The object will only be present in a video resource if the video is an upcoming, live, or completed live broadcast.</property-description>",
      "additionalProperties": true
    },
    "localizations": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `localizations` to the tool, first call the tool `expandSchema` with \"/properties/localizations\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The localizations object contains localized versions of the basic details about the video, such as its title and description.</property-description>",
      "additionalProperties": true
    },
    "monetizationDetails": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `monetizationDetails` to the tool, first call the tool `expandSchema` with \"/properties/monetizationDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The monetizationDetails object encapsulates information about the monetization status of the video.</property-description>",
      "additionalProperties": true
    },
    "player": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `player` to the tool, first call the tool `expandSchema` with \"/properties/player\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The player object contains information that you would use to play the video in an embedded player.</property-description>",
      "additionalProperties": true
    },
    "processingDetails": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `processingDetails` to the tool, first call the tool `expandSchema` with \"/properties/processingDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The processingDetails object encapsulates information about YouTube's progress in processing the uploaded video file. The properties in the object identify the current processing status and an estimate of the time remaining until YouTube finishes processing the video. This part also indicates whether different types of data or content, such as file details or thumbnail images, are available for the video. The processingProgress object is designed to be polled so that the video uploaded can track the progress that YouTube has made in processing the uploaded video file. This data can only be retrieved by the video owner.</property-description>",
      "additionalProperties": true
    },
    "recordingDetails": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `recordingDetails` to the tool, first call the tool `expandSchema` with \"/properties/recordingDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The recordingDetails object encapsulates information about the location, date and address where the video was recorded.</property-description>",
      "additionalProperties": true
    },
    "snippet": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `snippet` to the tool, first call the tool `expandSchema` with \"/properties/snippet\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The snippet object contains basic details about the video, such as its title, description, and category.</property-description>",
      "additionalProperties": true
    },
    "statistics": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `statistics` to the tool, first call the tool `expandSchema` with \"/properties/statistics\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The statistics object contains statistics about the video.</property-description>",
      "additionalProperties": true
    },
    "status": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `status` to the tool, first call the tool `expandSchema` with \"/properties/status\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The status object contains information about the video's uploading, processing, and privacy statuses.</property-description>",
      "additionalProperties": true
    },
    "suggestions": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `suggestions` to the tool, first call the tool `expandSchema` with \"/properties/suggestions\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The suggestions object encapsulates suggestions that identify opportunities to improve the video quality or the metadata for the uploaded video. This data can only be retrieved by the video owner.</property-description>",
      "additionalProperties": true
    },
    "topicDetails": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `topicDetails` to the tool, first call the tool `expandSchema` with \"/properties/topicDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The topicDetails object encapsulates information about Freebase topics associated with the video.</property-description>",
      "additionalProperties": true
    }
  },
  "required": [
    "part"
  ]
}