{
  "type": "object",
  "properties": {
    "part": {
      "description": "The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for mutable properties that are contained in any parts that the request body specifies. For example, a playlist's description is contained in the snippet part, which must be included in the request body. If the request does not specify a value for the snippet.description property, the playlist's existing description will be deleted.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "onBehalfOfContentOwner": {
      "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
      "type": "string"
    },
    "contentDetails": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `contentDetails` to the tool, first call the tool `expandSchema` with \"/properties/contentDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The contentDetails object contains information like video count.</property-description>",
      "additionalProperties": true
    },
    "etag": {
      "description": "Etag of this resource.",
      "type": "string"
    },
    "id": {
      "description": "The ID that YouTube uses to uniquely identify the playlist.",
      "type": "string"
    },
    "kind": {
      "default": "youtube#playlist",
      "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#playlist\".",
      "type": "string"
    },
    "localizations": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `localizations` to the tool, first call the tool `expandSchema` with \"/properties/localizations\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Localizations for different languages</property-description>",
      "additionalProperties": true
    },
    "player": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `player` to the tool, first call the tool `expandSchema` with \"/properties/player\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The player object contains information that you would use to play the playlist in an embedded player.</property-description>",
      "additionalProperties": true
    },
    "snippet": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `snippet` to the tool, first call the tool `expandSchema` with \"/properties/snippet\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The snippet object contains basic details about the playlist, such as its title and description.</property-description>",
      "additionalProperties": true
    },
    "status": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `status` to the tool, first call the tool `expandSchema` with \"/properties/status\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The status object contains status information for the playlist.</property-description>",
      "additionalProperties": true
    }
  },
  "required": [
    "part"
  ]
}