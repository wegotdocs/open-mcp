import { z } from "zod"

export const inputParamsSchema = {
  "part": z.array(z.string()).describe("The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The API currently only allows the parameter value to be set to either brandingSettings or invideoPromotion. (You cannot update both of those parts with a single request.) Note that this method overrides the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies."),
  "onBehalfOfContentOwner": z.string().describe("The *onBehalfOfContentOwner* parameter indicates that the authenticated user is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with needs to be linked to the specified YouTube content owner.").optional(),
  "auditDetails": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `auditDetails` to the tool, first call the tool `expandSchema` with \"/properties/auditDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The auditionDetails object encapsulates channel data that is relevant for YouTube Partners during the audition process.</property-description>").optional(),
  "brandingSettings": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `brandingSettings` to the tool, first call the tool `expandSchema` with \"/properties/brandingSettings\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The brandingSettings object encapsulates information about the branding of the channel.</property-description>").optional(),
  "contentDetails": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `contentDetails` to the tool, first call the tool `expandSchema` with \"/properties/contentDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The contentDetails object encapsulates information about the channel's content.</property-description>").optional(),
  "contentOwnerDetails": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `contentOwnerDetails` to the tool, first call the tool `expandSchema` with \"/properties/contentOwnerDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The contentOwnerDetails object encapsulates channel data that is relevant for YouTube Partners linked with the channel.</property-description>").optional(),
  "etag": z.string().describe("Etag of this resource.").optional(),
  "id": z.string().describe("The ID that YouTube uses to uniquely identify the channel.").optional(),
  "kind": z.string().describe("Identifies what kind of resource this is. Value: the fixed string \"youtube#channel\".").optional(),
  "localizations": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `localizations` to the tool, first call the tool `expandSchema` with \"/properties/localizations\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Localizations for different languages</property-description>").optional(),
  "snippet": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `snippet` to the tool, first call the tool `expandSchema` with \"/properties/snippet\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The snippet object contains basic details about the channel, such as its title, description, and thumbnail images.</property-description>").optional(),
  "statistics": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `statistics` to the tool, first call the tool `expandSchema` with \"/properties/statistics\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The statistics object encapsulates statistics for the channel.</property-description>").optional(),
  "status": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `status` to the tool, first call the tool `expandSchema` with \"/properties/status\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The status object encapsulates information about the privacy status of the channel.</property-description>").optional(),
  "topicDetails": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `topicDetails` to the tool, first call the tool `expandSchema` with \"/properties/topicDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The topicDetails object encapsulates information about Freebase topics associated with the channel.</property-description>").optional()
}