import { z } from "zod"

export const inputParamsSchema = {
  "authorChannelId": z.string().describe("The ID of the user that authored this message, this field is not always filled. textMessageEvent - the user that wrote the message fanFundingEvent - the user that funded the broadcast newSponsorEvent - the user that just became a sponsor memberMilestoneChatEvent - the member that sent the message membershipGiftingEvent - the user that made the purchase giftMembershipReceivedEvent - the user that received the gift membership messageDeletedEvent - the moderator that took the action messageRetractedEvent - the author that retracted their message userBannedEvent - the moderator that took the action superChatEvent - the user that made the purchase superStickerEvent - the user that made the purchase pollEvent - the user that created the poll").optional(),
  "displayMessage": z.string().describe("Contains a string that can be displayed to the user. If this field is not present the message is silent, at the moment only messages of type TOMBSTONE and CHAT_ENDED_EVENT are silent.").optional(),
  "giftMembershipReceivedDetails": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `giftMembershipReceivedDetails` to the tool, first call the tool `expandSchema` with \"/properties/snippet/properties/giftMembershipReceivedDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Details about the Gift Membership Received event, this is only set if the type is 'giftMembershipReceivedEvent'.</property-description>").optional(),
  "hasDisplayContent": z.boolean().describe("Whether the message has display content that should be displayed to users.").optional(),
  "liveChatId": z.string().optional(),
  "memberMilestoneChatDetails": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `memberMilestoneChatDetails` to the tool, first call the tool `expandSchema` with \"/properties/snippet/properties/memberMilestoneChatDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Details about the Member Milestone Chat event, this is only set if the type is 'memberMilestoneChatEvent'.</property-description>").optional(),
  "membershipGiftingDetails": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `membershipGiftingDetails` to the tool, first call the tool `expandSchema` with \"/properties/snippet/properties/membershipGiftingDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Details about the Membership Gifting event, this is only set if the type is 'membershipGiftingEvent'.</property-description>").optional(),
  "messageDeletedDetails": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `messageDeletedDetails` to the tool, first call the tool `expandSchema` with \"/properties/snippet/properties/messageDeletedDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "messageRetractedDetails": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `messageRetractedDetails` to the tool, first call the tool `expandSchema` with \"/properties/snippet/properties/messageRetractedDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "newSponsorDetails": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `newSponsorDetails` to the tool, first call the tool `expandSchema` with \"/properties/snippet/properties/newSponsorDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Details about the New Member Announcement event, this is only set if the type is 'newSponsorEvent'. Please note that \"member\" is the new term for \"sponsor\".</property-description>").optional(),
  "pollDetails": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `pollDetails` to the tool, first call the tool `expandSchema` with \"/properties/snippet/properties/pollDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Details about the poll event, this is only set if the type is 'pollEvent'.</property-description>").optional(),
  "publishedAt": z.string().datetime({ offset: true }).describe("The date and time when the message was orignally published.").optional(),
  "superChatDetails": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `superChatDetails` to the tool, first call the tool `expandSchema` with \"/properties/snippet/properties/superChatDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Details about the Super Chat event, this is only set if the type is 'superChatEvent'.</property-description>").optional(),
  "superStickerDetails": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `superStickerDetails` to the tool, first call the tool `expandSchema` with \"/properties/snippet/properties/superStickerDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Details about the Super Sticker event, this is only set if the type is 'superStickerEvent'.</property-description>").optional(),
  "textMessageDetails": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `textMessageDetails` to the tool, first call the tool `expandSchema` with \"/properties/snippet/properties/textMessageDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Details about the text message, this is only set if the type is 'textMessageEvent'.</property-description>").optional(),
  "type": z.enum(["invalidType","textMessageEvent","tombstone","fanFundingEvent","chatEndedEvent","sponsorOnlyModeStartedEvent","sponsorOnlyModeEndedEvent","newSponsorEvent","memberMilestoneChatEvent","membershipGiftingEvent","giftMembershipReceivedEvent","messageDeletedEvent","messageRetractedEvent","userBannedEvent","superChatEvent","superStickerEvent","pollEvent"]).describe("The type of message, this will always be present, it determines the contents of the message as well as which fields will be present.").optional(),
  "userBannedDetails": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `userBannedDetails` to the tool, first call the tool `expandSchema` with \"/properties/snippet/properties/userBannedDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional()
}