import { z } from "zod"

export const inputParamsSchema = {
  "part": z.array(z.string()).describe("The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include."),
  "contentDetails": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `contentDetails` to the tool, first call the tool `expandSchema` with \"/properties/contentDetails\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The contentDetails object contains basic statistics about the subscription.</property-description>").optional(),
  "etag": z.string().describe("Etag of this resource.").optional(),
  "id": z.string().describe("The ID that YouTube uses to uniquely identify the subscription.").optional(),
  "kind": z.string().describe("Identifies what kind of resource this is. Value: the fixed string \"youtube#subscription\".").optional(),
  "snippet": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `snippet` to the tool, first call the tool `expandSchema` with \"/properties/snippet\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The snippet object contains basic details about the subscription, including its title and the channel that the user subscribed to.</property-description>").optional(),
  "subscriberSnippet": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `subscriberSnippet` to the tool, first call the tool `expandSchema` with \"/properties/subscriberSnippet\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The subscriberSnippet object contains basic details about the subscriber.</property-description>").optional()
}