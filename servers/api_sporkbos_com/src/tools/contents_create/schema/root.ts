import { z } from "zod"

export const inputParamsSchema = {
  "id": z.number().int().readonly(),
  "created_by": z.string(),
  "updated_by": z.string(),
  "deleted_by": z.string(),
  "ulid": z.string().readonly(),
  "created_at": z.string().datetime({ offset: true }).readonly(),
  "updated_at": z.string().datetime({ offset: true }).readonly(),
  "deleted_at": z.string().datetime({ offset: true }).readonly(),
  "content_pages": z.array(z.object({ "id": z.number().int().readonly(), "created_by": z.string(), "updated_by": z.string(), "deleted_by": z.string(), "ulid": z.string().readonly(), "created_at": z.string().datetime({ offset: true }).readonly(), "updated_at": z.string().datetime({ offset: true }).readonly(), "deleted_at": z.string().datetime({ offset: true }).readonly(), "name": z.string().max(255), "order": z.number().int().gte(-2147483648).lte(2147483647), "note": z.string().optional(), "due_date": z.string().date().nullable().optional(), "start_time": z.string().time().nullable().optional(), "duration": z.number().int().gte(-2147483648).lte(2147483647).nullable().optional(), "icon": z.string().max(255).optional(), "color": z.string().max(255).optional(), "flag": z.enum(["Clear","Flagged","Warning","Blocked","None"]).describe("* `Clear` - Clear\n* `Flagged` - Flagged\n* `Warning` - Warning\n* `Blocked` - Blocked\n* `None` - None").optional(), "is_template": z.boolean().optional(), "team": z.number().int().nullable().readonly(), "content": z.number().int().nullable().readonly() })).optional(),
  "children": z.array(z.number().int()).optional(),
  "files": z.array(z.object({ "id": z.number().int().optional(), "name": z.string(), "file": z.string().url().optional() })).optional(),
  "is_favourite": z.boolean().optional(),
  "mark_children_complete": z.boolean().optional(),
  "mark_children_cancel": z.boolean().optional(),
  "owner_data": z.string(),
  "collaborators": z.array(z.object({ "id": z.number().int(), "name": z.string(), "type": z.enum(["user","group","position"]).describe("* `user` - user\n* `group` - group\n* `position` - position"), "avatar": z.string().readonly() })).optional(),
  "parent_data": z.string(),
  "category_name": z.string().readonly(),
  "latest_result": z.string().readonly(),
  "metric_collaborators_details": z.array(z.object({ "id": z.number().int(), "name": z.string(), "type": z.string() })).optional(),
  "name": z.string().max(255),
  "description": z.string().optional(),
  "stage": z.enum(["Draft","Published","Archive","Parking"]).describe("* `Draft` - Draft\n* `Published` - Published\n* `Archive` - Archive\n* `Parking` - Parking").optional(),
  "content_type": z.enum(["Decision","Glossary","Goal","Guide","Knowledge","Meeting","Note","Parking","Project","Series","Survey","Task","Metric","None"]).describe("* `Decision` - Key Decision\n* `Glossary` - Glossary\n* `Goal` - Goal\n* `Guide` - Guide\n* `Knowledge` - Knowledge\n* `Meeting` - Meeting Minutes\n* `Note` - Note\n* `Parking` - Parking Lot\n* `Project` - Project\n* `Series` - Series\n* `Survey` - Survey\n* `Task` - Task\n* `Metric` - Metric\n* `None` - None").optional(),
  "start_date": z.string().datetime({ offset: true }).nullable().optional(),
  "due_date": z.string().datetime({ offset: true }).nullable().optional(),
  "id_number": z.string().max(255).optional(),
  "priority": z.number().int().gte(-2147483648).lte(2147483647).nullable().optional(),
  "urgency": z.enum(["Low","Medium","High","Critical","None"]).describe("* `Low` - Low\n* `Medium` - Medium\n* `High` - High\n* `Critical` - Critical\n* `None` - None").optional(),
  "importance": z.enum(["Low","Medium","High","Critical","None"]).describe("* `Low` - Low\n* `Medium` - Medium\n* `High` - High\n* `Critical` - Critical\n* `None` - None").optional(),
  "status": z.string().optional(),
  "progress": z.enum(["Zero","Five","Ten","Fifteen","Twenty","TwentyFive","Thirty","ThirtyFive","Forty","FortyFive","Fifty","FiftyFive","Sixty","SixtyFive","Seventy","SeventyFive","Eighty","EightyFive","Ninety","NinetyFive","OneHundred","None"]).describe("* `Zero` - 0%\n* `Five` - 5%\n* `Ten` - 10%\n* `Fifteen` - 15%\n* `Twenty` - 20%\n* `TwentyFive` - 25%\n* `Thirty` - 30%\n* `ThirtyFive` - 35%\n* `Forty` - 40%\n* `FortyFive` - 45%\n* `Fifty` - 50%\n* `FiftyFive` - 55%\n* `Sixty` - 60%\n* `SixtyFive` - 65%\n* `Seventy` - 70%\n* `SeventyFive` - 75%\n* `Eighty` - 80%\n* `EightyFive` - 85%\n* `Ninety` - 90%\n* `NinetyFive` - 95%\n* `OneHundred` - 100%\n* `None` - None").optional(),
  "pace": z.enum(["Problem","Behind","NotStarted","OnSchedule","Ahead","Complete","None"]).describe("* `Problem` - Problem\n* `Behind` - Behind\n* `NotStarted` - Not Started\n* `OnSchedule` - On Schedule\n* `Ahead` - Ahead\n* `Complete` - Complete\n* `None` - None").optional(),
  "skill": z.number().int().gte(-2147483648).lte(2147483647).nullable().optional(),
  "knowledge_level": z.enum(["Beginner","Intermediate","Advanced","Master","None"]).describe("* `Beginner` - Beginner\n* `Intermediate` - Intermediate\n* `Advanced` - Advanced\n* `Master` - Master\n* `None` - None").optional(),
  "difficulty_level": z.enum(["low","medium","high","specialist","None"]).describe("* `low` - Low\n* `medium` - Medium\n* `high` - High\n* `specialist` - Specialist\n* `None` - None").optional(),
  "hours": z.number().int().gte(-2147483648).lte(2147483647).nullable().optional(),
  "frequency": z.enum(["Never","Revision","Recurring"]).describe("* `Never` - Never\n* `Revision` - Every Revision\n* `Recurring` - Recurring").optional(),
  "workload": z.number().int().gte(-2147483648).lte(2147483647).nullable().optional(),
  "views": z.number().int().gte(-2147483648).lte(2147483647).nullable().optional(),
  "guide_type": z.enum(["Dream","Why","Purpose","Vision","Mission","Value","Strategy","Target","Guarantee","Process","USP","None"]).describe("* `Dream` - We Dream Big\n* `Why` - Our Why\n* `Purpose` - Purpose for Being\n* `Vision` - Vision of the Future\n* `Mission` - We are on a Mission\n* `Value` - The Core Values\n* `Strategy` - Strategic Plans\n* `Target` - Our Target Market\n* `Guarantee` - What We Stand For\n* `Process` - Following the Process\n* `USP` - Unique Selling Proposition\n* `None` - None").optional(),
  "flag": z.enum(["Clear","Flagged","Warning","Blocked","None"]).describe("* `Clear` - Clear\n* `Flagged` - Flagged\n* `Warning` - Warning\n* `Blocked` - Blocked\n* `None` - None").optional(),
  "visibility": z.enum(["Private","Team","Public","None"]).describe("* `Private` - Private\n* `Team` - Team\n* `Public` - Public\n* `None` - None").optional(),
  "ignore_in_performance": z.boolean().optional(),
  "required_all_learn": z.boolean().optional(),
  "can_self_learn": z.boolean().optional(),
  "is_template": z.boolean().optional(),
  "is_deleted": z.boolean().optional(),
  "recurring_type": z.string().optional(),
  "recurring_interval": z.number().int().gte(-2147483648).lte(2147483647).nullable().optional(),
  "version": z.string().regex(new RegExp("^-?\\d{0,9}(?:\\.\\d{0,1})?$")).optional(),
  "is_full_day": z.boolean().optional(),
  "unit_of_measure": z.string().max(100).nullable().optional(),
  "calculation": z.enum(["None","Rollup","Average","Cumulative","YTD","MTD"]).describe("* `None` - None\n* `Rollup` - Roll-up\n* `Average` - Average\n* `Cumulative` - Cumulative\n* `YTD` - Year-To-Date\n* `MTD` - Month-To-Date").nullable().optional(),
  "result_accuracy": z.enum(["#","#.#","#.##","#.###","#.####"]).describe("* `#` - #\n* `#.#` - #.#\n* `#.##` - #.##\n* `#.###` - #.###\n* `#.####` - #.####").nullable().optional(),
  "timeframe": z.enum(["Daily","Weekly","Monthly","Quarterly","Yearly"]).describe("* `Daily` - Daily\n* `Weekly` - Weekly\n* `Monthly` - Monthly\n* `Quarterly` - Quarterly\n* `Yearly` - Yearly").nullable().optional(),
  "orientation": z.enum(["GTE","LTE","Range"]).describe("* `GTE` - GTE\n* `LTE` - LTE\n* `Range` - Range").nullable().optional(),
  "metric_status": z.enum(["Danger","Caution","Acceptable","Success"]).describe("* `Danger` - Danger\n* `Caution` - Caution\n* `Acceptable` - Acceptable\n* `Success` - Success").nullable().optional(),
  "ceiling": z.string().regex(new RegExp("^-?\\d{0,8}(?:\\.\\d{0,4})?$")).nullable().optional(),
  "high": z.string().regex(new RegExp("^-?\\d{0,8}(?:\\.\\d{0,4})?$")).nullable().optional(),
  "target": z.string().regex(new RegExp("^-?\\d{0,8}(?:\\.\\d{0,4})?$")).nullable().optional(),
  "medium": z.string().regex(new RegExp("^-?\\d{0,8}(?:\\.\\d{0,4})?$")).nullable().optional(),
  "low": z.string().regex(new RegExp("^-?\\d{0,8}(?:\\.\\d{0,4})?$")).nullable().optional(),
  "floor": z.string().regex(new RegExp("^-?\\d{0,8}(?:\\.\\d{0,4})?$")).nullable().optional(),
  "team": z.number().int().nullable().optional(),
  "owner": z.number().int().nullable().optional(),
  "board": z.number().int().nullable().optional(),
  "parent": z.number().int().nullable().optional(),
  "performance_type": z.number().int().nullable().optional(),
  "content_category": z.number().int().nullable().optional(),
  "collaborators_users": z.array(z.number().int().nullable()).optional(),
  "collaborators_groups": z.array(z.number().int().nullable()).optional(),
  "collaborators_positions": z.array(z.number().int().nullable()).optional(),
  "shared_users": z.array(z.number().int()).optional(),
  "shared_groups": z.array(z.number().int()).optional(),
  "required_positions_learn": z.array(z.number().int()).optional(),
  "tags": z.array(z.number().int()).optional(),
  "linked_contents": z.array(z.number().int()).optional(),
  "shared_positions": z.array(z.number().int()).optional(),
  "related_contents": z.array(z.number().int()).optional(),
  "metric_shared_users": z.array(z.number().int()).optional(),
  "metric_shared_groups": z.array(z.number().int()).optional(),
  "metric_shared_positions": z.array(z.number().int()).optional()
}