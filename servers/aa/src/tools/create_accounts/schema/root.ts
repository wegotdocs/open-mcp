import { z } from "zod"

export const inputParamsSchema = {
  "users": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `users` to the tool, first call the tool `expandSchema` with \"/properties/users\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "organizations": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `organizations` to the tool, first call the tool `expandSchema` with \"/properties/organizations\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "workspaces": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `workspaces` to the tool, first call the tool `expandSchema` with \"/properties/workspaces\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "projects": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `projects` to the tool, first call the tool `expandSchema` with \"/properties/projects\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "organization_memberships": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `organization_memberships` to the tool, first call the tool `expandSchema` with \"/properties/organization_memberships\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "workspace_memberships": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `workspace_memberships` to the tool, first call the tool `expandSchema` with \"/properties/workspace_memberships\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>"),
  "project_memberships": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `project_memberships` to the tool, first call the tool `expandSchema` with \"/properties/project_memberships\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>")
}