import { z } from "zod"

export const inputParamsSchema = {
  "allowed_flag_reasons": z.array(z.string()).optional(),
  "apn_config": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `apn_config` to the tool, first call the tool `expandSchema` with \"/properties/apn_config\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "async_moderation_config": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `async_moderation_config` to the tool, first call the tool `expandSchema` with \"/properties/async_moderation_config\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "async_url_enrich_enabled": z.boolean().optional(),
  "auto_translation_enabled": z.boolean().optional(),
  "before_message_send_hook_url": z.string().optional(),
  "cdn_expiration_seconds": z.number().int().gte(14400).lte(1209600).optional(),
  "channel_hide_members_only": z.boolean().optional(),
  "custom_action_handler_url": z.string().optional(),
  "datadog_info": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `datadog_info` to the tool, first call the tool `expandSchema` with \"/properties/datadog_info\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "disable_auth_checks": z.boolean().optional(),
  "disable_permissions_checks": z.boolean().optional(),
  "enforce_unique_usernames": z.enum(["no","app","team"]).optional(),
  "feeds_moderation_enabled": z.boolean().optional(),
  "feeds_v2_region": z.string().optional(),
  "file_upload_config": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `file_upload_config` to the tool, first call the tool `expandSchema` with \"/properties/file_upload_config\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "firebase_config": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `firebase_config` to the tool, first call the tool `expandSchema` with \"/properties/firebase_config\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "grants": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `grants` to the tool, first call the tool `expandSchema` with \"/properties/grants\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "guest_user_creation_disabled": z.boolean().optional(),
  "huawei_config": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `huawei_config` to the tool, first call the tool `expandSchema` with \"/properties/huawei_config\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "image_moderation_block_labels": z.array(z.string()).optional(),
  "image_moderation_enabled": z.boolean().optional(),
  "image_moderation_labels": z.array(z.string()).optional(),
  "image_upload_config": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `image_upload_config` to the tool, first call the tool `expandSchema` with \"/properties/image_upload_config\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "migrate_permissions_to_v2": z.boolean().optional(),
  "moderation_dashboard_preferences": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `moderation_dashboard_preferences` to the tool, first call the tool `expandSchema` with \"/properties/moderation_dashboard_preferences\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "moderation_enabled": z.boolean().optional(),
  "moderation_webhook_url": z.string().optional(),
  "multi_tenant_enabled": z.boolean().optional(),
  "permission_version": z.enum(["v1","v2"]).optional(),
  "push_config": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `push_config` to the tool, first call the tool `expandSchema` with \"/properties/push_config\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "reminders_interval": z.number().int().gte(60).lte(86400).optional(),
  "reminders_max_members": z.number().int().gte(2).optional(),
  "revoke_tokens_issued_before": z.string().datetime({ offset: true }).optional(),
  "sns_key": z.string().optional(),
  "sns_secret": z.string().optional(),
  "sns_topic_arn": z.string().optional(),
  "sqs_key": z.string().optional(),
  "sqs_secret": z.string().optional(),
  "sqs_url": z.string().optional(),
  "user_search_disallowed_roles": z.array(z.string()).optional(),
  "webhook_events": z.array(z.string()).optional(),
  "webhook_url": z.string().optional(),
  "xiaomi_config": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `xiaomi_config` to the tool, first call the tool `expandSchema` with \"/properties/xiaomi_config\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional()
}