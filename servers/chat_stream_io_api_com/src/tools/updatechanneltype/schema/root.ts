import { z } from "zod"

export const inputParamsSchema = {
  "name": z.string(),
  "allowed_flag_reasons": z.array(z.string()).optional(),
  "automod": z.enum(["disabled","simple","AI"]),
  "automod_behavior": z.enum(["flag","block","shadow_block"]),
  "automod_thresholds": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `automod_thresholds` to the tool, first call the tool `expandSchema` with \"/properties/automod_thresholds\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Sets thresholds for AI moderation</property-description>").optional(),
  "blocklist": z.string().optional(),
  "blocklist_behavior": z.enum(["flag","block","shadow_block"]).optional(),
  "blocklists": z.array(z.object({ "behavior": z.enum(["flag","block","shadow_block"]).describe("Blocklist behavior"), "blocklist": z.string().describe("Blocklist name") })).optional(),
  "commands": z.array(z.string()).describe("List of commands that channel supports").optional(),
  "connect_events": z.boolean().optional(),
  "custom_events": z.boolean().optional(),
  "grants": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `grants` to the tool, first call the tool `expandSchema` with \"/properties/grants\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "mark_messages_pending": z.boolean().optional(),
  "max_message_length": z.number().int().lte(20000),
  "mutes": z.boolean().optional(),
  "partition_size": z.number().int().gte(0).optional(),
  "partition_ttl": z.string().duration().nullable().optional(),
  "permissions": z.array(z.object({ "action": z.enum(["Deny","Allow"]), "name": z.string().describe("User-friendly policy name"), "owner": z.boolean().describe("Whether policy applies to resource owner or not"), "priority": z.number().int().gte(1).lte(999).describe("Policy priority"), "resources": z.array(z.string()).describe("List of resources to apply policy to"), "roles": z.array(z.string()).describe("List of roles to apply policy to") }).describe("Policy request")).optional(),
  "polls": z.boolean().optional(),
  "push_notifications": z.boolean().optional(),
  "quotes": z.boolean().optional(),
  "reactions": z.boolean().optional(),
  "read_events": z.boolean().optional(),
  "reminders": z.boolean().optional(),
  "replies": z.boolean().optional(),
  "search": z.boolean().optional(),
  "skip_last_msg_update_for_system_msgs": z.boolean().optional(),
  "typing_events": z.boolean().optional(),
  "uploads": z.boolean().optional(),
  "url_enrichment": z.boolean().optional()
}