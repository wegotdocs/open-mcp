import { z } from "zod"

export const inputParamsSchema = {
  "explicit": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `explicit` to the tool, first call the tool `expandSchema` with \"/properties/automod_thresholds/properties/explicit\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Thresholds for explicit messages</property-description>").optional(),
  "spam": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `spam` to the tool, first call the tool `expandSchema` with \"/properties/automod_thresholds/properties/spam\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Thresholds for spam</property-description>").optional(),
  "toxic": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `toxic` to the tool, first call the tool `expandSchema` with \"/properties/automod_thresholds/properties/toxic\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Thresholds for toxic messages</property-description>").optional()
}