import { z } from "zod"

export const inputParamsSchema = {
  "read_receipts": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `read_receipts` to the tool, first call the tool `expandSchema` with \"/properties/banned_by/properties/privacy_settings/properties/read_receipts\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "typing_indicators": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `typing_indicators` to the tool, first call the tool `expandSchema` with \"/properties/banned_by/properties/privacy_settings/properties/typing_indicators\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional()
}