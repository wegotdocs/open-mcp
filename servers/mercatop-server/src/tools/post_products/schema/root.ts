import { z } from "zod"

export const inputParamsSchema = {
  "name": z.string().describe("Product name.").optional(),
  "slug": z.string().describe("Product slug.").optional(),
  "date_created": z.string().describe("The date the product was created, in the site's timezone.").optional(),
  "date_created_gmt": z.string().describe("The date the product was created, as GMT.").optional(),
  "type": z.enum(["simple","grouped","external","variable"]).describe("Product type.").optional(),
  "status": z.enum(["draft","pending","private","publish","future"]).describe("Product status (post status).").optional(),
  "featured": z.boolean().describe("Featured product.").optional(),
  "catalog_visibility": z.enum(["visible","catalog","search","hidden"]).describe("Catalog visibility.").optional(),
  "description": z.string().describe("Product description.").optional(),
  "short_description": z.string().describe("Product short description.").optional(),
  "sku": z.string().describe("Unique identifier.").optional(),
  "regular_price": z.string().describe("Product regular price.").optional(),
  "sale_price": z.string().describe("Product sale price.").optional(),
  "date_on_sale_from": z.string().describe("Start date of sale price, in the site's timezone.").optional(),
  "date_on_sale_from_gmt": z.string().describe("Start date of sale price, as GMT.").optional(),
  "date_on_sale_to": z.string().describe("End date of sale price, in the site's timezone.").optional(),
  "date_on_sale_to_gmt": z.string().describe("End date of sale price, in the site's timezone.").optional(),
  "virtual": z.boolean().describe("If the product is virtual.").optional(),
  "downloadable": z.boolean().describe("If the product is downloadable.").optional(),
  "downloads": z.array(z.object({ "id": z.string().describe("File ID.").optional(), "name": z.string().describe("File name.").optional(), "file": z.string().describe("File URL.").optional() })).describe("List of downloadable files.").optional(),
  "download_limit": z.number().int().describe("Number of times downloadable files can be downloaded after purchase.").optional(),
  "download_expiry": z.number().int().describe("Number of days until access to downloadable files expires.").optional(),
  "external_url": z.string().url().describe("Product external URL. Only for external products.").optional(),
  "button_text": z.string().describe("Product external button text. Only for external products.").optional(),
  "tax_status": z.enum(["taxable","shipping","none"]).describe("Tax status.").optional(),
  "tax_class": z.string().describe("Tax class.").optional(),
  "manage_stock": z.boolean().describe("Stock management at product level.").optional(),
  "stock_quantity": z.number().int().describe("Stock quantity.").optional(),
  "stock_status": z.enum(["instock","outofstock","onbackorder"]).describe("Controls the stock status of the product.").optional(),
  "backorders": z.enum(["no","notify","yes"]).describe("If managing stock, this controls if backorders are allowed.").optional(),
  "low_stock_amount": z.number().int().describe("Low Stock amount for the product.").optional(),
  "sold_individually": z.boolean().describe("Allow one item to be bought in a single order.").optional(),
  "weight": z.string().describe("Product weight (kg).").optional(),
  "dimensions": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `dimensions` to the tool, first call the tool `expandSchema` with \"/properties/dimensions\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Product dimensions.</property-description>").optional(),
  "shipping_class": z.string().describe("Shipping class slug.").optional(),
  "reviews_allowed": z.boolean().describe("Allow reviews.").optional(),
  "upsell_ids": z.array(z.number().int()).describe("List of up-sell products IDs.").optional(),
  "cross_sell_ids": z.array(z.number().int()).describe("List of cross-sell products IDs.").optional(),
  "parent_id": z.number().int().describe("Product parent ID.").optional(),
  "purchase_note": z.string().describe("Optional note to send the customer after purchase.").optional(),
  "categories": z.array(z.object({ "id": z.number().int().describe("Category ID.").optional(), "name": z.string().describe("Category name.").optional(), "slug": z.string().describe("Category slug.").optional() })).describe("List of categories.").optional(),
  "tags": z.array(z.object({ "id": z.number().int().describe("Tag ID.").optional(), "name": z.string().describe("Tag name.").optional(), "slug": z.string().describe("Tag slug.").optional() })).describe("List of tags.").optional(),
  "images": z.array(z.object({ "id": z.number().int().describe("Image ID.").optional(), "date_created": z.string().describe("The date the image was created, in the site's timezone.").optional(), "date_created_gmt": z.string().describe("The date the image was created, as GMT.").optional(), "date_modified": z.string().describe("The date the image was last modified, in the site's timezone.").optional(), "date_modified_gmt": z.string().describe("The date the image was last modified, as GMT.").optional(), "src": z.string().url().describe("Image URL.").optional(), "name": z.string().describe("Image name.").optional(), "alt": z.string().describe("Image alternative text.").optional() })).describe("List of images.").optional(),
  "attributes": z.array(z.object({ "id": z.number().int().describe("Attribute ID.").optional(), "name": z.string().describe("Attribute name.").optional(), "position": z.number().int().describe("Attribute position.").optional(), "visible": z.boolean().describe("Define if the attribute is visible on the \"Additional information\" tab in the product's page.").optional(), "variation": z.boolean().describe("Define if the attribute can be used as variation.").optional(), "options": z.array(z.string()).describe("List of available term names of the attribute.").optional() })).describe("List of attributes.").optional(),
  "default_attributes": z.array(z.object({ "id": z.number().int().describe("Attribute ID.").optional(), "name": z.string().describe("Attribute name.").optional(), "option": z.string().describe("Selected attribute term name.").optional() })).describe("Defaults variation attributes.").optional(),
  "menu_order": z.number().int().describe("Menu order, used to custom sort products.").optional(),
  "meta_data": z.array(z.object({ "id": z.number().int().describe("Meta ID.").optional(), "key": z.string().describe("Meta key.").optional(), "value": z.string().describe("Meta value.").optional() })).describe("Meta data.").optional()
}