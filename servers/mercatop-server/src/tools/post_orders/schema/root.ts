import { z } from "zod"

export const inputParamsSchema = {
  "parent_id": z.number().int().describe("Parent order ID.").optional(),
  "status": z.enum(["pending","processing","on-hold","completed","cancelled","refunded","failed"]).describe("Order status.").optional(),
  "currency": z.enum(["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BRL","BSD","BTC","BTN","BWP","BYR","BYN","BZD","CAD","CDF","CHF","CLP","CNY","COP","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GGP","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","IMP","INR","IQD","IRR","IRT","ISK","JEP","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRU","MUR","MVR","MWK","MXN","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PRB","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","SSP","STN","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","UYU","UZS","VEF","VES","VND","VUV","WST","XAF","XCD","XOF","XPF","YER","ZAR","ZMW"]).describe("Currency the order was created with, in ISO format.").optional(),
  "customer_id": z.number().int().describe("User ID who owns the order. 0 for guests.").optional(),
  "customer_note": z.string().describe("Note left by customer during checkout.").optional(),
  "billing": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `billing` to the tool, first call the tool `expandSchema` with \"/properties/billing\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Billing address.</property-description>").optional(),
  "shipping": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `shipping` to the tool, first call the tool `expandSchema` with \"/properties/shipping\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Shipping address.</property-description>").optional(),
  "payment_method": z.string().describe("Payment method ID.").optional(),
  "payment_method_title": z.string().describe("Payment method title.").optional(),
  "transaction_id": z.string().describe("Unique transaction ID.").optional(),
  "meta_data": z.array(z.object({ "id": z.number().int().describe("Meta ID.").optional(), "key": z.string().describe("Meta key.").optional(), "value": z.string().describe("Meta value.").optional() })).describe("Meta data.").optional(),
  "line_items": z.array(z.object({ "id": z.number().int().describe("Item ID.").optional(), "name": z.string().describe("Product name.").optional(), "parent_name": z.string().describe("Parent product name if the product is a variation.").optional(), "product_id": z.string().describe("Product ID.").optional(), "variation_id": z.number().int().describe("Variation ID, if applicable.").optional(), "quantity": z.number().int().describe("Quantity ordered.").optional(), "tax_class": z.string().describe("Tax class of product.").optional(), "subtotal": z.string().describe("Line subtotal (before discounts).").optional(), "subtotal_tax": z.string().describe("Line subtotal tax (before discounts).").optional(), "total": z.string().describe("Line total (after discounts).").optional(), "total_tax": z.string().describe("Line total tax (after discounts).").optional(), "taxes": z.array(z.object({ "id": z.number().int().describe("Tax rate ID.").optional(), "total": z.string().describe("Tax total.").optional(), "subtotal": z.string().describe("Tax subtotal.").optional() })).describe("Line taxes.").optional(), "meta_data": z.array(z.object({ "id": z.number().int().describe("Meta ID.").optional(), "key": z.string().describe("Meta key.").optional(), "value": z.string().describe("Meta value.").optional(), "display_key": z.string().describe("Meta key for UI display.").optional(), "display_value": z.string().describe("Meta value for UI display.").optional() })).describe("Meta data.").optional(), "sku": z.string().describe("Product SKU.").optional(), "price": z.number().describe("Product price.").optional() })).describe("Line items data.").optional(),
  "shipping_lines": z.array(z.object({ "id": z.number().int().describe("Item ID.").optional(), "method_title": z.string().describe("Shipping method name.").optional(), "method_id": z.string().describe("Shipping method ID.").optional(), "instance_id": z.string().describe("Shipping instance ID.").optional(), "total": z.string().describe("Line total (after discounts).").optional(), "total_tax": z.string().describe("Line total tax (after discounts).").optional(), "taxes": z.array(z.object({ "id": z.number().int().describe("Tax rate ID.").optional(), "total": z.string().describe("Tax total.").optional() })).describe("Line taxes.").optional(), "meta_data": z.array(z.object({ "id": z.number().int().describe("Meta ID.").optional(), "key": z.string().describe("Meta key.").optional(), "value": z.string().describe("Meta value.").optional() })).describe("Meta data.").optional() })).describe("Shipping lines data.").optional(),
  "fee_lines": z.array(z.object({ "id": z.number().int().describe("Item ID.").optional(), "name": z.string().describe("Fee name.").optional(), "tax_class": z.string().describe("Tax class of fee.").optional(), "tax_status": z.enum(["taxable","none"]).describe("Tax status of fee.").optional(), "total": z.string().describe("Line total (after discounts).").optional(), "total_tax": z.string().describe("Line total tax (after discounts).").optional(), "taxes": z.array(z.object({ "id": z.number().int().describe("Tax rate ID.").optional(), "total": z.string().describe("Tax total.").optional(), "subtotal": z.string().describe("Tax subtotal.").optional() })).describe("Line taxes.").optional(), "meta_data": z.array(z.object({ "id": z.number().int().describe("Meta ID.").optional(), "key": z.string().describe("Meta key.").optional(), "value": z.string().describe("Meta value.").optional() })).describe("Meta data.").optional() })).describe("Fee lines data.").optional(),
  "coupon_lines": z.array(z.object({ "id": z.number().int().describe("Item ID.").optional(), "code": z.string().describe("Coupon code.").optional(), "discount": z.string().describe("Discount total.").optional(), "discount_tax": z.string().describe("Discount total tax.").optional(), "meta_data": z.array(z.object({ "id": z.number().int().describe("Meta ID.").optional(), "key": z.string().describe("Meta key.").optional(), "value": z.string().describe("Meta value.").optional() })).describe("Meta data.").optional() })).describe("Coupons line data.").optional(),
  "set_paid": z.boolean().describe("Define if the order is paid. It will set the status to processing and reduce stock items.").optional()
}