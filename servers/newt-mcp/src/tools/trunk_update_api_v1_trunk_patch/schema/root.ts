import { z } from "zod"

export const inputParamsSchema = {
  "name": z.string(),
  "cac": z.union([z.object({ "callLimit": z.union([z.string(), z.number().int()]).optional(), "ingress": z.union([z.object({ "callLimit": z.union([z.number().int(), z.string(), z.null()]).optional() }), z.null()]).optional(), "egress": z.union([z.object({ "callLimit": z.union([z.number().int(), z.string(), z.null()]).optional() }), z.null()]).optional() }), z.null()]).optional(),
  "policy": z.union([z.object({ "media": z.union([z.object({ "packetServiceProfile": z.union([z.string(), z.null()]).optional() }), z.null()]).optional(), "signaling": z.union([z.object({ "ipSignalingProfile": z.union([z.string(), z.null()]).optional() }), z.null()]).optional() }), z.null()]).optional(),
  "signaling": z.union([z.object({ "transportPreference": z.union([z.object({ "preference1": z.union([z.string(), z.null()]).optional(), "preference2": z.union([z.string(), z.null()]).optional(), "preference3": z.union([z.string(), z.null()]).optional(), "preference4": z.union([z.string(), z.null()]).optional() }), z.null()]).optional() }), z.null()]).optional(),
  "services": z.union([z.object({ "natTraversal": z.union([z.object({ "signalingNat": z.union([z.string(), z.null()]).optional(), "mediaNat": z.union([z.string(), z.null()]).optional() }), z.null()]).optional() }), z.null()]).optional(),
  "egressIpPrefix": z.union([z.array(z.object({ "cmds": z.union([z.object({ "operations": z.record(z.string()) }), z.null()]).optional(), "operations": z.union([z.record(z.string()), z.null()]).optional(), "fqdn": z.union([z.string().max(63), z.null()]).describe("FQDN to use for sending egress calls/requests to the IP peer.").optional(), "fqdnPort": z.union([z.number().int().gte(0).lte(65535), z.null()]).describe("Port number for FQDN."), "ipAddress": z.union([z.string(), z.null()]).describe("IP address of the IP peer."), "ipPort": z.union([z.number().int().gte(0).lte(65535), z.null()]).describe("TCP/UDP port for the IP peer."), "sequence": z.number().int().gte(0).lte(32000).describe("Sequence."), "serviceStatus": z.union([z.enum(["inService","outOfService"]), z.null()]).describe("Select In Service to use this Ip peer.") }).catchall(z.any()).describe("Specifies the IP Signaling Peer Group configuration details.")), z.null()]).optional(),
  "ingressIpPrefix": z.union([z.array(z.object({ "ipAddress": z.string(), "prefixLength": z.number().int() })), z.null()]).optional()
}