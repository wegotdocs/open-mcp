{
  "type": "object",
  "properties": {
    "rules": {
      "description": "Policy rules",
      "type": "array",
      "items": {
        "type": "object",
        "description": "Policy rule which is enforced on transactions",
        "properties": {
          "operators": {
            "type": "object",
            "description": "Defines users/groups who can initiate the type of transaction to which the rule applies.",
            "properties": {
              "wildcard": {
                "type": "string",
                "enum": [
                  "*"
                ],
                "description": "If used then this property should appear as the only child property\n* \"*\" - All users are allowed\n"
              },
              "users": {
                "type": "array",
                "description": "Set of users ids",
                "items": {
                  "type": "string"
                }
              },
              "usersGroups": {
                "type": "array",
                "description": "Set of group ids",
                "items": {
                  "type": "string"
                }
              },
              "services": {
                "type": "array",
                "description": "set of services to initiate transactions",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "transactionType": {
            "type": "string",
            "enum": [
              "TRANSFER",
              "CONTRACT_CALL",
              "PROGRAM_CALL",
              "APPROVE",
              "MINT",
              "BURN",
              "SUPPLY",
              "REDEEM",
              "STAKE",
              "RAW",
              "TYPED_MESSAGE"
            ],
            "description": "Defines the type of transaction to which the rule applies.\n  * TRANSFER - Default. Transfers funds from one account to another\n  * CONTRACT_CALL - Calls a smart contract, mainly for DeFi operations.\n  * PROGRAM_CALL - Calls a smart contract for web3 operations on the Solana blockchain. \n  * APPROVE - Allows a smart contract to withdraw from a designated wallet.\n  * MINT - Perform a mint operation (increase supply) on a supported token\n  * BURN - Perform a burn operation (reduce supply) on a supported token\n  * SUPPLY - Use for DeFi to lend assets\n  * REDEEM - Use for DeFi to get lending back\n  * STAKE - Allows you to allocate and lock certain assets for earning staking rewards.\n  * RAW - An off-chain message with no predefined format, use it to sign any message with your private key.\n  * TYPED_MESSAGE - An off-chain message type that follows a predefined format, used to sign specific messages that are not actual transactions.\n"
          },
          "designatedSigners": {
            "type": "object",
            "description": "Set of ids representing the users who signs transactions that match a specific rule",
            "properties": {
              "users": {
                "type": "array",
                "description": "Set of users ids",
                "items": {
                  "type": "string"
                }
              },
              "usersGroups": {
                "type": "array",
                "description": "Set of group ids",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "type": {
            "type": "string",
            "description": "Policy rule type",
            "enum": [
              "TRANSFER"
            ]
          },
          "action": {
            "type": "string",
            "enum": [
              "ALLOW",
              "BLOCK",
              "2-TIER"
            ],
            "description": "Defines what occurs when a transaction meets the rule's criteria\n* ALLOW - The transaction goes through and can be signed without requiring additional approvals\n* BLOCK - The transaction is automatically blocked\n* 2-TIER - Only these users or user groups can approve \n           If any of them reject the transaction before the required approval threshold is met, the transaction doesn't go through\n           The list of entities are set is \"authorizationGroups\" field\n"
          },
          "asset": {
            "type": "string",
            "description": "Defines the type of asset being transacted, options are\n* \"*\" - All assets\n* Specific asset\n"
          },
          "src": {
            "type": "object",
            "description": "Defines source accounts the rule allows transfers to originate from",
            "properties": {
              "ids": {
                "type": "array",
                "description": "A set of ids in a tuple format",
                "items": {
                  "type": "array",
                  "description": "Defines source or destination component, options are:\n* id only\n* id and type - first item in the array MUST be id.\n* id, type and subtype - first item in the array MUST be id and second item MUST be type.\n",
                  "items": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Defines the account id, options are\n* \"*\" - All accounts\n* Specific account id\n"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "EXCHANGE",
                          "UNMANAGED",
                          "VAULT",
                          "NETWORK_CONNECTION",
                          "COMPOUND",
                          "FIAT_ACCOUNT",
                          "ONE_TIME_ADDRESS",
                          "*"
                        ],
                        "description": "* EXCHANGE - A third-party exchange account connected to your workspace\n* UNMANAGED - A unmanaged wallet outside of Fireblocks workspace\n* VAULT - An account in your Fireblocks Vault\n* NETWORK_CONNECTION - A connection in your Fireblocks network\n* COMPOUND - (deprecated) An asset retrieved by using the Compound DeFI protocol\n* FIAT_ACCOUNT - A third-party fiat account connected to your workspace\n* ONE_TIME_ADDRESS - A non-whitelisted asset from your Fireblocks Workspace\n* \"*\" - All types\n"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "EXTERNAL",
                          "INTERNAL",
                          "CONTRACT",
                          "EXCHANGETEST",
                          "*"
                        ],
                        "description": "* EXTERNAL - A whitelisted wallet assigned as external is typically used for addresses managed by your clients and counterparties\n* INTERNAL - A whitelisted wallet assigned as internal, is typically used for addresses that you control outside of your Fireblocks workspace\n* CONTRACT - A whitelisted wallet assigned as contract is for identifying and managing external smart contracts\n* EXCHANGETEST - Exchanges which operate only on testnet assets\n* \"*\" - All subtypes\n"
                      }
                    ]
                  },
                  "minItems": 1,
                  "maxItems": 3
                }
              }
            }
          },
          "dst": {
            "type": "object",
            "description": "Defines the destination accounts the rule allows transfers to",
            "properties": {
              "ids": {
                "type": "array",
                "description": "A set of ids in a tuple format",
                "items": {
                  "type": "array",
                  "description": "Defines source or destination component, options are:\n* id only\n* id and type - first item in the array MUST be id.\n* id, type and subtype - first item in the array MUST be id and second item MUST be type.\n",
                  "items": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Defines the account id, options are\n* \"*\" - All accounts\n* Specific account id\n"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "EXCHANGE",
                          "UNMANAGED",
                          "VAULT",
                          "NETWORK_CONNECTION",
                          "COMPOUND",
                          "FIAT_ACCOUNT",
                          "ONE_TIME_ADDRESS",
                          "*"
                        ],
                        "description": "* EXCHANGE - A third-party exchange account connected to your workspace\n* UNMANAGED - A unmanaged wallet outside of Fireblocks workspace\n* VAULT - An account in your Fireblocks Vault\n* NETWORK_CONNECTION - A connection in your Fireblocks network\n* COMPOUND - (deprecated) An asset retrieved by using the Compound DeFI protocol\n* FIAT_ACCOUNT - A third-party fiat account connected to your workspace\n* ONE_TIME_ADDRESS - A non-whitelisted asset from your Fireblocks Workspace\n* \"*\" - All types\n"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "EXTERNAL",
                          "INTERNAL",
                          "CONTRACT",
                          "EXCHANGETEST",
                          "*"
                        ],
                        "description": "* EXTERNAL - A whitelisted wallet assigned as external is typically used for addresses managed by your clients and counterparties\n* INTERNAL - A whitelisted wallet assigned as internal, is typically used for addresses that you control outside of your Fireblocks workspace\n* CONTRACT - A whitelisted wallet assigned as contract is for identifying and managing external smart contracts\n* EXCHANGETEST - Exchanges which operate only on testnet assets\n* \"*\" - All subtypes\n"
                      }
                    ]
                  },
                  "minItems": 1,
                  "maxItems": 3
                }
              }
            }
          },
          "dstAddressType": {
            "type": "string",
            "enum": [
              "WHITELISTED",
              "ONE_TIME",
              "*"
            ],
            "description": "Defines whether the destination to which you are sending funds must be whitelisted, to allow one-time transfers to non-whitelisted external addresses, or both.\nBy default, you can only transfer to an external address after it’s whitelisted.\n  * WHITELISTED - Can only be sent to whitelisted addresses.\n  * ONE_TIME - Can only be sent to non-whitelisted external addresses.\n  * \"*\" - can be sent to whitelisted addresses or non-whitelisted external\n"
          },
          "amountCurrency": {
            "type": "string",
            "enum": [
              "USD",
              "EUR",
              "NATIVE"
            ],
            "description": "* USD - Limits the amount of any asset users can transfer based on the USD equivalent of the asset.\n* EUR - Limits the amount of any asset users can transfer based on the EURO equivalent of the asset.\n* NATIVE - Limits the amount of an asset a user can transfer when using a specific asset.\n"
          },
          "amountScope": {
            "type": "string",
            "enum": [
              "SINGLE_TX",
              "TIMEFRAME"
            ],
            "description": "* SINGLE_TX - limit applies to a single transaction\n* TIMEFRAME - limit applies to all transactions within the defined time period\n"
          },
          "amount": {
            "description": "Defines the value a transaction must exceed for the rule to apply to it (according to the amountCurrency field)",
            "anyOf": [
              {
                "type": "string",
                "description": "Numeric string (recommended)"
              },
              {
                "type": "number",
                "description": "Number (deprecated)"
              }
            ]
          },
          "periodSec": {
            "type": "number",
            "description": "Time period in seconds applied by the amountScope field to accumulate transferred amounts in transactions that match the rule, until the total exceeds the value you specify under Minimum.\nWhen the specified amount is reached within that period, whether by one or many transactions, further transactions in that period either fail or require more approvals.\n"
          },
          "authorizationGroups": {
            "type": "object",
            "description": "Defines the transaction approval terms",
            "properties": {
              "logic": {
                "type": "string",
                "enum": [
                  "AND",
                  "OR"
                ],
                "description": "* AND - requires approval of all authorization groups\n* OR - requires approval of at least one of the authorization groups\n"
              },
              "allowOperatorAsAuthorizer": {
                "type": "boolean",
                "description": "Defines whether the user who initiates a transaction can approve their own transaction and count toward the approval threshold for their transaction"
              },
              "groups": {
                "type": "array",
                "description": "Groups of entities which can approve the transaction",
                "items": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "description": "User ids",
                      "items": {
                        "type": "string"
                      }
                    },
                    "usersGroups": {
                      "type": "array",
                      "description": "Group ids",
                      "items": {
                        "type": "string"
                      }
                    },
                    "th": {
                      "type": "number",
                      "description": "Represents the min amount of entities which are required to approve the transaction, default is 1."
                    }
                  }
                }
              }
            }
          },
          "amountAggregation": {
            "type": "object",
            "description": "Defines the method by which the Policy Engine calculates accumulation.\nIt uses the Initiator, Source, and Destination to calculate accumulation toward the value under Minimum, for the time under Time Period.\n",
            "properties": {
              "operators": {
                "type": "string",
                "enum": [
                  "PER_SINGLE_MATCH",
                  "ACROSS_ALL_MATCHES"
                ],
                "description": "* PER_SINGLE_MATCH - Apply the limit to each listed entity\n* ACROSS_ALL_MATCHES - Apply the limit to the sum of all listed entities\n"
              },
              "srcTransferPeers": {
                "type": "string",
                "enum": [
                  "PER_SINGLE_MATCH",
                  "ACROSS_ALL_MATCHES"
                ],
                "description": "* PER_SINGLE_MATCH - Apply the limit to each listed entity\n* ACROSS_ALL_MATCHES - Apply the limit to the sum of all listed entities\n"
              },
              "dstTransferPeers": {
                "type": "string",
                "enum": [
                  "PER_SINGLE_MATCH",
                  "ACROSS_ALL_MATCHES"
                ],
                "description": "* PER_SINGLE_MATCH - Apply the limit to each listed entity\n* ACROSS_ALL_MATCHES - Apply the limit to the sum of all listed entities\n"
              }
            }
          },
          "rawMessageSigning": {
            "type": "object",
            "description": "Raw message signing configuration",
            "properties": {
              "algorithm": {
                "type": "string"
              },
              "derivationPath": {
                "type": "object",
                "properties": {
                  "path": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "applyForApprove": {
            "type": "boolean",
            "description": "Applying this rule over APPROVE type transactions (can only be enabled when rule's transaction type is TRANSFER)"
          },
          "applyForTypedMessage": {
            "type": "boolean",
            "description": "Applying this rule over TYPED_MESSAGE type transactions (can only be enabled when rule's transaction type is CONTRACT_CALL)"
          },
          "externalDescriptor": {
            "type": "string",
            "description": "A unique id identifying the rule"
          }
        },
        "required": [
          "type",
          "action",
          "asset",
          "amountCurrency",
          "amountScope",
          "amount",
          "periodSec"
        ]
      }
    },
    "Idempotency-Key": {
      "description": "A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.",
      "type": "string",
      "example": "some-unique-id"
    }
  },
  "required": []
}