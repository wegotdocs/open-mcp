import { z } from "zod"

export const inputParamsSchema = {
  "vaultAccountId": z.string().describe("The id of the vault account that initiated the request to issue the token"),
  "createParams": z.object({ "contractId": z.string().describe("The id of the contract template that will be used to create the token"), "deployFunctionParams": z.array(z.object({ "name": z.string().describe("The name of the parameter as it appears in the ABI"), "description": z.string().describe("A description of the parameter, fetched from the devdoc of this contract").optional(), "internalType": z.string().describe("The  internal type of the parameter as it appears in the ABI").optional(), "type": z.string().describe("The type of the parameter as it appears in the ABI"), "components": z.array(z.object({ "name": z.string().describe("The name of the parameter as it appears in the ABI"), "description": z.string().describe("A description of the parameter, fetched from the devdoc of this contract").optional(), "internalType": z.string().describe("The internal type of the parameter as it appears in the ABI").optional(), "type": z.string().describe("The type of the parameter as it appears in the ABI"), "components": z.array(z.object({ "name": z.string().describe("The name of the parameter as it appears in the ABI"), "description": z.string().describe("A description of the parameter, fetched from the devdoc of this contract").optional(), "internalType": z.string().describe("The internal type of the parameter as it appears in the ABI").optional(), "type": z.string().describe("The type of the parameter as it appears in the ABI"), "components": z.array(z.object({ "name": z.string().describe("The name of the parameter as it appears in the ABI"), "description": z.string().describe("A description of the parameter, fetched from the devdoc of this contract").optional(), "internalType": z.string().describe("The internal type of the parameter as it appears in the ABI").optional(), "type": z.string().describe("The type of the parameter as it appears in the ABI"), "components": z.array(z.object({ "name": z.string().describe("The name of the parameter as it appears in the ABI"), "description": z.string().describe("A description of the parameter, fetched from the devdoc of this contract").optional(), "internalType": z.string().describe("The internal type of the parameter as it appears in the ABI").optional(), "type": z.string().describe("The type of the parameter as it appears in the ABI"), "components": z.array(z.object({ "name": z.string().describe("The name of the parameter as it appears in the ABI"), "description": z.string().describe("A description of the parameter, fetched from the devdoc of this contract").optional(), "internalType": z.string().describe("The internal type of the parameter as it appears in the ABI").optional(), "type": z.string().describe("The type of the parameter as it appears in the ABI"), "components": z.array(z.object({ "name": z.string().describe("The name of the parameter as it appears in the ABI"), "description": z.string().describe("A description of the parameter, fetched from the devdoc of this contract").optional(), "internalType": z.string().describe("The internal type of the parameter as it appears in the ABI").optional(), "type": z.string().describe("The type of the parameter as it appears in the ABI"), "components": z.array(z.object({ "name": z.string(), "description": z.string().optional(), "internalType": z.string().optional(), "type": z.string(), "components": z.string().optional() })).optional() })).optional() })).optional() })).optional() })).optional() })).optional() })).optional(), "value": z.string().describe("The value of the parameter. can also be ParameterWithValue").optional(), "functionValue": z.string().optional() })).describe("The deploy function parameters and values of the contract template").optional() }),
  "salt": z.string().describe("The salt to calculate the deterministic address. Must be a number between 0 and 2^256 -1, for it to fit in the bytes32 parameter.").optional(),
  "chains": z.array(z.string()).describe("The base asset identifiers of the blockchains (legacyId) to calculate deterministic addresses"),
  "displayName": z.string().optional(),
  "useGasless": z.boolean().describe("Indicates whether the token should be created in a gasless manner, utilizing the ERC-2771 standard. When set to true, the transaction will be relayed by a designated relayer. The workspace must be configured to use Fireblocks gasless relay.").optional(),
  "fee": z.string().describe("Max fee amount for the write function transaction. interchangeable with the 'feeLevel' field").optional(),
  "feeLevel": z.enum(["LOW","MEDIUM","HIGH"]).describe("Fee level for the write function transaction. interchangeable with the 'fee' field").optional(),
  "Idempotency-Key": z.string().describe("A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.").optional()
}