import { z } from "zod"

export const inputParamsSchema = {
  "originatorPersons": z.array(z.object({ "naturalPerson": z.object({ "name": z.array(z.object({ "nameIdentifier": z.array(z.object({ "primaryIdentifier": z.string().describe("The primary identifier of the name. The value must be encrypted.").optional(), "secondaryIdentifier": z.string().describe("The secondary identifier of the name. The value must be encrypted.").optional(), "nameIdentifierType": z.string().describe("The type of the name identifier. The value must be encrypted. The value must be one of the following: [LEGL, DBA, TRAD, NICK, ALIA, MAID, FORM, PREV, BORN, OTHR].").optional() })).optional(), "localNameIdentifier": z.array(z.object({ "primaryIdentifier": z.string().describe("The primary identifier of the name. The value must be encrypted.").optional(), "secondaryIdentifier": z.string().describe("The secondary identifier of the name. The value must be encrypted.").optional(), "nameIdentifierType": z.string().describe("The type of the name identifier. The value must be encrypted. The value must be one of the following: [LEGL, DBA, TRAD, NICK, ALIA, MAID, FORM, PREV, BORN, OTHR].").optional() })).optional(), "phoneticNameIdentifier": z.array(z.object({ "primaryIdentifier": z.string().describe("The primary identifier of the name. The value must be encrypted.").optional(), "secondaryIdentifier": z.string().describe("The secondary identifier of the name. The value must be encrypted.").optional(), "nameIdentifierType": z.string().describe("The type of the name identifier. The value must be encrypted. The value must be one of the following: [LEGL, DBA, TRAD, NICK, ALIA, MAID, FORM, PREV, BORN, OTHR].").optional() })).optional() })).describe("An array of structured name identifiers for the natural person, referencing the TravelRuleNaturalPersonNameIdentifier schema.").optional(), "geographicAddress": z.array(z.object({ "streetName": z.string().describe("Name of a street or thoroughfare. The value must be encrypted.").optional(), "townName": z.string().describe("Name of a built-up area, with defined boundaries, and a local government. The value must be encrypted.").optional(), "country": z.string().describe("Nation with its own government (ISO-3166 Alpha-2 country code). The value must be encrypted.").optional(), "buildingNumber": z.string().describe("Number that identifies the position of a building on a street. The value must be encrypted.").optional(), "postCode": z.string().describe("Identifier consisting of a group of letters and/or numbers added to a postal address to assist the sorting of mail. The value must be encrypted.").optional(), "addressType": z.string().describe("Specifies the type of address. Acceptable values are: - 'HOME': Residential, the home address - 'BIZZ': Business, the business address - 'GEOG': Geographic, an unspecified physical (geographical) address The value must be encrypted.").optional(), "department": z.string().describe("Identification of a division of a large organisation or building. The value must be encrypted.").optional(), "subDepartment": z.string().describe("Identification of a sub-division of a large organisation or building. The value must be encrypted.").optional(), "buildingName": z.string().describe("Name of the building or house. The value must be encrypted.").optional(), "floor": z.string().describe("Floor or storey within a building. The value must be encrypted.").optional(), "postBox": z.string().describe("Numbered box in a post office. The value must be encrypted.").optional(), "room": z.string().describe("Building room number. The value must be encrypted.").optional(), "townLocationName": z.string().describe("Specific location name within the town. The value must be encrypted.").optional(), "districtName": z.string().describe("Identifies a subdivision within a country subdivision. The value must be encrypted.").optional(), "countrySubDivision": z.string().describe("Identifies a subdivision of a country such as state, region, or province. The value must be encrypted.").optional(), "addressLine": z.array(z.string()).describe("Information that locates and identifies a specific address, presented in free format text. Each item must be encrypted.").optional() })).describe("An array of geographic addresses associated with the natural person, referencing the TravelRuleGeographicAddress schema.").optional(), "nationalIdentification": z.object({ "countryOfIssue": z.string().describe("Country that issued the national identifier (ISO-3166 Alpha-2 country code). The value must be encrypted.").optional(), "nationalIdentifier": z.string().describe("National identifier (max 35 characters). The value must be encrypted.").optional(), "nationalIdentifierType": z.string().describe("Type of national identifier. Acceptable values include: - 'PASSPORT': Passport number - 'NATIONAL_ID': National identification number - 'TAX_ID': Tax identification number - 'SOCIAL_SECURITY': Social security number The value must be encrypted.").optional(), "registrationAuthority": z.string().describe("Registration authority (format -> RA followed by 6 digits). The value must be encrypted.").optional() }).describe("Represents a national identifier for a person or entity").optional(), "dateAndPlaceOfBirth": z.object({ "dateOfBirth": z.string().describe("Date of birth. The value must be encrypted.").optional(), "placeOfBirth": z.string().describe("Place of birth. The value must be encrypted.").optional() }).describe("Represents the date and place of birth for a natural person").optional(), "customerIdentification": z.string().describe("A unique identifier for the customer within the organization's context. The value must be encrypted.").optional(), "countryOfResidence": z.string().describe("The ISO-3166 Alpha-2 country code of the natural person's residence. The value must be encrypted.").optional(), "customerNumber": z.string().describe("A distinct identifier that uniquely identifies the customer within the organization. The value must be encrypted.").optional() }).optional(), "legalPerson": z.object({ "name": z.object({ "legalPersonName": z.string().describe("Name by which the legal person is known. The value must be encrypted.").optional(), "legalPersonNameIdentifierType": z.string().describe("Specifies the type of name for a legal person. Acceptable values are: - 'REGISTERED': The official registered name. - 'TRADE': A trading name or DBA (Doing Business As) name. - 'OTHER': Any other type of name. The value must be encrypted.").optional() }).optional(), "geographicAddress": z.array(z.object({ "streetName": z.string().describe("Name of a street or thoroughfare. The value must be encrypted.").optional(), "townName": z.string().describe("Name of a built-up area, with defined boundaries, and a local government. The value must be encrypted.").optional(), "country": z.string().describe("Nation with its own government (ISO-3166 Alpha-2 country code). The value must be encrypted.").optional(), "buildingNumber": z.string().describe("Number that identifies the position of a building on a street. The value must be encrypted.").optional(), "postCode": z.string().describe("Identifier consisting of a group of letters and/or numbers added to a postal address to assist the sorting of mail. The value must be encrypted.").optional(), "addressType": z.string().describe("Specifies the type of address. Acceptable values are: - 'HOME': Residential, the home address - 'BIZZ': Business, the business address - 'GEOG': Geographic, an unspecified physical (geographical) address The value must be encrypted.").optional(), "department": z.string().describe("Identification of a division of a large organisation or building. The value must be encrypted.").optional(), "subDepartment": z.string().describe("Identification of a sub-division of a large organisation or building. The value must be encrypted.").optional(), "buildingName": z.string().describe("Name of the building or house. The value must be encrypted.").optional(), "floor": z.string().describe("Floor or storey within a building. The value must be encrypted.").optional(), "postBox": z.string().describe("Numbered box in a post office. The value must be encrypted.").optional(), "room": z.string().describe("Building room number. The value must be encrypted.").optional(), "townLocationName": z.string().describe("Specific location name within the town. The value must be encrypted.").optional(), "districtName": z.string().describe("Identifies a subdivision within a country subdivision. The value must be encrypted.").optional(), "countrySubDivision": z.string().describe("Identifies a subdivision of a country such as state, region, or province. The value must be encrypted.").optional(), "addressLine": z.array(z.string()).describe("Information that locates and identifies a specific address, presented in free format text. Each item must be encrypted.").optional() })).describe("The array of geographic addresses associated with the legal person.").optional(), "nationalIdentification": z.object({ "countryOfIssue": z.string().describe("Country that issued the national identifier (ISO-3166 Alpha-2 country code). The value must be encrypted.").optional(), "nationalIdentifier": z.string().describe("National identifier (max 35 characters). The value must be encrypted.").optional(), "nationalIdentifierType": z.string().describe("Type of national identifier. Acceptable values include: - 'PASSPORT': Passport number - 'NATIONAL_ID': National identification number - 'TAX_ID': Tax identification number - 'SOCIAL_SECURITY': Social security number The value must be encrypted.").optional(), "registrationAuthority": z.string().describe("Registration authority (format -> RA followed by 6 digits). The value must be encrypted.").optional() }).describe("Represents a national identifier for a person or entity").optional(), "customerIdentification": z.string().describe("A unique identifier that identifies the customer in the organization's context. The value must be encrypted.").optional(), "customerNumber": z.string().describe("A distinct identifier that uniquely identifies the customer within the organization. The value must be encrypted.").optional(), "countryOfRegistration": z.string().describe("The ISO-3166 Alpha-2 country code where the legal person is registered. The value must be encrypted.").optional() }).optional() })).describe("Information about the originator of the transaction").optional(),
  "beneficiaryPersons": z.array(z.object({ "naturalPerson": z.object({ "name": z.array(z.object({ "nameIdentifier": z.array(z.object({ "primaryIdentifier": z.string().describe("The primary identifier of the name. The value must be encrypted.").optional(), "secondaryIdentifier": z.string().describe("The secondary identifier of the name. The value must be encrypted.").optional(), "nameIdentifierType": z.string().describe("The type of the name identifier. The value must be encrypted. The value must be one of the following: [LEGL, DBA, TRAD, NICK, ALIA, MAID, FORM, PREV, BORN, OTHR].").optional() })).optional(), "localNameIdentifier": z.array(z.object({ "primaryIdentifier": z.string().describe("The primary identifier of the name. The value must be encrypted.").optional(), "secondaryIdentifier": z.string().describe("The secondary identifier of the name. The value must be encrypted.").optional(), "nameIdentifierType": z.string().describe("The type of the name identifier. The value must be encrypted. The value must be one of the following: [LEGL, DBA, TRAD, NICK, ALIA, MAID, FORM, PREV, BORN, OTHR].").optional() })).optional(), "phoneticNameIdentifier": z.array(z.object({ "primaryIdentifier": z.string().describe("The primary identifier of the name. The value must be encrypted.").optional(), "secondaryIdentifier": z.string().describe("The secondary identifier of the name. The value must be encrypted.").optional(), "nameIdentifierType": z.string().describe("The type of the name identifier. The value must be encrypted. The value must be one of the following: [LEGL, DBA, TRAD, NICK, ALIA, MAID, FORM, PREV, BORN, OTHR].").optional() })).optional() })).describe("An array of structured name identifiers for the natural person, referencing the TravelRuleNaturalPersonNameIdentifier schema.").optional(), "geographicAddress": z.array(z.object({ "streetName": z.string().describe("Name of a street or thoroughfare. The value must be encrypted.").optional(), "townName": z.string().describe("Name of a built-up area, with defined boundaries, and a local government. The value must be encrypted.").optional(), "country": z.string().describe("Nation with its own government (ISO-3166 Alpha-2 country code). The value must be encrypted.").optional(), "buildingNumber": z.string().describe("Number that identifies the position of a building on a street. The value must be encrypted.").optional(), "postCode": z.string().describe("Identifier consisting of a group of letters and/or numbers added to a postal address to assist the sorting of mail. The value must be encrypted.").optional(), "addressType": z.string().describe("Specifies the type of address. Acceptable values are: - 'HOME': Residential, the home address - 'BIZZ': Business, the business address - 'GEOG': Geographic, an unspecified physical (geographical) address The value must be encrypted.").optional(), "department": z.string().describe("Identification of a division of a large organisation or building. The value must be encrypted.").optional(), "subDepartment": z.string().describe("Identification of a sub-division of a large organisation or building. The value must be encrypted.").optional(), "buildingName": z.string().describe("Name of the building or house. The value must be encrypted.").optional(), "floor": z.string().describe("Floor or storey within a building. The value must be encrypted.").optional(), "postBox": z.string().describe("Numbered box in a post office. The value must be encrypted.").optional(), "room": z.string().describe("Building room number. The value must be encrypted.").optional(), "townLocationName": z.string().describe("Specific location name within the town. The value must be encrypted.").optional(), "districtName": z.string().describe("Identifies a subdivision within a country subdivision. The value must be encrypted.").optional(), "countrySubDivision": z.string().describe("Identifies a subdivision of a country such as state, region, or province. The value must be encrypted.").optional(), "addressLine": z.array(z.string()).describe("Information that locates and identifies a specific address, presented in free format text. Each item must be encrypted.").optional() })).describe("An array of geographic addresses associated with the natural person, referencing the TravelRuleGeographicAddress schema.").optional(), "nationalIdentification": z.object({ "countryOfIssue": z.string().describe("Country that issued the national identifier (ISO-3166 Alpha-2 country code). The value must be encrypted.").optional(), "nationalIdentifier": z.string().describe("National identifier (max 35 characters). The value must be encrypted.").optional(), "nationalIdentifierType": z.string().describe("Type of national identifier. Acceptable values include: - 'PASSPORT': Passport number - 'NATIONAL_ID': National identification number - 'TAX_ID': Tax identification number - 'SOCIAL_SECURITY': Social security number The value must be encrypted.").optional(), "registrationAuthority": z.string().describe("Registration authority (format -> RA followed by 6 digits). The value must be encrypted.").optional() }).describe("Represents a national identifier for a person or entity").optional(), "dateAndPlaceOfBirth": z.object({ "dateOfBirth": z.string().describe("Date of birth. The value must be encrypted.").optional(), "placeOfBirth": z.string().describe("Place of birth. The value must be encrypted.").optional() }).describe("Represents the date and place of birth for a natural person").optional(), "customerIdentification": z.string().describe("A unique identifier for the customer within the organization's context. The value must be encrypted.").optional(), "countryOfResidence": z.string().describe("The ISO-3166 Alpha-2 country code of the natural person's residence. The value must be encrypted.").optional(), "customerNumber": z.string().describe("A distinct identifier that uniquely identifies the customer within the organization. The value must be encrypted.").optional() }).optional(), "legalPerson": z.object({ "name": z.object({ "legalPersonName": z.string().describe("Name by which the legal person is known. The value must be encrypted.").optional(), "legalPersonNameIdentifierType": z.string().describe("Specifies the type of name for a legal person. Acceptable values are: - 'REGISTERED': The official registered name. - 'TRADE': A trading name or DBA (Doing Business As) name. - 'OTHER': Any other type of name. The value must be encrypted.").optional() }).optional(), "geographicAddress": z.array(z.object({ "streetName": z.string().describe("Name of a street or thoroughfare. The value must be encrypted.").optional(), "townName": z.string().describe("Name of a built-up area, with defined boundaries, and a local government. The value must be encrypted.").optional(), "country": z.string().describe("Nation with its own government (ISO-3166 Alpha-2 country code). The value must be encrypted.").optional(), "buildingNumber": z.string().describe("Number that identifies the position of a building on a street. The value must be encrypted.").optional(), "postCode": z.string().describe("Identifier consisting of a group of letters and/or numbers added to a postal address to assist the sorting of mail. The value must be encrypted.").optional(), "addressType": z.string().describe("Specifies the type of address. Acceptable values are: - 'HOME': Residential, the home address - 'BIZZ': Business, the business address - 'GEOG': Geographic, an unspecified physical (geographical) address The value must be encrypted.").optional(), "department": z.string().describe("Identification of a division of a large organisation or building. The value must be encrypted.").optional(), "subDepartment": z.string().describe("Identification of a sub-division of a large organisation or building. The value must be encrypted.").optional(), "buildingName": z.string().describe("Name of the building or house. The value must be encrypted.").optional(), "floor": z.string().describe("Floor or storey within a building. The value must be encrypted.").optional(), "postBox": z.string().describe("Numbered box in a post office. The value must be encrypted.").optional(), "room": z.string().describe("Building room number. The value must be encrypted.").optional(), "townLocationName": z.string().describe("Specific location name within the town. The value must be encrypted.").optional(), "districtName": z.string().describe("Identifies a subdivision within a country subdivision. The value must be encrypted.").optional(), "countrySubDivision": z.string().describe("Identifies a subdivision of a country such as state, region, or province. The value must be encrypted.").optional(), "addressLine": z.array(z.string()).describe("Information that locates and identifies a specific address, presented in free format text. Each item must be encrypted.").optional() })).describe("The array of geographic addresses associated with the legal person.").optional(), "nationalIdentification": z.object({ "countryOfIssue": z.string().describe("Country that issued the national identifier (ISO-3166 Alpha-2 country code). The value must be encrypted.").optional(), "nationalIdentifier": z.string().describe("National identifier (max 35 characters). The value must be encrypted.").optional(), "nationalIdentifierType": z.string().describe("Type of national identifier. Acceptable values include: - 'PASSPORT': Passport number - 'NATIONAL_ID': National identification number - 'TAX_ID': Tax identification number - 'SOCIAL_SECURITY': Social security number The value must be encrypted.").optional(), "registrationAuthority": z.string().describe("Registration authority (format -> RA followed by 6 digits). The value must be encrypted.").optional() }).describe("Represents a national identifier for a person or entity").optional(), "customerIdentification": z.string().describe("A unique identifier that identifies the customer in the organization's context. The value must be encrypted.").optional(), "customerNumber": z.string().describe("A distinct identifier that uniquely identifies the customer within the organization. The value must be encrypted.").optional(), "countryOfRegistration": z.string().describe("The ISO-3166 Alpha-2 country code where the legal person is registered. The value must be encrypted.").optional() }).optional() })).describe("Information about the beneficiary of the transaction").optional(),
  "accountNumber": z.array(z.string()).describe("Beneficiary account number. The value must be encrypted.").optional()
}