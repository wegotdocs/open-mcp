import { z } from "zod"

export const inputParamsSchema = {
  "nodeControls": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `nodeControls` to the tool, first call the tool `expandSchema` with \"/properties/extraParameters/properties/nodeControls\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Configure special node requirements. \nFor routing transactions to a custom node please set the `type` to `NODE_ROUTER` and the `tag` to the pre-configured tag value.\nFor MEV protection, set only the `type` property to `MEV` (`tag` is not required at this stage)\n\n* Note: This is a premium feature that should be enabled in your workspace.\n  Please contract your Customer Success Manager/Fireblocks Support for more info.\n</property-description>").optional(),
  "rawMessageData": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `rawMessageData` to the tool, first call the tool `expandSchema` with \"/properties/extraParameters/properties/rawMessageData\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Object containing messages for raw signing and the algorithm to be used.</property-description>").optional(),
  "contractCallData": z.string().describe("Hex encoded contract call data as a string.").optional(),
  "programCallData": z.string().describe("BASE64 encoded Solana unsigned serialized transaction object.").optional(),
  "inputsSelection": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `inputsSelection` to the tool, first call the tool `expandSchema` with \"/properties/extraParameters/properties/inputsSelection\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>For UTXO based blockchains, selections of inputs for the transaction.</property-description>").optional()
}