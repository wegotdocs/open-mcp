import { z } from "zod"

export const inputParamsSchema = {
  "originatorPersons": z.array(z.object({ "naturalPerson": z.object({ "name": z.array(z.object({ "nameIdentifier": z.array(z.object({ "primaryIdentifier": z.string().describe("The primary identifier of the name").optional(), "secondaryIdentifier": z.string().describe("The secondary identifier of the name").optional(), "nameIdentifierType": z.enum(["ALIA","BIRT","MAID","LEGL","MISC"]).describe("Specifies the type of name for a natural person. Acceptable values are: - 'ALIA': Alias name, a name other than the legal name by which a natural person is also known. - 'BIRT': Name at birth, the name given to a natural person at birth. - 'MAID': Maiden name, the original name of a natural person who has changed their name after marriage. - 'LEGL': Legal name, the name that identifies a natural person for legal, official, or administrative purposes. - 'MISC': Unspecified, a name by which a natural person may be known but cannot otherwise be categorized.").optional() })).optional(), "localNameIdentifier": z.array(z.object({ "primaryIdentifier": z.string().describe("The primary identifier of the name").optional(), "secondaryIdentifier": z.string().describe("The secondary identifier of the name").optional(), "nameIdentifierType": z.enum(["ALIA","BIRT","MAID","LEGL","MISC"]).describe("Specifies the type of name for a natural person. Acceptable values are: - 'ALIA': Alias name, a name other than the legal name by which a natural person is also known. - 'BIRT': Name at birth, the name given to a natural person at birth. - 'MAID': Maiden name, the original name of a natural person who has changed their name after marriage. - 'LEGL': Legal name, the name that identifies a natural person for legal, official, or administrative purposes. - 'MISC': Unspecified, a name by which a natural person may be known but cannot otherwise be categorized.").optional() })).optional(), "phoneticNameIdentifier": z.array(z.object({ "primaryIdentifier": z.string().describe("The primary identifier of the name").optional(), "secondaryIdentifier": z.string().describe("The secondary identifier of the name").optional(), "nameIdentifierType": z.enum(["ALIA","BIRT","MAID","LEGL","MISC"]).describe("Specifies the type of name for a natural person. Acceptable values are: - 'ALIA': Alias name, a name other than the legal name by which a natural person is also known. - 'BIRT': Name at birth, the name given to a natural person at birth. - 'MAID': Maiden name, the original name of a natural person who has changed their name after marriage. - 'LEGL': Legal name, the name that identifies a natural person for legal, official, or administrative purposes. - 'MISC': Unspecified, a name by which a natural person may be known but cannot otherwise be categorized.").optional() })).optional() })).describe("An array of structured name identifiers for the natural person, referencing the TravelRuleNaturalPersonNameIdentifier schema.").optional(), "geographicAddress": z.array(z.object({ "streetName": z.string().describe("Name of a street or thoroughfare").optional(), "townName": z.string().describe("Name of a built-up area, with defined boundaries, and a local government").optional(), "country": z.string().describe("Nation with its own government (ISO-3166 Alpha-2 country code)").optional(), "buildingNumber": z.string().describe("Number that identifies the position of a building on a street").optional(), "postCode": z.string().describe("Identifier consisting of a group of letters and/or numbers added to a postal address to assist the sorting of mail").optional(), "addressType": z.enum(["HOME","BIZZ","GEOG"]).describe("Specifies the type of address. Acceptable values are: - 'HOME': Residential, the home address - 'BIZZ': Business, the business address - 'GEOG': Geographic, an unspecified physical (geographical) address").optional(), "department": z.string().describe("Identification of a division of a large organisation or building").optional(), "subDepartment": z.string().describe("Identification of a sub-division of a large organisation or building").optional(), "buildingName": z.string().describe("Name of the building or house").optional(), "floor": z.string().describe("Floor or storey within a building").optional(), "postBox": z.string().describe("Numbered box in a post office").optional(), "room": z.string().describe("Building room number").optional(), "townLocationName": z.string().describe("Specific location name within the town").optional(), "districtName": z.string().describe("Identifies a subdivision within a country subdivision").optional(), "countrySubDivision": z.string().describe("Identifies a subdivision of a country such as state, region, or province").optional(), "addressLine": z.array(z.string()).describe("Information that locates and identifies a specific address, presented in free format text").optional() })).describe("An array of geographic addresses associated with the natural person, referencing the TravelRuleGeographicAddress schema.").optional(), "nationalIdentification": z.object({ "countryOfIssue": z.string().describe("Country that issued the national identifier (ISO-3166 Alpha-2 country code)").optional(), "nationalIdentifier": z.string().max(35).describe("National identifier (max 35 characters)").optional(), "nationalIdentifierType": z.enum(["PASSPORT","NATIONAL_ID","TAX_ID","SOCIAL_SECURITY"]).describe("Type of national identifier. Acceptable values include: - 'PASSPORT': Passport number - 'NATIONAL_ID': National identification number - 'TAX_ID': Tax identification number - 'SOCIAL_SECURITY': Social security number").optional(), "registrationAuthority": z.string().regex(new RegExp("^RA\\d{6}$")).describe("Registration authority (format -> RA followed by 6 digits)").optional() }).describe("Represents a national identifier for a person or entity").optional(), "dateAndPlaceOfBirth": z.object({ "dateOfBirth": z.string().describe("Date of birth in ISO 8601 format (YYYY-MM-DD)").optional(), "placeOfBirth": z.string().describe("Place of birth").optional() }).describe("Represents the date and place of birth for a natural person").optional(), "customerIdentification": z.string().describe("A unique identifier for the customer within the organization's context.").optional(), "countryOfResidence": z.string().describe("The ISO-3166 Alpha-2 country code of the natural person's residence.").optional(), "customerNumber": z.string().describe("A distinct identifier that uniquely identifies the customer within the organization.").optional() }).optional(), "legalPerson": z.object({ "name": z.object({ "legalPersonName": z.string().max(100).describe("Name by which the legal person is known.").optional(), "legalPersonNameIdentifierType": z.enum(["REGISTERED","TRADE","OTHER"]).describe("Specifies the type of name for a legal person. Acceptable values are: - 'REGISTERED': The official registered name. - 'TRADE': A trading name or DBA (Doing Business As) name. - 'OTHER': Any other type of name.").optional() }).optional(), "geographicAddress": z.array(z.object({ "streetName": z.string().describe("Name of a street or thoroughfare").optional(), "townName": z.string().describe("Name of a built-up area, with defined boundaries, and a local government").optional(), "country": z.string().describe("Nation with its own government (ISO-3166 Alpha-2 country code)").optional(), "buildingNumber": z.string().describe("Number that identifies the position of a building on a street").optional(), "postCode": z.string().describe("Identifier consisting of a group of letters and/or numbers added to a postal address to assist the sorting of mail").optional(), "addressType": z.enum(["HOME","BIZZ","GEOG"]).describe("Specifies the type of address. Acceptable values are: - 'HOME': Residential, the home address - 'BIZZ': Business, the business address - 'GEOG': Geographic, an unspecified physical (geographical) address").optional(), "department": z.string().describe("Identification of a division of a large organisation or building").optional(), "subDepartment": z.string().describe("Identification of a sub-division of a large organisation or building").optional(), "buildingName": z.string().describe("Name of the building or house").optional(), "floor": z.string().describe("Floor or storey within a building").optional(), "postBox": z.string().describe("Numbered box in a post office").optional(), "room": z.string().describe("Building room number").optional(), "townLocationName": z.string().describe("Specific location name within the town").optional(), "districtName": z.string().describe("Identifies a subdivision within a country subdivision").optional(), "countrySubDivision": z.string().describe("Identifies a subdivision of a country such as state, region, or province").optional(), "addressLine": z.array(z.string()).describe("Information that locates and identifies a specific address, presented in free format text").optional() })).describe("The array of geographic addresses associated with the legal person.").optional(), "nationalIdentification": z.object({ "countryOfIssue": z.string().describe("Country that issued the national identifier (ISO-3166 Alpha-2 country code)").optional(), "nationalIdentifier": z.string().max(35).describe("National identifier (max 35 characters)").optional(), "nationalIdentifierType": z.enum(["PASSPORT","NATIONAL_ID","TAX_ID","SOCIAL_SECURITY"]).describe("Type of national identifier. Acceptable values include: - 'PASSPORT': Passport number - 'NATIONAL_ID': National identification number - 'TAX_ID': Tax identification number - 'SOCIAL_SECURITY': Social security number").optional(), "registrationAuthority": z.string().regex(new RegExp("^RA\\d{6}$")).describe("Registration authority (format -> RA followed by 6 digits)").optional() }).describe("Represents a national identifier for a person or entity").optional(), "customerIdentification": z.string().describe("A unique identifier that identifies the customer in the organization's context.").optional(), "customerNumber": z.string().describe("A distinct identifier that uniquely identifies the customer within the organization.").optional(), "countryOfRegistration": z.string().describe("The ISO-3166 Alpha-2 country code where the legal person is registered.").optional() }).optional() })).describe("Information about the originator of the transaction").optional(),
  "beneficiaryPersons": z.array(z.object({ "naturalPerson": z.object({ "name": z.array(z.object({ "nameIdentifier": z.array(z.object({ "primaryIdentifier": z.string().describe("The primary identifier of the name").optional(), "secondaryIdentifier": z.string().describe("The secondary identifier of the name").optional(), "nameIdentifierType": z.enum(["ALIA","BIRT","MAID","LEGL","MISC"]).describe("Specifies the type of name for a natural person. Acceptable values are: - 'ALIA': Alias name, a name other than the legal name by which a natural person is also known. - 'BIRT': Name at birth, the name given to a natural person at birth. - 'MAID': Maiden name, the original name of a natural person who has changed their name after marriage. - 'LEGL': Legal name, the name that identifies a natural person for legal, official, or administrative purposes. - 'MISC': Unspecified, a name by which a natural person may be known but cannot otherwise be categorized.").optional() })).optional(), "localNameIdentifier": z.array(z.object({ "primaryIdentifier": z.string().describe("The primary identifier of the name").optional(), "secondaryIdentifier": z.string().describe("The secondary identifier of the name").optional(), "nameIdentifierType": z.enum(["ALIA","BIRT","MAID","LEGL","MISC"]).describe("Specifies the type of name for a natural person. Acceptable values are: - 'ALIA': Alias name, a name other than the legal name by which a natural person is also known. - 'BIRT': Name at birth, the name given to a natural person at birth. - 'MAID': Maiden name, the original name of a natural person who has changed their name after marriage. - 'LEGL': Legal name, the name that identifies a natural person for legal, official, or administrative purposes. - 'MISC': Unspecified, a name by which a natural person may be known but cannot otherwise be categorized.").optional() })).optional(), "phoneticNameIdentifier": z.array(z.object({ "primaryIdentifier": z.string().describe("The primary identifier of the name").optional(), "secondaryIdentifier": z.string().describe("The secondary identifier of the name").optional(), "nameIdentifierType": z.enum(["ALIA","BIRT","MAID","LEGL","MISC"]).describe("Specifies the type of name for a natural person. Acceptable values are: - 'ALIA': Alias name, a name other than the legal name by which a natural person is also known. - 'BIRT': Name at birth, the name given to a natural person at birth. - 'MAID': Maiden name, the original name of a natural person who has changed their name after marriage. - 'LEGL': Legal name, the name that identifies a natural person for legal, official, or administrative purposes. - 'MISC': Unspecified, a name by which a natural person may be known but cannot otherwise be categorized.").optional() })).optional() })).describe("An array of structured name identifiers for the natural person, referencing the TravelRuleNaturalPersonNameIdentifier schema.").optional(), "geographicAddress": z.array(z.object({ "streetName": z.string().describe("Name of a street or thoroughfare").optional(), "townName": z.string().describe("Name of a built-up area, with defined boundaries, and a local government").optional(), "country": z.string().describe("Nation with its own government (ISO-3166 Alpha-2 country code)").optional(), "buildingNumber": z.string().describe("Number that identifies the position of a building on a street").optional(), "postCode": z.string().describe("Identifier consisting of a group of letters and/or numbers added to a postal address to assist the sorting of mail").optional(), "addressType": z.enum(["HOME","BIZZ","GEOG"]).describe("Specifies the type of address. Acceptable values are: - 'HOME': Residential, the home address - 'BIZZ': Business, the business address - 'GEOG': Geographic, an unspecified physical (geographical) address").optional(), "department": z.string().describe("Identification of a division of a large organisation or building").optional(), "subDepartment": z.string().describe("Identification of a sub-division of a large organisation or building").optional(), "buildingName": z.string().describe("Name of the building or house").optional(), "floor": z.string().describe("Floor or storey within a building").optional(), "postBox": z.string().describe("Numbered box in a post office").optional(), "room": z.string().describe("Building room number").optional(), "townLocationName": z.string().describe("Specific location name within the town").optional(), "districtName": z.string().describe("Identifies a subdivision within a country subdivision").optional(), "countrySubDivision": z.string().describe("Identifies a subdivision of a country such as state, region, or province").optional(), "addressLine": z.array(z.string()).describe("Information that locates and identifies a specific address, presented in free format text").optional() })).describe("An array of geographic addresses associated with the natural person, referencing the TravelRuleGeographicAddress schema.").optional(), "nationalIdentification": z.object({ "countryOfIssue": z.string().describe("Country that issued the national identifier (ISO-3166 Alpha-2 country code)").optional(), "nationalIdentifier": z.string().max(35).describe("National identifier (max 35 characters)").optional(), "nationalIdentifierType": z.enum(["PASSPORT","NATIONAL_ID","TAX_ID","SOCIAL_SECURITY"]).describe("Type of national identifier. Acceptable values include: - 'PASSPORT': Passport number - 'NATIONAL_ID': National identification number - 'TAX_ID': Tax identification number - 'SOCIAL_SECURITY': Social security number").optional(), "registrationAuthority": z.string().regex(new RegExp("^RA\\d{6}$")).describe("Registration authority (format -> RA followed by 6 digits)").optional() }).describe("Represents a national identifier for a person or entity").optional(), "dateAndPlaceOfBirth": z.object({ "dateOfBirth": z.string().describe("Date of birth in ISO 8601 format (YYYY-MM-DD)").optional(), "placeOfBirth": z.string().describe("Place of birth").optional() }).describe("Represents the date and place of birth for a natural person").optional(), "customerIdentification": z.string().describe("A unique identifier for the customer within the organization's context.").optional(), "countryOfResidence": z.string().describe("The ISO-3166 Alpha-2 country code of the natural person's residence.").optional(), "customerNumber": z.string().describe("A distinct identifier that uniquely identifies the customer within the organization.").optional() }).optional(), "legalPerson": z.object({ "name": z.object({ "legalPersonName": z.string().max(100).describe("Name by which the legal person is known.").optional(), "legalPersonNameIdentifierType": z.enum(["REGISTERED","TRADE","OTHER"]).describe("Specifies the type of name for a legal person. Acceptable values are: - 'REGISTERED': The official registered name. - 'TRADE': A trading name or DBA (Doing Business As) name. - 'OTHER': Any other type of name.").optional() }).optional(), "geographicAddress": z.array(z.object({ "streetName": z.string().describe("Name of a street or thoroughfare").optional(), "townName": z.string().describe("Name of a built-up area, with defined boundaries, and a local government").optional(), "country": z.string().describe("Nation with its own government (ISO-3166 Alpha-2 country code)").optional(), "buildingNumber": z.string().describe("Number that identifies the position of a building on a street").optional(), "postCode": z.string().describe("Identifier consisting of a group of letters and/or numbers added to a postal address to assist the sorting of mail").optional(), "addressType": z.enum(["HOME","BIZZ","GEOG"]).describe("Specifies the type of address. Acceptable values are: - 'HOME': Residential, the home address - 'BIZZ': Business, the business address - 'GEOG': Geographic, an unspecified physical (geographical) address").optional(), "department": z.string().describe("Identification of a division of a large organisation or building").optional(), "subDepartment": z.string().describe("Identification of a sub-division of a large organisation or building").optional(), "buildingName": z.string().describe("Name of the building or house").optional(), "floor": z.string().describe("Floor or storey within a building").optional(), "postBox": z.string().describe("Numbered box in a post office").optional(), "room": z.string().describe("Building room number").optional(), "townLocationName": z.string().describe("Specific location name within the town").optional(), "districtName": z.string().describe("Identifies a subdivision within a country subdivision").optional(), "countrySubDivision": z.string().describe("Identifies a subdivision of a country such as state, region, or province").optional(), "addressLine": z.array(z.string()).describe("Information that locates and identifies a specific address, presented in free format text").optional() })).describe("The array of geographic addresses associated with the legal person.").optional(), "nationalIdentification": z.object({ "countryOfIssue": z.string().describe("Country that issued the national identifier (ISO-3166 Alpha-2 country code)").optional(), "nationalIdentifier": z.string().max(35).describe("National identifier (max 35 characters)").optional(), "nationalIdentifierType": z.enum(["PASSPORT","NATIONAL_ID","TAX_ID","SOCIAL_SECURITY"]).describe("Type of national identifier. Acceptable values include: - 'PASSPORT': Passport number - 'NATIONAL_ID': National identification number - 'TAX_ID': Tax identification number - 'SOCIAL_SECURITY': Social security number").optional(), "registrationAuthority": z.string().regex(new RegExp("^RA\\d{6}$")).describe("Registration authority (format -> RA followed by 6 digits)").optional() }).describe("Represents a national identifier for a person or entity").optional(), "customerIdentification": z.string().describe("A unique identifier that identifies the customer in the organization's context.").optional(), "customerNumber": z.string().describe("A distinct identifier that uniquely identifies the customer within the organization.").optional(), "countryOfRegistration": z.string().describe("The ISO-3166 Alpha-2 country code where the legal person is registered.").optional() }).optional() })).describe("Information about the beneficiary of the transaction").optional(),
  "accountNumber": z.array(z.string()).describe("Beneficiary account number").optional()
}