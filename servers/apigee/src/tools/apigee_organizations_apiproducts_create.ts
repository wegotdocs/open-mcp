import { z } from "zod"

export const toolName = `apigee_organizations_apiproducts_create`
export const toolDescription = `Creates an API product in an organization. You create API products after you have proxied backend services using API proxies. An API product is a collection of API resources combined with quota settings and metadata that you can use to deli`
export const baseUrl = `https://apigee.googleapis.com`
export const path = `/v1/organizations/{organizationsId}/apiproducts`
export const method = `post`
export const security = [
  {
    "key": "Authorization",
    "value": "Bearer <mcp-env-var>OAUTH2_TOKEN</mcp-env-var>",
    "in": "header",
    "envVarName": "OAUTH2_TOKEN",
    "schemeType": "oauth2"
  },
  {
    "key": "Authorization",
    "value": "Bearer <mcp-env-var>OAUTH2_TOKEN</mcp-env-var>",
    "in": "header",
    "envVarName": "OAUTH2_TOKEN",
    "schemeType": "oauth2"
  }
]
export const keys = {
  "query": [],
  "header": [],
  "path": [
    "organizationsId"
  ],
  "cookie": [],
  "body": [
    "displayName",
    "graphqlOperationGroup",
    "proxies",
    "approvalType",
    "quotaTimeUnit",
    "environments",
    "lastModifiedAt",
    "createdAt",
    "quota",
    "quotaCounterScope",
    "operationGroup",
    "grpcOperationGroup",
    "name",
    "quotaInterval",
    "attributes",
    "apiResources",
    "scopes",
    "description"
  ]
}
export const flatMap = {}

export const inputParams = {
  "organizationsId": z.string(),
  "displayName": z.string().describe("Name displayed in the UI or developer portal to developers registering for API access.").optional(),
  "graphqlOperationGroup": z.object({ "operationConfigType": z.string().describe("Flag that specifies whether the configuration is for Apigee API proxy or a remote service. Valid values include `proxy` or `remoteservice`. Defaults to `proxy`. Set to `proxy` when Apigee API proxies are associated with the API product. Set to `remoteservice` when non-Apigee proxies like Istio-Envoy are associated with the API product.").optional(), "operationConfigs": z.array(z.object({ "apiSource": z.string().describe("Required. Name of the API proxy endpoint or remote service with which the GraphQL operation and quota are associated.").optional(), "quota": z.object({ "timeUnit": z.string().describe("Time unit defined for the `interval`. Valid values include `minute`, `hour`, `day`, or `month`. If `limit` and `interval` are valid, the default value is `hour`; otherwise, the default is null.").optional(), "interval": z.string().describe("Required. Time interval over which the number of request messages is calculated.").optional(), "limit": z.string().describe("Required. Upper limit allowed for the time interval and time unit specified. Requests exceeding this limit will be rejected.").optional() }).describe("Quota parameters to be enforced for the resources, methods, and API source combination. If none are specified, quota enforcement will not be done.").optional(), "attributes": z.array(z.object({ "name": z.string().describe("API key of the attribute.").optional(), "value": z.string().describe("Value of the attribute.").optional() }).describe("Key-value pair to store extra metadata.")).describe("Custom attributes associated with the operation.").optional(), "operations": z.array(z.object({ "operation": z.string().describe("GraphQL operation name. The name and operation type will be used to apply quotas. If no name is specified, the quota will be applied to all GraphQL operations irrespective of their operation names in the payload.").optional(), "operationTypes": z.array(z.string()).describe("Required. GraphQL operation types. Valid values include `query` or `mutation`. **Note**: Apigee does not currently support `subscription` types.").optional() }).describe("Represents the pairing of GraphQL operation types and the GraphQL operation name.")).describe("Required. List of GraphQL name/operation type pairs for the proxy or remote service to which quota will be applied. If only operation types are specified, the quota will be applied to all GraphQL requests irrespective of the GraphQL name. **Note**: Currently, you can specify only a single GraphQLOperation. Specifying more than one will cause the operation to fail.").optional() }).describe("Binds the resources in a proxy or remote service with the GraphQL operation and its associated quota enforcement.")).describe("Required. List of operation configurations for either Apigee API proxies or other remote services that are associated with this API product.").optional() }).describe("Configuration used to group Apigee proxies or remote services with graphQL operation name, graphQL operation type and quotas. This grouping allows us to precisely set quota for a particular combination of graphQL name and operation type for a particular proxy request. If graphQL name is not set, this would imply quota will be applied on all graphQL requests matching the operation type.").optional(),
  "proxies": z.array(z.string()).describe("Comma-separated list of API proxy names to which this API product is bound. By specifying API proxies, you can associate resources in the API product with specific API proxies, preventing developers from accessing those resources through other API proxies. Apigee rejects requests to API proxies that are not listed. **Note:** The API proxy names must already exist in the specified environment as they will be validated upon creation.").optional(),
  "approvalType": z.string().describe("Flag that specifies how API keys are approved to access the APIs defined by the API product. If set to `manual`, the consumer key is generated and returned in \"pending\" state. In this case, the API keys won't work until they have been explicitly approved. If set to `auto`, the consumer key is generated and returned in \"approved\" state and can be used immediately. **Note:** Typically, `auto` is used to provide access to free or trial API products that provide limited quota or capabilities.").optional(),
  "quotaTimeUnit": z.string().describe("Time unit defined for the `quotaInterval`. Valid values include `minute`, `hour`, `day`, or `month`.").optional(),
  "environments": z.array(z.string()).describe("Comma-separated list of environment names to which the API product is bound. Requests to environments that are not listed are rejected. By specifying one or more environments, you can bind the resources listed in the API product to a specific environment, preventing developers from accessing those resources through API proxies deployed in another environment. This setting is used, for example, to prevent resources associated with API proxies in `prod` from being accessed by API proxies deployed in `test`.").optional(),
  "lastModifiedAt": z.string().describe("Response only. Modified time of this environment as milliseconds since epoch.").optional(),
  "createdAt": z.string().describe("Response only. Creation time of this environment as milliseconds since epoch.").optional(),
  "quota": z.string().describe("Number of request messages permitted per app by this API product for the specified `quotaInterval` and `quotaTimeUnit`. For example, a `quota` of 50, for a `quotaInterval` of 12 and a `quotaTimeUnit` of hours means 50 requests are allowed every 12 hours.").optional(),
  "quotaCounterScope": z.enum(["QUOTA_COUNTER_SCOPE_UNSPECIFIED","PROXY","OPERATION"]).describe("Scope of the quota decides how the quota counter gets applied and evaluate for quota violation. If the Scope is set as PROXY, then all the operations defined for the APIproduct that are associated with the same proxy will share the same quota counter set at the APIproduct level, making it a global counter at a proxy level. If the Scope is set as OPERATION, then each operations get the counter set at the API product dedicated, making it a local counter. Note that, the QuotaCounterScope applies only when an operation does not have dedicated quota set for itself.").optional(),
  "operationGroup": z.object({ "operationConfigType": z.string().describe("Flag that specifes whether the configuration is for Apigee API proxy or a remote service. Valid values include `proxy` or `remoteservice`. Defaults to `proxy`. Set to `proxy` when Apigee API proxies are associated with the API product. Set to `remoteservice` when non-Apigee proxies like Istio-Envoy are associated with the API product.").optional(), "operationConfigs": z.array(z.object({ "quota": z.object({ "timeUnit": z.string().describe("Time unit defined for the `interval`. Valid values include `minute`, `hour`, `day`, or `month`. If `limit` and `interval` are valid, the default value is `hour`; otherwise, the default is null.").optional(), "interval": z.string().describe("Required. Time interval over which the number of request messages is calculated.").optional(), "limit": z.string().describe("Required. Upper limit allowed for the time interval and time unit specified. Requests exceeding this limit will be rejected.").optional() }).describe("Quota parameters to be enforced for the resources, methods, and API source combination. If none are specified, quota enforcement will not be done.").optional(), "operations": z.array(z.object({ "methods": z.array(z.string()).describe("methods refers to the REST verbs as in https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html. When none specified, all verb types are allowed.").optional(), "resource": z.string().describe("Required. REST resource path associated with the API proxy or remote service.").optional() }).describe("Represents the pairing of REST resource path and the actions (verbs) allowed on the resource path.")).describe("List of resource/method pairs for the API proxy or remote service to which quota will applied. **Note**: Currently, you can specify only a single resource/method pair. The call will fail if more than one resource/method pair is provided.").optional(), "attributes": z.array(z.object({ "name": z.string().describe("API key of the attribute.").optional(), "value": z.string().describe("Value of the attribute.").optional() }).describe("Key-value pair to store extra metadata.")).describe("Custom attributes associated with the operation.").optional(), "apiSource": z.string().describe("Required. Name of the API proxy or remote service with which the resources, methods, and quota are associated.").optional() }).describe("Binds the resources in an API proxy or remote service with the allowed REST methods and associated quota enforcement.")).describe("Required. List of operation configurations for either Apigee API proxies or other remote services that are associated with this API product.").optional() }).describe("Configuration used to group Apigee proxies or remote services with resources, method types, and quotas. The resource refers to the resource URI (excluding the base path). With this grouping, the API product creator is able to fine-tune and give precise control over which REST methods have access to specific resources and how many calls can be made (using the `quota` setting). **Note:** The `api_resources` setting cannot be specified for both the API product and operation group; otherwise the call will fail.").optional(),
  "grpcOperationGroup": z.object({ "operationConfigs": z.array(z.object({ "quota": z.object({ "timeUnit": z.string().describe("Time unit defined for the `interval`. Valid values include `minute`, `hour`, `day`, or `month`. If `limit` and `interval` are valid, the default value is `hour`; otherwise, the default is null.").optional(), "interval": z.string().describe("Required. Time interval over which the number of request messages is calculated.").optional(), "limit": z.string().describe("Required. Upper limit allowed for the time interval and time unit specified. Requests exceeding this limit will be rejected.").optional() }).describe("Quota parameters to be enforced for the methods and API source combination. If none are specified, quota enforcement will not be done.").optional(), "apiSource": z.string().describe("Required. Name of the API proxy with which the gRPC operation and quota are associated.").optional(), "attributes": z.array(z.object({ "name": z.string().describe("API key of the attribute.").optional(), "value": z.string().describe("Value of the attribute.").optional() }).describe("Key-value pair to store extra metadata.")).describe("Custom attributes associated with the operation.").optional(), "service": z.string().describe("Required. gRPC Service name associated to be associated with the API proxy, on which quota rules can be applied upon.").optional(), "methods": z.array(z.string()).describe("List of unqualified gRPC method names for the proxy to which quota will be applied. If this field is empty, the Quota will apply to all operations on the gRPC service defined on the proxy. Example: Given a proxy that is configured to serve com.petstore.PetService, the methods com.petstore.PetService.ListPets and com.petstore.PetService.GetPet would be specified here as simply [\"ListPets\", \"GetPet\"].").optional() }).describe("Binds the resources in a proxy or remote service with the gRPC operation and its associated quota enforcement.")).describe("Required. List of operation configurations for either Apigee API proxies that are associated with this API product.").optional() }).describe("Optional. Configuration used to group Apigee proxies with gRPC services and method names. This grouping allows us to set quota for a particular proxy with the gRPC service name and method. If a method name is not set, this implies quota and authorization are applied to all gRPC methods implemented by that proxy for that particular gRPC service.").optional(),
  "name": z.string().describe("Internal name of the API product. Characters you can use in the name are restricted to: `A-Z0-9._\\-$ %`. **Note:** The internal name cannot be edited when updating the API product.").optional(),
  "quotaInterval": z.string().describe("Time interval over which the number of request messages is calculated.").optional(),
  "attributes": z.array(z.object({ "name": z.string().describe("API key of the attribute.").optional(), "value": z.string().describe("Value of the attribute.").optional() }).describe("Key-value pair to store extra metadata.")).describe("Array of attributes that may be used to extend the default API product profile with customer-specific metadata. You can specify a maximum of 18 attributes. Use this property to specify the access level of the API product as either `public`, `private`, or `internal`. Only products marked `public` are available to developers in the Apigee developer portal. For example, you can set a product to `internal` while it is in development and then change access to `public` when it is ready to release on the portal. API products marked as `private` do not appear on the portal, but can be accessed by external developers.").optional(),
  "apiResources": z.array(z.string()).describe("Comma-separated list of API resources to be bundled in the API product. By default, the resource paths are mapped from the `proxy.pathsuffix` variable. The proxy path suffix is defined as the URI fragment following the ProxyEndpoint base path. For example, if the `apiResources` element is defined to be `/forecastrss` and the base path defined for the API proxy is `/weather`, then only requests to `/weather/forecastrss` are permitted by the API product. You can select a specific path, or you can select all subpaths with the following wildcard: - `/**`: Indicates that all sub-URIs are included. - `/*` : Indicates that only URIs one level down are included. By default, / supports the same resources as /** as well as the base path defined by the API proxy. For example, if the base path of the API proxy is `/v1/weatherapikey`, then the API product supports requests to `/v1/weatherapikey` and to any sub-URIs, such as `/v1/weatherapikey/forecastrss`, `/v1/weatherapikey/region/CA`, and so on. For more information, see Managing API products.").optional(),
  "scopes": z.array(z.string()).describe("Comma-separated list of OAuth scopes that are validated at runtime. Apigee validates that the scopes in any access token presented match the scopes defined in the OAuth policy associated with the API product.").optional(),
  "description": z.string().describe("Description of the API product. Include key information about the API product that is not captured by other fields.").optional()
}