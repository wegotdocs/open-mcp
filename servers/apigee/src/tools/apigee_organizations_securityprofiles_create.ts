import { z } from "zod"

export const toolName = `apigee_organizations_securityprofiles_create`
export const toolDescription = `CreateSecurityProfile create a new custom security profile.`
export const baseUrl = `https://apigee.googleapis.com`
export const path = `/v1/organizations/{organizationsId}/securityProfiles`
export const method = `post`
export const security = [
  {
    "key": "Authorization",
    "value": "Bearer <mcp-env-var>OAUTH2_TOKEN</mcp-env-var>",
    "in": "header",
    "envVarName": "OAUTH2_TOKEN",
    "schemeType": "oauth2"
  },
  {
    "key": "Authorization",
    "value": "Bearer <mcp-env-var>OAUTH2_TOKEN</mcp-env-var>",
    "in": "header",
    "envVarName": "OAUTH2_TOKEN",
    "schemeType": "oauth2"
  }
]
export const keys = {
  "query": [
    "securityProfileId"
  ],
  "header": [],
  "path": [
    "organizationsId"
  ],
  "cookie": [],
  "body": [
    "revisionCreateTime",
    "profileConfig",
    "scoringConfigs",
    "environments",
    "maxScore",
    "revisionId",
    "minScore",
    "revisionUpdateTime",
    "description",
    "name"
  ]
}
export const flatMap = {}

export const inputParams = {
  "organizationsId": z.string(),
  "securityProfileId": z.string().optional(),
  "revisionCreateTime": z.string().describe("Output only. The time when revision was created.").readonly().optional(),
  "profileConfig": z.object({ "categories": z.array(z.object({ "mtls": z.object({}).describe("Checks to see if you have configured mTLS for the target server.").optional(), "cors": z.object({}).describe("Checks to see if you have CORS policy in place.").optional(), "threat": z.object({}).describe("Checks to see if you have a threat protection policy in place.").optional(), "abuse": z.object({}).describe("Checks for abuse, which includes any requests sent to the API for purposes other than what it is intended for, such as high volumes of requests, data scraping, and abuse related to authorization.").optional(), "mediation": z.object({}).describe("Checks to see if you have a mediation policy in place.").optional(), "authorization": z.object({}).describe("Checks to see if you have an authorization policy in place.").optional() }).describe("Advanced API Security provides security profile that scores the following categories.")).describe("List of categories of profile config.").optional() }).describe("Required. Customized profile configuration that computes the security score.").optional(),
  "scoringConfigs": z.array(z.object({ "scorePath": z.string().describe("Path of the component config used for scoring.").optional(), "description": z.string().describe("Description of the config.").optional(), "title": z.string().describe("Title of the config.").optional() }).describe("Security configurations to manage scoring.")).describe("List of profile scoring configs in this revision.").optional(),
  "environments": z.array(z.object({ "attachTime": z.string().describe("Output only. Time at which environment was attached to the security profile.").readonly().optional(), "environment": z.string().describe("Output only. Name of the environment.").readonly().optional() }).describe("Environment information of attached environments. Scoring an environment is enabled only if it is attached to a security profile.")).describe("List of environments attached to security profile.").optional(),
  "maxScore": z.number().int().describe("Output only. Maximum security score that can be generated by this profile.").readonly().optional(),
  "revisionId": z.string().describe("Output only. Revision ID of the security profile.").readonly().optional(),
  "minScore": z.number().int().describe("Output only. Minimum security score that can be generated by this profile.").readonly().optional(),
  "revisionUpdateTime": z.string().describe("Output only. The time when revision was updated.").readonly().optional(),
  "description": z.string().describe("Description of the security profile.").optional(),
  "name": z.string().describe("Immutable. Name of the security profile resource. Format: organizations/{org}/securityProfiles/{profile}").optional()
}