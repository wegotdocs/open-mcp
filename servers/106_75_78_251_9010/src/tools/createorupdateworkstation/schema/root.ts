import { z } from "zod"

export const inputParamsSchema = {
  "id": z.number().int().optional(),
  "stationCode": z.string(),
  "stationName": z.string(),
  "workStationStatus": z.enum(["ONLINE","PAUSED","OFFLINE"]).optional(),
  "warehouseCode": z.string(),
  "warehouseAreaId": z.number().int(),
  "enable": z.boolean().optional(),
  "workStationMode": z.enum(["RECEIVE","SELECT_CONTAINER_PUT_AWAY","RECOMMENDED_CONTAINER_PUT_AWAY","PICKING","STOCKTAKE","EMPTY_CONTAINER_OUTBOUND","ONE_STEP_RELOCATION","TWO_STEP_RELOCATION"]).optional(),
  "allowWorkStationModes": z.array(z.enum(["RECEIVE","SELECT_CONTAINER_PUT_AWAY","RECOMMENDED_CONTAINER_PUT_AWAY","PICKING","STOCKTAKE","EMPTY_CONTAINER_OUTBOUND","ONE_STEP_RELOCATION","TWO_STEP_RELOCATION"])).optional(),
  "workLocations": z.array(z.object({ "stationCode": z.string().optional(), "workLocationType": z.enum(["BUFFER_SHELVING","ROBOT","CONVEYOR"]).optional(), "workLocationCode": z.string().optional(), "enable": z.boolean().optional(), "workLocationSlots": z.array(z.object({ "workLocationCode": z.string().optional(), "groupCode": z.string().optional(), "slotCode": z.string().optional(), "level": z.number().int().optional(), "bay": z.number().int().optional(), "enable": z.boolean().optional() })).optional() })).optional(),
  "putWalls": z.array(z.object({ "id": z.number().int().optional(), "warehouseCode": z.string(), "workStationId": z.number().int(), "putWallCode": z.string(), "putWallName": z.string(), "containerSpecCode": z.string(), "putWallSlots": z.array(z.object({ "id": z.number().int().optional(), "workStationId": z.number().int().optional(), "putWallId": z.number().int().optional(), "putWallCode": z.string().optional(), "putWallSlotCode": z.string().optional(), "ptlTag": z.string(), "face": z.string().optional(), "level": z.string().optional(), "bay": z.string().optional(), "locLevel": z.number().int().optional(), "locBay": z.number().int().optional(), "enable": z.boolean().optional(), "pickingOrderId": z.number().int().optional(), "taskDispatchRuleId": z.number().int().optional(), "putWallSlotStatus": z.enum(["IDLE","WAITING_BINDING","BOUND","DISPATCH","WAITING_SEAL"]).optional(), "transferContainerCode": z.string().optional(), "transferContainerRecordId": z.number().int().optional(), "version": z.number().int().optional(), "putWallSlotDesc": z.array(z.object({ "fieldName": z.string().optional(), "fieldDesc": z.string().optional(), "fieldValue": z.string().optional(), "display": z.boolean().optional(), "color": z.string().optional(), "bold": z.boolean().optional() })).optional(), "qtyDispatched": z.number().int().optional() })), "location": z.string().optional(), "enable": z.boolean().optional(), "displayOrder": z.enum(["LEFT_TO_RIGHT","RIGHT_TO_LEFT"]).optional(), "version": z.number().int().optional(), "putWallStatus": z.enum(["IDLE","WORKING"]).optional(), "active": z.boolean().optional(), "taskDispatchRuleId": z.number().int().optional() })).optional(),
  "workStationConfig": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `workStationConfig` to the tool, first call the tool `expandSchema` with \"/properties/workStationConfig\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "position": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `position` to the tool, first call the tool `expandSchema` with \"/properties/position\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "version": z.number().int().optional()
}