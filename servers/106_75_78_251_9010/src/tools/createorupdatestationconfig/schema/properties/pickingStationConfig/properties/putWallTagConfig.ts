import { z } from "zod"

export const inputParamsSchema = {
  "waitingBinding": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `waitingBinding` to the tool, first call the tool `expandSchema` with \"/properties/pickingStationConfig/properties/putWallTagConfig/properties/waitingBinding\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "dispatch": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `dispatch` to the tool, first call the tool `expandSchema` with \"/properties/pickingStationConfig/properties/putWallTagConfig/properties/dispatch\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "waitingSeal": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `waitingSeal` to the tool, first call the tool `expandSchema` with \"/properties/pickingStationConfig/properties/putWallTagConfig/properties/waitingSeal\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "disabled": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `disabled` to the tool, first call the tool `expandSchema` with \"/properties/pickingStationConfig/properties/putWallTagConfig/properties/disabled\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "selected": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `selected` to the tool, first call the tool `expandSchema` with \"/properties/pickingStationConfig/properties/putWallTagConfig/properties/selected\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "optional": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `optional` to the tool, first call the tool `expandSchema` with \"/properties/pickingStationConfig/properties/putWallTagConfig/properties/optional\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional()
}