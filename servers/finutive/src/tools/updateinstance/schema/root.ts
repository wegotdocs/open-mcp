import { z } from "zod"

export const inputParamsSchema = {
  "name": z.string().describe("Instance name").optional(),
  "agency_email_domain": z.string().describe("Agency email domain").optional(),
  "no_recurrent_invoices_serie": z.string().describe("Non-recurrent invoices series").optional(),
  "recurrent_invoices_serie": z.string().describe("Recurrent invoices series").optional(),
  "rectifying_invoices_serie": z.string().describe("Rectifying invoices series").optional(),
  "churn_rate": z.number().int().describe("Churn rate").optional(),
  "emission_date_instance": z.number().int().describe("Emission date instance").optional(),
  "main_initiative": z.string().describe("Main initiative ID").optional(),
  "nps_feedback_email": z.string().describe("NPS feedback email addresses").optional(),
  "nps_negative_feedback_email": z.string().describe("NPS negative feedback email").optional(),
  "nps_manager_negative_feedback_email": z.string().describe("NPS manager negative feedback email").optional(),
  "nps_service_negative_feedback_email": z.string().describe("NPS service negative feedback email").optional(),
  "nps_positive_feedback_survey_url": z.string().describe("NPS positive feedback survey URL").optional(),
  "nps_negative_feedback_survey_url": z.string().describe("NPS negative feedback survey URL").optional(),
  "email_promotions": z.string().describe("Email promotions").optional(),
  "user_message_products_invoices": z.string().describe("User message products invoices").optional(),
  "invoices_email": z.string().describe("Invoices email").optional(),
  "services_email": z.string().describe("Services email").optional(),
  "new_user_email": z.string().describe("New user email").optional(),
  "contract_signed_email": z.string().describe("Contract signed email").optional(),
  "product_requisite_timetracker": z.string().describe("Product requisite timetracker").optional(),
  "sage_enable": z.boolean().describe("Sage enable flag").optional(),
  "sage_domain": z.string().describe("Sage domain").optional(),
  "sage_domain_pre": z.string().describe("Sage domain pre").optional(),
  "sage_instance": z.string().describe("Sage instance").optional(),
  "sage_write_invoices": z.boolean().describe("Sage write invoices flag").optional(),
  "sage_billing_type": z.string().describe("Sage billing type").optional(),
  "sage_accounting_id": z.number().int().describe("Sage accounting ID").optional(),
  "email_no_destinataries": z.string().describe("Email no destinataries").optional(),
  "banner_mgm": z.string().describe("Banner MGM").optional(),
  "banner_funnel": z.string().describe("Banner funnel").optional(),
  "banner_funnel_en": z.string().describe("Banner funnel English").optional(),
  "banner_mgm_en": z.string().describe("Banner MGM English").optional(),
  "commercial_flow": z.string().describe("Commercial flow").optional(),
  "email_due": z.string().describe("Email due").optional(),
  "email_model_036": z.string().describe("Email model 036").optional(),
  "date_new_flow": z.string().describe("Date new flow").optional(),
  "main_color": z.string().describe("Main color").optional(),
  "secondary_color": z.string().describe("Secondary color").optional(),
  "third_color": z.string().describe("Third color").optional(),
  "internal_logo": z.string().describe("Internal logo path").optional(),
  "logo_favicon": z.string().describe("Logo favicon path").optional(),
  "logo_landing_page": z.string().describe("Logo landing page URL").optional(),
  "logo_landing_page_contrast": z.string().describe("Logo landing page contrast URL").optional(),
  "logo_square": z.string().describe("Logo square URL").optional(),
  "loader_gif": z.string().describe("Loader GIF URL").optional(),
  "logo_web_app": z.string().describe("Logo web app URL").optional(),
  "hero_landing_page": z.string().describe("Hero landing page").optional(),
  "email_params_main_logo": z.string().describe("Email parameters main logo").optional(),
  "email_params_message": z.string().describe("Email parameters message").optional(),
  "email_params_email": z.string().describe("Email parameters email").optional(),
  "email_params_url": z.string().describe("Email parameters URL").optional(),
  "email_params_privacy_policy": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `email_params_privacy_policy` to the tool, first call the tool `expandSchema` with \"/properties/email_params_privacy_policy\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Email parameters privacy policy</property-description>").optional(),
  "email_params_privacy_form": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `email_params_privacy_form` to the tool, first call the tool `expandSchema` with \"/properties/email_params_privacy_form\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Email parameters privacy form</property-description>").optional(),
  "email_params_color": z.string().describe("Email parameters color").optional()
}