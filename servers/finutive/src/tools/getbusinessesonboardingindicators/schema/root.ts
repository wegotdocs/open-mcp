import { z } from "zod"

export const inputParamsSchema = {
  "search_string": z.string().describe("Search string to filter businesses by name or other text fields").optional(),
  "business_type": z.enum(["SOCIETY","UNSUPPORTED","AUTONOMOUS"]).describe("Type of business to filter by").optional(),
  "order_direction": z.string().describe("Sort direction for results").optional(),
  "startup_certificate": z.number().int().describe("Filter by startup certificate status (1 for yes, 0 for no)").optional(),
  "invite_start_date": z.string().datetime({ offset: true }).describe("Start date for invitation period filter").optional(),
  "invite_end_date": z.string().datetime({ offset: true }).describe("End date for invitation period filter").optional(),
  "services": z.array(z.string()).describe("List of service IDs to filter by").optional(),
  "deal_labels_id": z.array(z.string()).describe("List of deal label IDs to filter by").optional(),
  "census": z.array(z.string()).describe("List of census IDs to filter by").optional(),
  "opportunity_start_date": z.string().datetime({ offset: true }).describe("Start date for opportunity period filter").optional(),
  "opportunity_end_date": z.string().datetime({ offset: true }).describe("End date for opportunity period filter").optional(),
  "paid_start_date": z.string().datetime({ offset: true }).describe("Start date for paid period filter").optional(),
  "paid_end_date": z.string().datetime({ offset: true }).describe("End date for paid period filter").optional(),
  "discarded_start_date": z.string().datetime({ offset: true }).describe("Start date for discarded period filter").optional(),
  "discarded_end_date": z.string().datetime({ offset: true }).describe("End date for discarded period filter").optional(),
  "updated_start_date": z.string().datetime({ offset: true }).describe("Start date for updated period filter").optional(),
  "updated_end_date": z.string().datetime({ offset: true }).describe("End date for updated period filter").optional(),
  "recurrent_start_date": z.string().datetime({ offset: true }).describe("Start date for recurrent period filter").optional(),
  "recurrent_end_date": z.string().datetime({ offset: true }).describe("End date for recurrent period filter").optional(),
  "products": z.array(z.string()).describe("List of product IDs to include").optional(),
  "products_out_id": z.array(z.string()).describe("List of product IDs to exclude").optional(),
  "services_out_id": z.array(z.string()).describe("List of service IDs to exclude").optional(),
  "not_blocked": z.boolean().describe("Filter for non-blocked businesses").optional(),
  "with_products": z.boolean().describe("Filter for businesses with products").optional(),
  "has_assigned_client": z.boolean().describe("Filter for businesses with assigned client").optional(),
  "with_recurrency": z.boolean().describe("Filter for businesses with recurrency").optional(),
  "with_bank_account": z.boolean().describe("Filter for businesses with bank account").optional(),
  "with_fiscal_documents": z.boolean().describe("Filter for businesses with fiscal documents").optional(),
  "gocardless_active": z.boolean().describe("Filter for businesses with active GoCardless").optional(),
  "sage_active": z.boolean().describe("Filter for businesses with active Sage").optional(),
  "zip_code": z.string().describe("Filter by ZIP code").optional(),
  "min_invoices_last_6_months_incomes": z.number().int().describe("Minimum amount of incomes from invoices in last 6 months").optional(),
  "max_invoices_last_6_months_incomes": z.number().int().describe("Maximum amount of incomes from invoices in last 6 months").optional(),
  "min_transactions_last_6_months_incomes": z.number().int().describe("Minimum amount of incomes from transactions in last 6 months").optional(),
  "max_transactions_last_6_months_incomes": z.number().int().describe("Maximum amount of incomes from transactions in last 6 months").optional(),
  "min_annual_budget": z.number().int().describe("Minimum annual budget").optional(),
  "max_annual_budget": z.number().int().describe("Maximum annual budget").optional(),
  "special_free_treatment": z.boolean().describe("Has promotional products").optional(),
  "request": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `request` to the tool, first call the tool `expandSchema` with \"/properties/request\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Additional filtering criteria</property-description>")
}