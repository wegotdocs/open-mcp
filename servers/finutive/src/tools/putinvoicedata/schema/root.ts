import { z } from "zod"

export const inputParamsSchema = {
  "businessId": z.string(),
  "due_date": z.string().datetime({ offset: true }).optional(),
  "status": z.string().optional(),
  "invoice_id": z.string().optional(),
  "invoice_number": z.string().optional(),
  "company_name": z.string().optional(),
  "company_cif": z.string().optional(),
  "company_address": z.string().optional(),
  "company_city": z.string().optional(),
  "company_zip": z.string().optional(),
  "client_id": z.string().optional(),
  "client_name": z.string().optional(),
  "client_cif": z.string().optional(),
  "client_address": z.string().optional(),
  "products": z.array(z.object({ "detail_id": z.string().optional(), "id": z.string().optional(), "concept": z.string().optional(), "quantity": z.number().optional(), "amount": z.number().optional(), "iva": z.number().optional(), "discount_type": z.string().optional(), "discount": z.number().optional(), "has_supplies_expenses": z.boolean().optional(), "accounting_account_id": z.string().optional(), "tax_regime": z.string().optional(), "activity_type": z.string().optional(), "activity_line": z.string().optional(), "amount_in_original_currency": z.number().optional(), "discount_in_original_currency": z.number().optional(), "special_free_treatment": z.boolean().optional(), "special_free_treatment_data": z.object({ "price": z.number().optional(), "vat": z.number().optional(), "active_from": z.string().optional(), "active_to": z.string().optional() }).optional() })).optional(),
  "issuanceDate": z.string().datetime({ offset: true }).optional(),
  "description": z.string().optional(),
  "payment_method": z.string().optional(),
  "bank_account": z.string().optional(),
  "language": z.string().optional(),
  "currency": z.string().optional(),
  "apply_irpf": z.boolean().optional(),
  "irpf": z.string().optional(),
  "equivalence_surcharge": z.number().optional(),
  "recurrency": z.boolean().optional(),
  "taxes_title": z.string().optional(),
  "withholdings_title": z.string().optional(),
  "account_name": z.string().optional(),
  "account_iban": z.string().optional(),
  "transaction_id": z.string().optional(),
  "type": z.string().optional(),
  "client_zip": z.string().optional(),
  "client_city": z.string().optional(),
  "prefix_id": z.string().optional(),
  "start_of_period": z.string().datetime({ offset: true }).optional(),
  "accounting_account": z.string().optional(),
  "tax_regime": z.string().optional(),
  "type_activity": z.string().optional(),
  "price_definition": z.string().optional(),
  "line_activities": z.string().optional(),
  "comment_sii": z.string().optional(),
  "irpf_select": z.string().optional(),
  "send_by_email": z.boolean().optional(),
  "email_template_id": z.string().optional(),
  "template_id": z.string().optional(),
  "document": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `document` to the tool, first call the tool `expandSchema` with \"/properties/document\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "generate_document": z.boolean().optional(),
  "exchange_rate": z.number().optional(),
  "invoice_tags_ids": z.string().optional(),
  "operations_by_product": z.boolean().optional(),
  "special_free_treatment": z.boolean().optional(),
  "special_free_treatment_data": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `special_free_treatment_data` to the tool, first call the tool `expandSchema` with \"/properties/special_free_treatment_data\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional()
}