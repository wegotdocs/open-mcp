import { z } from "zod"

export const inputParamsSchema = {
  "id": z.number().int().optional(),
  "title": z.string().nullable().optional(),
  "originalTitle": z.string().nullable().optional(),
  "originalLanguage": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `originalLanguage` to the tool, first call the tool `expandSchema` with \"/properties/originalLanguage\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "alternateTitles": z.array(z.object({ "id": z.number().int().optional(), "sourceType": z.enum(["tmdb","mappings","user","indexer"]).optional(), "movieMetadataId": z.number().int().optional(), "title": z.string().nullable().optional(), "cleanTitle": z.string().nullable().optional() }).strict()).nullable().optional(),
  "secondaryYear": z.number().int().nullable().optional(),
  "secondaryYearSourceId": z.number().int().optional(),
  "sortTitle": z.string().nullable().optional(),
  "sizeOnDisk": z.number().int().nullable().optional(),
  "status": z.enum(["tba","announced","inCinemas","released","deleted"]).optional(),
  "overview": z.string().nullable().optional(),
  "inCinemas": z.string().datetime({ offset: true }).nullable().optional(),
  "physicalRelease": z.string().datetime({ offset: true }).nullable().optional(),
  "digitalRelease": z.string().datetime({ offset: true }).nullable().optional(),
  "releaseDate": z.string().datetime({ offset: true }).nullable().optional(),
  "physicalReleaseNote": z.string().nullable().optional(),
  "images": z.array(z.object({ "coverType": z.enum(["unknown","poster","banner","fanart","screenshot","headshot","clearlogo"]).optional(), "url": z.string().nullable().optional(), "remoteUrl": z.string().nullable().optional() }).strict()).nullable().optional(),
  "website": z.string().nullable().optional(),
  "remotePoster": z.string().nullable().optional(),
  "year": z.number().int().optional(),
  "youTubeTrailerId": z.string().nullable().optional(),
  "studio": z.string().nullable().optional(),
  "path": z.string().nullable().optional(),
  "qualityProfileId": z.number().int().optional(),
  "hasFile": z.boolean().nullable().optional(),
  "movieFileId": z.number().int().optional(),
  "monitored": z.boolean().optional(),
  "minimumAvailability": z.enum(["tba","announced","inCinemas","released","deleted"]).optional(),
  "isAvailable": z.boolean().optional(),
  "folderName": z.string().nullable().optional(),
  "runtime": z.number().int().optional(),
  "cleanTitle": z.string().nullable().optional(),
  "imdbId": z.string().nullable().optional(),
  "tmdbId": z.number().int().optional(),
  "titleSlug": z.string().nullable().optional(),
  "rootFolderPath": z.string().nullable().optional(),
  "folder": z.string().nullable().optional(),
  "certification": z.string().nullable().optional(),
  "genres": z.array(z.string()).nullable().optional(),
  "tags": z.array(z.number().int()).nullable().optional(),
  "added": z.string().datetime({ offset: true }).optional(),
  "addOptions": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `addOptions` to the tool, first call the tool `expandSchema` with \"/properties/addOptions\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "ratings": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `ratings` to the tool, first call the tool `expandSchema` with \"/properties/ratings\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "movieFile": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `movieFile` to the tool, first call the tool `expandSchema` with \"/properties/movieFile\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "collection": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `collection` to the tool, first call the tool `expandSchema` with \"/properties/collection\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "popularity": z.number().optional(),
  "lastSearchTime": z.string().datetime({ offset: true }).nullable().optional(),
  "statistics": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `statistics` to the tool, first call the tool `expandSchema` with \"/properties/statistics\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional()
}