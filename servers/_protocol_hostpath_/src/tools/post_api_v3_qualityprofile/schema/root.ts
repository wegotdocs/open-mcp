import { z } from "zod"

export const inputParamsSchema = {
  "id": z.number().int().optional(),
  "name": z.string().nullable().optional(),
  "upgradeAllowed": z.boolean().optional(),
  "cutoff": z.number().int().optional(),
  "items": z.array(z.object({ "id": z.number().int().optional(), "name": z.string().nullable().optional(), "quality": z.object({ "id": z.number().int().optional(), "name": z.string().nullable().optional(), "source": z.enum(["unknown","cam","telesync","telecine","workprint","dvd","tv","webdl","webrip","bluray"]).optional(), "resolution": z.number().int().optional(), "modifier": z.enum(["none","regional","screener","rawhd","brdisk","remux"]).optional() }).strict().optional(), "items": z.array(z.object({ "id": z.number().int().optional(), "name": z.string().nullable().optional(), "quality": z.object({ "id": z.number().int().optional(), "name": z.string().nullable().optional(), "source": z.enum(["unknown","cam","telesync","telecine","workprint","dvd","tv","webdl","webrip","bluray"]).optional(), "resolution": z.number().int().optional(), "modifier": z.enum(["none","regional","screener","rawhd","brdisk","remux"]).optional() }).strict().optional(), "items": z.array(z.object({ "id": z.number().int().optional(), "name": z.string().nullable().optional(), "quality": z.object({ "id": z.number().int().optional(), "name": z.string().nullable().optional(), "source": z.enum(["unknown","cam","telesync","telecine","workprint","dvd","tv","webdl","webrip","bluray"]).optional(), "resolution": z.number().int().optional(), "modifier": z.enum(["none","regional","screener","rawhd","brdisk","remux"]).optional() }).strict().optional(), "items": z.array(z.object({ "id": z.number().int().optional(), "name": z.string().nullable().optional(), "quality": z.object({ "id": z.number().int().optional(), "name": z.string().nullable().optional(), "source": z.enum(["unknown","cam","telesync","telecine","workprint","dvd","tv","webdl","webrip","bluray"]).optional(), "resolution": z.number().int().optional(), "modifier": z.enum(["none","regional","screener","rawhd","brdisk","remux"]).optional() }).strict().optional(), "items": z.array(z.object({ "id": z.number().int().optional(), "name": z.string().nullable().optional(), "quality": z.object({ "id": z.number().int().optional(), "name": z.string().nullable().optional(), "source": z.enum(["unknown","cam","telesync","telecine","workprint","dvd","tv","webdl","webrip","bluray"]).optional(), "resolution": z.number().int().optional(), "modifier": z.enum(["none","regional","screener","rawhd","brdisk","remux"]).optional() }).strict().optional(), "items": z.array(z.object({ "id": z.number().int().optional(), "name": z.string().nullable().optional(), "quality": z.object({ "id": z.number().int().optional(), "name": z.string().nullable().optional(), "source": z.enum(["unknown","cam","telesync","telecine","workprint","dvd","tv","webdl","webrip","bluray"]).optional(), "resolution": z.number().int().optional(), "modifier": z.enum(["none","regional","screener","rawhd","brdisk","remux"]).optional() }).strict().optional(), "items": z.array(z.object({ "id": z.number().int().optional(), "name": z.string().nullable().optional(), "quality": z.object({ "id": z.number().int().optional(), "name": z.string().nullable().optional(), "source": z.enum(["unknown","cam","telesync","telecine","workprint","dvd","tv","webdl","webrip","bluray"]).optional(), "resolution": z.number().int().optional(), "modifier": z.enum(["none","regional","screener","rawhd","brdisk","remux"]).optional() }).strict().optional(), "items": z.array(z.object({ "id": z.number().int().optional(), "name": z.string().nullable().optional(), "quality": z.object({ "id": z.number().int().optional(), "name": z.string().nullable().optional(), "source": z.enum(["unknown","cam","telesync","telecine","workprint","dvd","tv","webdl","webrip","bluray"]).optional(), "resolution": z.number().int().optional(), "modifier": z.enum(["none","regional","screener","rawhd","brdisk","remux"]).optional() }).strict().optional(), "items": z.array(z.object({ "id": z.string().optional(), "name": z.string().optional(), "quality": z.string().optional(), "items": z.string().optional(), "allowed": z.string().optional() }).strict()).nullable().optional(), "allowed": z.boolean().optional() }).strict()).nullable().optional(), "allowed": z.boolean().optional() }).strict()).nullable().optional(), "allowed": z.boolean().optional() }).strict()).nullable().optional(), "allowed": z.boolean().optional() }).strict()).nullable().optional(), "allowed": z.boolean().optional() }).strict()).nullable().optional(), "allowed": z.boolean().optional() }).strict()).nullable().optional(), "allowed": z.boolean().optional() }).strict()).nullable().optional(), "allowed": z.boolean().optional() }).strict()).nullable().optional(),
  "minFormatScore": z.number().int().optional(),
  "cutoffFormatScore": z.number().int().optional(),
  "minUpgradeFormatScore": z.number().int().optional(),
  "formatItems": z.array(z.object({ "id": z.number().int().optional(), "format": z.number().int().optional(), "name": z.string().nullable().optional(), "score": z.number().int().optional() }).strict()).nullable().optional(),
  "language": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `language` to the tool, first call the tool `expandSchema` with \"/properties/language\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional()
}